{"categories":[{"title":"使用体验","uri":"https://senjianlu.com/categories/%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"},{"title":"学习笔记","uri":"https://senjianlu.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"教程翻新","uri":"https://senjianlu.com/categories/%E6%95%99%E7%A8%8B%E7%BF%BB%E6%96%B0/"},{"title":"踩坑记录","uri":"https://senjianlu.com/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"}],"posts":[{"content":"Mac 上配置开发环境时遇到的问题，留个记录。\n 1、Error: pg_config executable not found\n 具体错误为：\n...\r...\rError: pg_config executable not found.\rPlease add the directory containing pg_config to the PATH\ror specify the full executable path with the option:\rpython setup.py build_ext --pg-config /path/to/pg_config build ...\ror with the pg_config option in 'setup.cfg'.\rComplete output from command python setup.py egg_info:\rrunning egg_info\r...\r...\r  解决方法较为简单，安装下 PostgreSQL 或者 PostgreSQL 的开发环境即可：\nbrew install postgresql\r  没有 brew 的先安装：\n/bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026quot;\r brew 在 GitHub 上的项目仓库：Homebrew/brew\n 之后记得重新开一个终端以加载新的环境变量！\n2、error: command \u0026lsquo;clang\u0026rsquo; failed with exit status 1\n 具体错误为：\n...\r...\rld: library not found for -lssl\rclang: error: linker command failed with exit code 1 (use -v to see invocation)\rerror: command '/usr/bin/clang' failed with exit status 1\r...\r...\r  解决方法是安装 openssl@3：\n# 安装 openssl@3\rbrew reinstall openssl\r  如果你之前用其他工具安装过的话，只需要将其目录添加至环境变量中即可：\nexport LDFLAGS=\u0026quot;-L/opt/homebrew/opt/openssl@3/lib\u0026quot;\rexport CPPFLAGS=\u0026quot;-I/opt/homebrew/opt/openssl@3/include\u0026quot;\r 具体参照这篇讨论：Can\u0026rsquo;t install psycopg2 package through pip install on MacOS\n 同样之后你需要重新打开一个终端。\n结束。\n","id":0,"section":"posts","summary":"Mac 上配置开发环境时遇到的问题，留个记录。 1、Error: pg_config executable not found 具体错误为： ... ... Error: pg_config executable not found. Please add the directory containing pg_config to the PATH or specify the full executable path with the option: python setup.py build_ext --pg-config /path/to/pg_config build ...","tags":["python","postgresql"],"title":"Mac 下 pip3 install psycopg2 出现的错误和解决","uri":"https://senjianlu.com/2022/01/mac-pip3-install-psycopg2-error/","year":"2022"},{"content":"在建设这个博客的初期本来是想开放评论功能的，但是由于第一次接触 Hugo 这样静态博客，页面上的内容都是通过模板生成，实在是生疏，稍微配置了一下发现不行就放弃了。\n一直到现在，想想还是再试一试吧，于是就有了这篇博文。\n 我这里使用的是 utterances 来实现评论功能，评论会被保存到你指定 GitHub 仓库（必须是公开的）的 Issues 内，由于任何人只要通过 GitHub OAuth 登录过后就可以进行评论，且官方没有敏感词等的过滤，因此担心污染仓库的话请慎用。\n而其他的评论配置和本文中的操作大同小异，基本都是在博文页面的模板中添加评论服务提供商给的评论页面元素模板，之后在配置文件中设置变量以开启评论功能。\n1、安装 utterances\nutterances 的安装较为简单，直接在 GitHub App 上安装即可。\n 关于 GitHub App 的介绍可以看这篇文章：详解 GitHub App 的玩法\n GitHub App 链接：utterances\n点击 Install：\n选择一个仓库并安装（我推荐用你 Hugo 博客所在的仓库，这样管理起来更方便）：\n之后跳转到这个页面就说明安装成功了：\n2、获取 utterances 评论的代码片段并加入到博文模板中\n我这里就通过勾选官方页面给的选项来生成自己的代码片段吧（就在刚刚成功的页面上）：\n 刚刚你配置 utterances 可读取写入的仓库名。 Issue 标题的样式，我选的是以博文的路径作为标题，后面也有用博文 Url 和博文标题可选。 评论 Issue 的标签。  当然下面还有主题可选，完成后就能获得自己的代码片段了：\n\u0026lt;script src=\u0026quot;https://utteranc.es/client.js\u0026quot;\rrepo=\u0026quot;senjianlu/senjianlu.github.io\u0026quot;\rissue-term=\u0026quot;pathname\u0026quot;\rlabel=\u0026quot;评论\u0026quot;\rtheme=\u0026quot;github-light\u0026quot;\rcrossorigin=\u0026quot;anonymous\u0026quot;\rasync\u0026gt;\r\u0026lt;/script\u0026gt;\r 3、写入博文模板\n各主题博文模板的路径可能不同，我 pure 主题的路径为：\\pure\\layouts\\partials\\article.html\n有一个专门的评论模板，那么直接去那里面添加即可，添加前：\n添加后：\n内容：\n...\r...\r{{- else if eq $comment.type \u0026quot;utterances\u0026quot; }}\r\u0026lt;script src=\u0026quot;{{- $comment.utterances.src }}\u0026quot; repo=\u0026quot;{{- $comment.utterances.repo }}\u0026quot; issue-term=\u0026quot;{{- $comment.utterances.issue_term }}\u0026quot; label=\u0026quot;{{- $comment.utterances.label }}\u0026quot; theme=\u0026quot;{{- $comment.utterances.theme }}\u0026quot; crossorigin=\u0026quot;{{- $comment.utterances.crossorigin }}\u0026quot; async\u0026gt;\u0026lt;/script\u0026gt;\r...\r...\r 我这里将变量都值交给了配置文件去设置，你直接写死当然也是可以的，就是后面修改起来没有那么方便了。\n4、在配置文件中设置变量\n比较简单，在 config.toml（你博客的配置文件而非主题的配置文件）里照着之前 comment 变量依葫芦画瓢即可：\n[params]\r...\r...\r[params.comment]\rdisqus = \u0026quot;your_disqus_name\u0026quot;\rtype = \u0026quot;utterances\u0026quot;\r...\r...\r[params.comment.utterances]\rsrc = \u0026quot;https://utteranc.es/client.js\u0026quot;\rrepo = \u0026quot;senjianlu/senjianlu.github.io\u0026quot;\rissue_term = \u0026quot;pathname\u0026quot;\rlabel = \u0026quot;评论\u0026quot;\rtheme = \u0026quot;github-light\u0026quot;\rcrossorigin = \u0026quot;anonymous\u0026quot;\r 注意 $comment.type 变量不要忘掉！\n5、本地渲染测试\n本地启动看下（pure 为我的主题名，请自行替换）：\nhugo server -t pure\r 选择登录：\n之后评论便能正常输入了：\n成功评论：\n同时 Issues + 1： 本地测试通过之后，正式发布理论上也不会有任何问题的，我这里就不演示了。\n 需要停止评论功能的话，先停用 utterances App： 之后修改 config.toml 将 $comment.type 的值改为空即可。\n 结束。\n","id":1,"section":"posts","summary":"在建设这个博客的初期本来是想开放评论功能的，但是由于第一次接触 Hugo 这样静态博客，页面上的内容都是通过模板生成，实在是生疏，稍微配置了一下发现不","tags":["网站建设"],"title":"Hugo 静态博客使用 utterances 来开启评论功能","uri":"https://senjianlu.com/2022/01/hugo-comment/","year":"2022"},{"content":"之前在主机论坛看到了这个帖子：挖 Peer2Profit 网赚回血保姆级教程 支持 Windows/Debian/Ubuntu/Android，想到自己还有 40 来台小鸡，闲着也是闲着索性都挂上来回点本钱吧。\n这篇教程是在我挂了 1 天后写的，这期间主机商（主要是 VirMach 和 Sentris）并未发来警告邮件，我检查了实际的日志，起了 Peer2Profit 的容器除了对 api.peer2profit.global 进行访问以保持在线状态，其他流量均是加密的，而且目标地址均为 IP 形式，也就是说即使用以违规用途也不会触发 ToS，可以放心食用，唯一的坏处是你的 IP 可能会变脏。\n当然，请不要用国内主机挂这个！不仅是因为收益很少（实测一天就只会跑大概 20 MB 左右的流量，官方给的价格是 $0.8/GB），更需要担心的是被不法分子用以电信诈骗而导致的后续问题。\n 明确风险后那我们就开始吧！\n1、了解收益\n官方给的收益预期是单主机一个月 2 美刀左右：\n而实际上被标识为 IDC 机房的 IP 不会有这么高的收益，实际价目表为：\n我跑了将近 1 天，实际消耗流量分别为（residential 为家宽，hosting 为机房 IP，我在同主机上开了 4 个容器试试流量会不会叠加，因此后 4 个流量需要累加）：\n大致就能估算出家宽 IP 每月消耗流量在 150 MB 左右，收益为 0.1 美刀左右；而机房 IP 则在 100 MB 左右，收益为 0.03 美刀。不能说很少，只能说基本没有\u0026hellip;\u0026hellip;\n2、注册账号\n如果这点收益你能接受，或者说你对自己的 IP 很有自信的话，那么就来试一试吧。\n访问 https://peer2profit.com 并注册账号：\n 如果愿意的话你可以填入我的邀请码：164194907761de27958da86，我将会得到你赚取金额的额外 50% 作为奖励，而你实际的赚取金额不会有任何减少。\n 后续你的邮箱会被用以软件的启动和绑定。\n3、下载官方容器镜像\n官方只提供了 .deb 格式的安装文件，在 CentOS7 系统上安装极为麻烦，因此这里使用官方的 Docker 容器镜像来启动。\n镜像地址：peer2profit/peer2profit_x86_64\n直接在服务器上执行：\ndocker pull peer2profit/peer2profit_x86_64:latest\r  如果你还没有安装 Docker 的话，使用下面的指令安装和开启开机自启动：\nyum -y install docker\rsystemctl start docker.service\rsystemctl enable docker.service\r  4、启动容器\n启动较为简单：\ndocker run -d --name peer2profit --restart always --env P2P_EMAIL=test@example.com peer2profit/peer2profit_x86_64:latest\r 只需要把邮箱 test@example.com 替换为你注册账号的邮箱即可，启动后稍等片刻查看下容器内的运行状况：\ndocker logs peer2profit\r 如上说明启动成功，前往 Peer2Profit 的控制面板，选择 My network 之后应该就能看到这个节点了：\n之后静待收益入账即可。\n 如果想停止的话，直接关闭和删除容器即可：\ndocker stop peer2profit\rdocker rm peer2profit\r  5、关于提现\n官方支持多种虚拟货币提现，我推荐莱特币、USDT 和币安智能链上的代币，因为他们转账所需要的油费相对更少：\n 关于 MetaMask 钱包的安装和币安智能链的添加，可以看我这篇教程：基于以太坊 ETH 的智能合约学习（一）下载和使用小狐狸钱包 MetaMask（Chrome 插件版）并添加 BSC 主网络进行 BNB 转账\n 结束。\n","id":2,"section":"posts","summary":"之前在主机论坛看到了这个帖子：挖 Peer2Profit 网赚回血保姆级教程 支持 Windows/Debian/Ubuntu/Android，想到自己还有 40 来台小鸡，","tags":["Docker"],"title":"CentOS7 下用 Docker 部署 Peer2Profit 出售流量赚取收益","uri":"https://senjianlu.com/2022/01/centos7-docker-peer2profit/","year":"2022"},{"content":"如果你没有不过墙的 IPLC 线路的话，请不要在境外服务器上搭建 HTTP 或 SOCKS5 代理，连上以后流量稍微一大就会使 IP 被墙。\n HTTP 和 SOCKS5 代理搭建的方式有很多：使用 Tinyproxy 搭建 HTTP 代理、使用 ss5 搭建 SOCKS5 代理等等\u0026hellip;\u0026hellip;我这里使 GOST 来启动代理服务端，优点是安装方便（只有一个可执行脚本），且同时能启动加密的 HTTP 和 SOCKS5 代理服务。\n 附上一些我的开源脚本：\nHTTP 代理：CentOS7 下一键安装 Tinyproxy 代理\nSOCKS5 代理：CentOS7 下一键安装 SOCKS5 代理\n同时安装 HTTP 和 SOCKS5 代理：CentOS7 下一键安装 GOST 并启动 HTTP 和 SOCKS5 代理服务\n 1、下载并安装 GOST\n下载 GOST：\nwget https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz\r  如果境内下载慢的话可以用我 Gitee 上的源：gost-linux-amd64-2.11.1.gz\n 下载完成后解压出 gost 执行文件，并放在 /usr/bin 等目录下以方便在任何地方调用：\n# 解压\rgunzip gost-linux-amd64-2.11.1.gz\r# 移动\rmv gost-linux-amd64-2.11.1 /usr/bin/gost\r 2、启动 GOST\n使用 GOST 开启 HTTP 和 SOCKS5 代理功能的命令比较简单：\ngost -L $username:$password@:$port\r 参数说明及样例：\n   参数 说明 样例     username 代理认证用的用户名。 myusername   password 代理认证用的密码。 mypassword   port 代理服务的端口。 1080     GOST 强大的其他功能可以参考官方文档：GOST v2\n 启动成功并确定对应端口的防火墙和安全组开放后可以在其他 Linux 服务器上测试一下（$host 为你代理服务器的 IP 地址）：\ncurl -x http://$username:$password@$host:$port http://ip-api.com/json/?lang=zh-CN  3、使用 Screen 启动并设置为开机自启动\n你会发现 GOST 在你退出终端后就会停止，这里使用 Screen 新建一个窗口并运行 GOST：\n# 安装 Screen\ryum -y install screen\r# 新建 Screen 并在其中运行 GOST\rscreen -dmS screen-for-gost \u0026amp;\u0026amp; screen -S screen-for-gost -X stuff '/usr/bin/gost -L $username:$password@:$port\\n'\r 而开机自启动则需要配置 Linux 系统任务：\ncrontab -e\r 新加一条任务：\n@reboot screen -dmS screen-for-gost \u0026amp;\u0026amp; screen -S screen-for-gost -X stuff '/usr/bin/gost -L $username:$password@:$port\\n'\r 之后重启 Cron 即可：\nservice crond restart\r 结束。\n","id":3,"section":"posts","summary":"如果你没有不过墙的 IPLC 线路的话，请不要在境外服务器上搭建 HTTP 或 SOCKS5 代理，连上以后流量稍微一大就会使 IP 被墙。 HTTP 和 SOCKS5 代理搭建的方式有很多：使用 Tinyproxy 搭建 HTTP","tags":["Clash","Linux"],"title":"CentOS7 下搭建 HTTP 和 SOCKS5 代理服务","uri":"https://senjianlu.com/2022/01/centos7-http-and-socks5-proxy/","year":"2022"},{"content":"趁着周末把博客目前所有文章的标签重新整理了一下，虽然创立之初是为了记录自己工作中碰到的问题和解决的，但是 Clash 和科学相关的内容意外的多，索性整理成目录吧。\n注：删除线覆盖的为废弃文章，末尾带 todo... 的还在写。\n Clash 配置学习（包含服务器上节点的搭建） 1、Clash 学习（一）配置文件各项在实际使用中的用处和创建自己的第一个配置文件\n2、Clash 学习（二）节点配置的两种格式：使用缩进的树形结构和类字典的扁平化结构\n3、Clash 学习（三）进阶配置：在 Clash 中定时更新机场节点和导入外部规则\n4、Clash 学习（四）在 Clash 中配置使用 HTTP 协议或 SOCKS5 协议的节点\n 服务器上节点的搭建教程：CentOS7 下搭建 HTTP 和 SOCKS5 代理服务\n 5、Clash 学习（五）在 Clash 中配置使用 SS 协议的 Shadowsocks 节点todo...\n 服务器上节点的搭建教程：CentOS7 下安装 Shadowsocks 服务端\n 6、Clash 学习（六）配置使用 SSR 协议的 ShadowsocksR 节点 todo...\n7、Clash 学习（七）配置使用 VMess 协议的 V2Ray 节点 todo...\n8、Clash 学习（八）配置使用 Trojan 协议的 Trojan 节点 todo...\n OpenWrt 软路由系统与 Clash 插件的安装相关 定制 OpenWrt 软路由系统（一）从源码开始编译第一个系统固件\n定制 OpenWrt 软路由系统（二）删除多余插件并安装 Clash\n定制 OpenWrt 软路由系统（三）编译适用于自己 OpenWrt 软路由系统的 Clash 插件\nPVE 下 LEDE+爱快 双软路由部署（旧）\n 这份教程是我的第一篇教程，写的很差劲因此你可以直接跳过。如果你想要学习如何在路由器上安装 OpenWrt 系统的话，可以 YouTube 搜索对应教程，视频所能承载的内容是比文字更多的，我当时参考的是以下三个视频：\n【悟空5kong】PVE下部署 LEDE+黑群晖 NAS 双系统（J1900 软路由）\n上集- PVE (Proxmox VE) 安装双软路由 爱快+LEDE 保姆级教程\n下集- PVE (Proxmox VE) 安装双软路由 爱快+LEDE 保姆级教程\n PVE 下 OpenWrt 纯净系统 + 爱快双软路由部署配置文件的整理\n 我的家用网络拓扑和部分软路由系统的配置。\n  各服务商 IPLC 线路的使用体验 IPLC 食用（一）wikihost（维基主机）家 IPLC 线路流量转发的使用体验\nIPLC 食用（二）PittQiao（彼得巧）家苏日 IPLC 线路 NAT 主机的使用体验\n 其他 CentOS7 下安装 SOCKS5 代理并使用 GOST 搭建加密中转隧道\nCentOS7 下用 Docker 部署 UnblockNeteaseMusic 并在 Clash 中配置分流以在局域网内解锁网易云音乐变灰的歌曲\n","id":4,"section":"posts","summary":"趁着周末把博客目前所有文章的标签重新整理了一下，虽然创立之初是为了记录自己工作中碰到的问题和解决的，但是 Clash 和科学相关的内容意外的多，索性整理","tags":["Clash"],"title":"本博客关于 Clash 的博文的目录（OpenWrt 软路由系统下的 Clash 插件的安装、服务器上节点的搭建和 Clash 中的配置）","uri":"https://senjianlu.com/2022/01/clash-contents/","year":"2022"},{"content":"优化之前组的 K3s 集群的时候，想到每次配置文件的小修小改都要重启一大堆容器实在麻烦，只怪最初没考虑完全，趁这次机会起一个配置中心来解决这个麻烦。\n  ① 什么是配置中心？\n配置中心将配置从各应用中剥离出来，对配置进行统一管理，应用自身不需要自己去管理配置，可以参考下图：\n② 为什么选择 Apollo？\n携程开源且 GitHub 更新勤快，截止 2022 年 1 月 5 日还在更新。\n具体可以参照这篇文章：分布式配置中心（Nacos、Apollo）选型比较\n  Apollo 的运行需要 8 GB 左右的内存，如果你的服务器配置低于 2 核 8 GB，那就不用尝试了。\n官方给了 2 种方式来部署 Apollo：在服务器中直接启动和使用 Docker 启动，在服务器中直接启动就不用说了，而官方所使用的 Docker 镜像：nobodyiam/apollo-quick-start 是自带 MySQL 数据库的，我并不需要，于是就只能自己构建了。\n我希望最终容器可以和 apolloconfig/apollo-configservice 启动命令一样（并不是官方镜像因此不使用），能够指定数据库连接。\n我的 Dockerfile 文件：Apollo-docker\n我构建完的 Docker 镜像：rabbir/apollo\n1、安装和配置 Apollo 运行环境\n 官方描述的运行环境：\n Linux JDK（1.8 以上，推荐 1.8） MySQL（5.65 及以上，我有外置的数据库因此不做安装）   ① 直接拉取一个 CentOS7 的镜像：\n# 拉取镜像\rdocker pull centos:centos7\r# 运行镜像\rdocker run -it docker.io/centos:centos7 /bin/bash\r 之后的命令都是在容器内执行！\n② 安装 JDK1.8：\n# 安装位置\rcd /usr/local/\ryum -y install wget\r# 下载压缩包\rwget --no-check-certificate --no-cookies --header \u0026quot;Cookie: oraclelicense=accept-securebackup-cookie\u0026quot; http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz\r# 解压并重命名\rtar -zxvf jdk-8u131-linux-x64.tar.gz\rmv jdk1.8.0_131 jdk1.8\r# 删除压缩包\rrm -f jdk-8u131-linux-x64.tar.gz\r# 配置环境变量\rvi ~/.bashrc\r 新增以下两行：\n...\r...\r# Java 相关\rexport JAVA_HOME=/usr/local/jdk1.8\rexport PATH=$PATH:$JAVA_HOME/bin\rexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\r...\r...\r 使配置生效：\nsource ~/.bashrc\r# 确认 Java 版本\rjava -version\r 2、下载 Apollo Quick Start 安装包\n官方文档中对应的位置：下载 Quick Start 安装包\n项目地址：nobodyiam/apollo-build-scripts\nyum -y install git\r# 克隆项目\rgit clone https://github.com/nobodyiam/apollo-build-scripts\r 修改一下 demo.sh 使其能从环境变量中读取数据库连接信息：\nsed -i 's#jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8\u0026amp;serverTimezone=Asia/Shanghai#$APOLLO_CONFIG_DB_JDBC#' /usr/local/apollo-build-scripts/demo.sh\rsed -i 's#\u0026quot;dbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8\u0026amp;serverTimezone=Asia/Shanghai#$APOLLO_PORTAL_DB_JDBC#' /usr/local/apollo-build-scripts/demo.sh\r  原本的片段：\n# apollo config db info\rapollo_config_db_url=\u0026quot;jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8\u0026amp;serverTimezone=Asia/Shanghai\u0026quot;\rapollo_config_db_username=${APOLLO_CONFIG_DB_USERNAME:-root}\rapollo_config_db_password=${APOLLO_CONFIG_DB_PASSWORD:-}\r# apollo portal db info\rapollo_portal_db_url=\u0026quot;jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8\u0026amp;serverTimezone=Asia/Shanghai\u0026quot;\rapollo_portal_db_username=${APOLLO_PORTAL_DB_USERNAME:-root}\rapollo_portal_db_password=${APOLLO_PORTAL_DB_PASSWORD:-}\r 修改后的片段：\n# apollo config db info\rapollo_config_db_url=\u0026quot;$APOLLO_CONFIG_DB_JDBC\u0026quot;\rapollo_config_db_username=${APOLLO_CONFIG_DB_USERNAME:-root}\rapollo_config_db_password=${APOLLO_CONFIG_DB_PASSWORD:-}\r# apollo portal db info\rapollo_portal_db_url=\u0026quot;$APOLLO_PORTAL_DB_JDBC\u0026quot;\rapollo_portal_db_username=${APOLLO_PORTAL_DB_USERNAME:-root}\rapollo_portal_db_password=${APOLLO_PORTAL_DB_PASSWORD:-}\r  3、构建 Docker 容器镜像并运行\n① 配置一下 Apollo 运行所需要的数据库结构，需要新增两个 DB：ApolloPortalDB 和 ApolloConfigDB，文档中的位置：2.1 创建数据库\n我是买的腾讯云数据库，因此直接在网页端执行（需要手动创建数据库后选定数据库执行剩下的语句，部分 SET 语句出错可以跳过）：\n之后检查一下：\n-- 检查 ApolloPortalDB\rselect `Id`, `AppId`, `Name` from ApolloPortalDB.App;\r    Id AppId Name     1 SampleApp Sample App   ApolloConfigDB 同理，创建数据库并建表之后检查：      -- 检查 ApolloConfigDB\rselect `NamespaceId`, `Key`, `Value`, `Comment` from ApolloConfigDB.Item;\r    NamespaceId Key Value Comment     1 timeout 100 sample timeout配置    ② 将上述所有命令写入 Dockerfile（部分命令如环境变量的配置会有所不同）：\n# 基础镜像系统版本为 CentOS:7\rFROM centos:7\r# 维护者信息\rLABEL maintainer=\u0026quot;Rabbir admin@cs.cheap\u0026quot;\r# Docker 内用户切换到 root\rUSER root\r# 设置时区为东八区\rENV TZ Asia/Shanghai\rRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026gt; /etc/timezone\r# 安装 Git 和 Wget\rRUN yum -y install wget\rRUN yum -y install git\r# 切换到 /usr/local/ 目录下\rWORKDIR /usr/local/\r# 下载解压 JDK\rRUN wget --no-check-certificate --no-cookies --header \u0026quot;Cookie: oraclelicense=accept-securebackup-cookie\u0026quot; http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz\rRUN tar -zxvf jdk-8u131-linux-x64.tar.gz\rRUN mv jdk1.8.0_131 jdk1.8\rRUN rm -f jdk-8u131-linux-x64.tar.gz\r# 添加容器内的永久环境变量\rRUN sed -i \u0026quot;2 a export JAVA_HOME=/usr/local/jdk1.8\u0026quot; /etc/profile\rRUN sed -i \u0026quot;3 a export PATH=\\$PATH:\\$JAVA_HOME/bin\u0026quot; /etc/profile\rRUN sed -i \u0026quot;4 a export CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar\u0026quot; /etc/profile\rRUN source /etc/profile\rRUN sed -i '1 a source /etc/profile' ~/.bashrc\rRUN source ~/.bashrc\r# 添加构建用的临时环境变量\rENV JAVA_HOME /usr/local/jdk1.8\rENV PATH $PATH:$JAVA_HOME/bin\rENV CLASSPATH .:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\r# 克隆源码并修改 demo.sh 文件\rWORKDIR /usr/local/\rRUN git clone https://github.com/nobodyiam/apollo-build-scripts\rWORKDIR /usr/local/apollo-build-scripts/\rRUN sed -i 's#jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8\u0026amp;serverTimezone=Asia/Shanghai#$APOLLO_CONFIG_DB_JDBC#' demo.sh\rRUN sed -i 's#jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8\u0026amp;serverTimezone=Asia/Shanghai#$APOLLO_PORTAL_DB_JDBC#' demo.sh\r# 创建启动脚本\rRUN echo \u0026quot;/bin/bash /usr/local/apollo-build-scripts/demo.sh start \u0026amp;\u0026amp; tail -f /dev/null\u0026quot; \u0026gt; start.sh\r# 启动命令\rENTRYPOINT [\u0026quot;/bin/bash\u0026quot;, \u0026quot;start.sh\u0026quot;]\rCMD [\u0026quot;\u0026quot;]\r 构建（镜像名和版本自行替换）：\ndocker build -t rabbir/apollo:latest .\r ③ 启动并登录管理界面\nApollo 启动会用到三个端口：\n 8070（Apollo Portal 管理界面端口） 8080（提供配置的读取、推送等功能，服务对象是 Apollo 的各客户端） 8090（提供配置的修改、发布等功能，服务对象是 Apollo Portal）  暂时不做文件夹的映射，因此启动命令如下（数据库连接信息自行更改）：\ndocker run --name apollo -d \\\r-p 18070:8070 \\\r-p 18080:8080 \\\r-p 18090:8090 \\\r-e APOLLO_CONFIG_DB_JDBC=\u0026quot;jdbc:mysql://127.0.0.1:3306/ApolloConfigDB?characterEncoding=utf8\u0026quot; \\\r-e APOLLO_CONFIG_DB_USERNAME=\u0026quot;myusername\u0026quot; \\\r-e APOLLO_CONFIG_DB_PASSWORD=\u0026quot;mypassword\u0026quot; \\\r-e APOLLO_PORTAL_DB_JDBC=\u0026quot;jdbc:mysql://127.0.0.1:3306/ApolloPortalDB?characterEncoding=utf8\u0026quot; \\\r-e APOLLO_PORTAL_DB_USERNAME=\u0026quot;myusername\u0026quot; \\\r-e APOLLO_PORTAL_DB_PASSWORD=\u0026quot;mypassword\u0026quot; \\\rrabbir/apollo:latest\r 启动并查看日志：\ndocker logs apollo\r 显示如上则说明没有问题，确保防火墙和安全组开放的情况下就能去访问管理界面了，登录账号为 apollo 密码为 admin（我将容器的 8070 端口映射到了宿主机的 18070 端口上）：\n成功，结束。\n","id":5,"section":"posts","summary":"优化之前组的 K3s 集群的时候，想到每次配置文件的小修小改都要重启一大堆容器实在麻烦，只怪最初没考虑完全，趁这次机会起一个配置中心来解决这个麻烦。","tags":["Apollo","Docker"],"title":"分布式配置中心 Apollo 的使用（一）构建 Apollo 的 Docker 容器镜像并连接到现有数据库","uri":"https://senjianlu.com/2022/01/apollo-note-01/","year":"2022"},{"content":"如果你不喜欢官方的 Remix 或是想使用自己的域名来访问在线 Remix，那么就请继续看下去吧！\n我并不推荐使用 npm 的安装方式，一方面是麻烦，另一方面官方 GitHub 仓库文档也只介绍了 Docker 启动。况且不同于 code-server，Remix 上编写的智能合约脚本不怎么吃系统资源，不用考虑性能问题。\n 官方 GitHub 项目地址：ethereum/remix-ide\n1、下载 Docker 容器镜像\ndocker pull remixproject/remix-ide:latest\r  CentOS 服务器上没有安装过 Docker 的话，执行以下命令进行安装和启动：\nyum -y install docker\r# 启动 Docker 服务和设置为开机自启动\rsystemctl start docker.service\rsystemctl enable docker.service\r  2、启动容器\n将容器内的 80 端口映射到宿主机的 8089 端口，并设置容器为开机自启动：\ndocker run -d -p 8089:80 --name remix --restart=always remixproject/remix-ide:latest\r 3、配置域名访问和开启 HTTPS\n① 开启域名访问，我准备使用的域名是 remix.example.com，配置文件中的相关内容请自行替换。\n修改宿主机的 Nginx 配置文件：\nvi /etc/nginx/nginx.conf\r 新增如下内容：\n...\r...\rserver {\rlisten 80;\rserver_name remix.example.com;\rroot /usr/share/nginx/html;\r# Load configuration files for the default server block.\rinclude /etc/nginx/default.d/*.conf;\r# 反代 8089 端口的 Remix\rlocation / {\rproxy_pass http://localhost:8089;\r}\r}\r...\r...\r 之后保存并重启 Nginx：\nnginx -s reload\rservice nginx restart\r 之后去你域名服务商的 DNS 处解析域名到该服务器就 OK 了，访问一下看看：\n② 配置 SSL 证书以支持 HTTPS 访问\n 你可以选择申请 Let\u0026rsquo;s Encrypt 的免费 SSL 证书来开启 HTTPS，具体教程参考：Let\u0026rsquo;s Encrypt 证书的申请、自动更新和 Nginx 的配置\n当然你也可以套 Cloudflare 的 CDN 并开启 SSL/TLS 的灵活模式，以跳过繁琐的申请过程并使用由 Cloudflare 提供的免费证书。\n 修改 Nginx 的配置文件：\n...\r...\rserver {\rlisten 80;\rserver_name remix.example.com;\rreturn 301 https://$host$request_uri;\r}\rserver {\rlisten 443 ssl;\rserver_name remix.example.com;\r# SSL 配置\rssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\rssl_protocols TLSv1 TLSv1.1 TLSv1.2;\rssl_certificate cert/remix.example.com_bundle.crt;\rssl_certificate_key cert/remix.example.com.key;\r# 反代 8089 端口的 Remix\rlocation / {\rproxy_pass http://localhost:8089;\r}\r}\r...\r...\r 之后再用 HTTPS 协议访问试一下：\n结束。\n","id":6,"section":"posts","summary":"如果你不喜欢官方的 Remix 或是想使用自己的域名来访问在线 Remix，那么就请继续看下去吧！ 我并不推荐使用 npm 的安装方式，一方面是麻烦，另一方面官方 GitHub","tags":["区块链"],"title":"基于以太坊 ETH 的智能合约学习（二） 补足：CentOS7 下使用 Docker 部署 remix-ide 智能合约开发环境","uri":"https://senjianlu.com/2021/12/smart-contracts-note-02-supplement/","year":"2021"},{"content":"主职是日本客户做开发的，公司提供了专线因此个人服务器基本也都买在日本了，再加上现在住在江苏，考虑专门上一条 IPLC 专线来连接个人服务器，就相中了这款苏州到日本的 IPLC 线路 NAT 主机。\n彼得巧也算老商家了，19 年就看到了他们家无锡到日本的 IPLC 线路，可惜那个时候工资少，也没这需求，这下也算了却心愿了吧。\n 本章商家：PittQiao（彼得巧）\n1、价格信息\n因为是 NAT 主机因此只需要按月付费即可，流量超额可以 Telegram 联系客服免费重置。\n我购买的是“蘇➜日 | SUTYO-5M-NAT”这款，使用折扣码大概是打 92 折左右，差不多 180 多一点一个月：\n他家其他的 IPLC NAT 云基本也都是 200 多的价格 5M 到 10M 的带宽，自行挑选：购物车\n2、配置\n购买后等个审核（发工单可加速）：\n审核完成后点开详细，NAT 主机的连接信息在如下位置：\nIPIP 查看发现用来连接服务器的 IP 是苏州的：\n而连接服务器后，使用如下命令测试一下出口 IP：\ncurl http://ip-api.com/json/?lang=zh-CN\r 可以发现已经是境外出口 IP 了。\n之后的操作就随你了，在 iptables 上配置端口转发来中转流量到自己其他服务器上的代理，或者是直接在该 NAT 机器上安装代理软件都可以。\n我这边就直接装 GOST 配置 SOCKS5 代理了（白嫖出口 IP），用的是我自己写的一键脚本：\ncurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20下一键安装%20GOST%20并启动%20HTTP%20和%20SOCKS5%20代理服务/install.sh | bash\r 之后在服务器上测试启动一下 GOST，注意代理端口必须是分配给你的那 10 个中的某一个：\ngost -L username:password@:11899\r 在境内服务器上连接测试一下：\ncurl -x http://username:password@42.xxx.xx.xxxx:11899 http://ip-api.com/json/?lang=zh-CN\r 正常，连接的是 IPLC 主机境内的 IP 而出口则是东京的 IP：\n 如果无法连接到代理且显示如下错误：\ncurl: (7) Failed connect to 42.xxx.xx.xxxx:11899; Connection refused\r 那么你需要遵循如下步骤：\n① 关闭 SELinux，编辑 /etc/selinux/config 文件：\nvi /etc/selinux/config\r 将 SELINUX=enforce 改为 SELINUX=disabled，之后重启。\n② 关闭防火墙：\nsystemctl stop firewalld.service\r# 禁止开机自启动\rsystemctl disable firewalld.service\r 之后就能正常访问代理了。\n 使用体验\n① 价格方面\n个人用略贵，有产出另说。\n② 使用方面\n虽然写了禁止看视频，但实际是可以看的，YouTube 1080p 分辨率下秒加载：\n延迟方面，到境内那个 IP 的延迟实际上就是到东京出口的延迟了，50 ms 不错：\n结束。\n","id":7,"section":"posts","summary":"主职是日本客户做开发的，公司提供了专线因此个人服务器基本也都买在日本了，再加上现在住在江苏，考虑专门上一条 IPLC 专线来连接个人服务器，就相中了这","tags":["其他"],"title":"IPLC 食用（二）PittQiao（彼得巧）家苏日 IPLC 线路 NAT 主机的使用体验","uri":"https://senjianlu.com/2021/12/vps-iplc-02/","year":"2021"},{"content":"从零开始学习 Solidity 语言的时候突然回想起上大学对着键盘敲 C 的日子，老师明知道台下一半的学生出了校园甚至是这门课结束了就再也不会碰 C，却依然很负责任的教书，不甚唏嘘。\n本来想从第二章就介绍以太坊链的一些专有名词、Solidity 的语法的，考虑了一下还是先一起走一遍发币流程吧，也不会浪费太多时间，而且只想浅尝辄止体验一下的读者学完本章也能如愿了。\n 参考教程：10 分钟发行自己的加密货币，零基础教学 | 2021 （ETH， BTC）\n本章的内容也是对上述视频的实践和拓展（除了 MetaMask 钱包那部分，已经在上一章详细讲过了），我推荐先看一遍视频来了解我们总共需要做哪些事情。\n1、明确我们要做什么\n虽然标题为一键发币看起来非常方便非常简单，但在这之前还是要理一下“发币”的动作如何实现，这对你之后的操作会很有帮助。\n很简单，实现方式就是在以太坊链上发布一份智能合约，而这份合约内的代码要包含以下两个功能即可：\n 根据我对其名字、数量等信息的设定而生成代币 将这些代币全转到我的钱包内  而代码在哪里、如何运行就不用你操心了，至少在这章不需要，全交给以太坊虚拟机即可。\n2、切换至以太坊测试链并领取测试用 ETH\n由于暂时挖的 ETH 还不够部署合约，因此这里使用官方提供的 Ropsten 测试链，之后的发币操作也是在这条链上执行的。\n在 MetaMask 上显示测试链：\n之后切换到 Ropsten 测试网络：\n前往 https://faucet.metamask.io 领取免费的测试用 ETH，点击 request 1 ether from faucet 按钮后连接 MetaMask 钱包：\n连接完成后就能看到下方的的交易记录了，一枚测试用以太坊就打入了你的钱包：\n 如果领取失败的话，尝试关闭代理或使用私人代理，机场节点的 IP 一般都无法领取。\n视频教程中的 https://faucet.ropsten.be 领取站点的钱包在我进行操作时已经没有 ETH 余额了，所以没用。\n 3、打开 Remix 智能合约开发环境并克隆现成的代币合约代码\n像写 Java 你会用 IDEA、写 Python 我会用 VS Code 一样，智能合约也有适合它的 IDE：Remix。\n智能合约的运行依赖 Solidity 环境，如果你想用 VS Code 写的话当然也行，不过需要花费很多时间来安装 Solidity 的编译环境，Solidity 官方是推荐使用 Remix 进行合约开发的：\n且以太坊官方也提供了在线 Remix：remix.ethereum.org，那么我这里就直接用了。\n 如果你想在自己的云服务器上安装 Remix 的话可以看我这篇文章：基于以太坊 ETH 的智能合约学习（二） 补足：CentOS7 下使用 Docker 安装 remix-ide 智能合约开发环境\n 访问 https://remix.ethereum.org：\n选择从 GitHub 导入代码：\n这里用到的是这个仓库：ConsenSys/Tokens\n而合约最主要的两份代码是：\n主实现代码：https://github.com/ConsenSys/Tokens/blob/fdf687c69d998266a95f15216b1955a4965a0a6d/contracts/eip20/EIP20.sol\n接口类：https://github.com/ConsenSys/Tokens/blob/fdf687c69d998266a95f15216b1955a4965a0a6d/contracts/eip20/EIP20Interface.sol\n都导入到项目中：\n 参考以太坊 ERC20 Token 合约代码分析一文，稍微对主实现代码做下解释：\n/*\rImplements EIP20 token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r.*/\rpragma solidity ^0.4.21;\rimport \u0026quot;./EIP20Interface.sol\u0026quot;;\rcontract EIP20 is EIP20Interface {\ruint256 constant private MAX_UINT256 = 2**256 - 1;\rmapping (address =\u0026gt; uint256) public balances;\rmapping (address =\u0026gt; mapping (address =\u0026gt; uint256)) public allowed;\r/*\rNOTE:\rThe following variables are OPTIONAL vanities. One does not have to include them.\rThey allow one to customise the token contract \u0026amp; in no way influences the core functionality.\rSome wallets/interfaces might not even bother to look at this information.\r*/\r// Token 的必填属性：Token 名称、小数位数（一般为 18 位）和 Token 的简称\rstring public name; //fancy name: eg Simon Bucks\ruint8 public decimals; //How many decimals to show.\rstring public symbol; //An identifier: eg SBX\rfunction EIP20(\r// 部署合约时需要填入的变量\ruint256 _initialAmount,\rstring _tokenName,\ruint8 _decimalUnits,\rstring _tokenSymbol\r) public {\r// 将用户输入的变量实际赋值给合约\r// 合约创建者默认拥有所有的 Token（将币的总数赋予合约创建者的地址，这样在你添加这个 Token 种类后，币就全在你钱包里了）\rbalances[msg.sender] = _initialAmount; // Give the creator all initial tokens\r// 发行总量，要根据小数点精确度来计算，比如发行 100 个，小数点后位数为 2，则需要填写 10000\rtotalSupply = _initialAmount; // Update total supply\rname = _tokenName; // Set the name for display purposes\rdecimals = _decimalUnits; // Amount of decimals for display purposes\rsymbol = _tokenSymbol; // Set the symbol for display purposes\r}\r// 发送 Token 的动作（一般由合约创建者执行）\rfunction transfer(address _to, uint256 _value) public returns (bool success) {\rrequire(balances[msg.sender] \u0026gt;= _value);\rbalances[msg.sender] -= _value;\rbalances[_to] += _value;\remit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\rreturn true;\r}\r// 转账 Token 的动作（一般由合约创建者执行）\rfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r// 获取 Token 来源方授权交易的总数\ruint256 allowance = allowed[_from][msg.sender];\rrequire(balances[_from] \u0026gt;= _value \u0026amp;\u0026amp; allowance \u0026gt;= _value);\rbalances[_to] += _value;\rbalances[_from] -= _value;\rif (allowance \u0026lt; MAX_UINT256) {\rallowed[_from][msg.sender] -= _value;\r}\remit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\rreturn true;\r}\rfunction balanceOf(address _owner) public view returns (uint256 balance) {\rreturn balances[_owner];\r}\rfunction approve(address _spender, uint256 _value) public returns (bool success) {\rallowed[msg.sender][_spender] = _value;\remit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\rreturn true;\r}\rfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\rreturn allowed[_owner][_spender];\r}\r}\r  4、编译代码\n点击左侧的 Solidity compiler 按钮，并选择代码指定版本的编译器，点击编译：\n看到小绿钩出现代表编译完成了：\n5、部署合约\n点击左侧的 Deploy 按钮，并检查你的 MetaMask 钱包当前是测试网络下的：\n环境选择 Injected Web3 来连接 MetaMask 钱包：\n连接完成后你就是合约创建者了：\n其他的油费之类的不用管，直接做合约的进阶配置，还记得我在前面源码中标了注释的参数吗？就是要填那些！\n展开：\n参数和其解释：\n   参数 解释 样例     _INITIALAMOUNT 发行总量（需要计算小数点位数）。 10000（100 个币，小数点后为 2 位）   _TOKENNAME 币的名称。 SENJIANLU COIN   _DECIMALUNITS 小数点位数。 2   _TOKENSYMBOL 币的简称。 SEN    填写完成，确定没问题后点击 transact 按钮：\nMetaMask 钱包会弹出并提示你部署这个合约需要的费用（没弹出的话请手动点击钱包）：\n确认之后，稍等片刻看见钱包内余额少了，说明部署成功了：\n Remix 的控制台内也会打印成功信息：\n 点击 MetaMask 中的 活动：\n点进刚刚的合约中，拉到下面点进最近的一条日志中：\n这里的 To 就是你创建的智能合约（发的币）的地址了，复制一下：\n把这个合约地址（可以理解为币的种类）导入钱包即可：\n成功：\n说一句，转账币的操作消耗的是发起者的 ETH，因此玩的话还请留点测试 ETH 在钱包中。\n结束。\n","id":8,"section":"posts","summary":"从零开始学习 Solidity 语言的时候突然回想起上大学对着键盘敲 C 的日子，老师明知道台下一半的学生出了校园甚至是这门课结束了就再也不会碰 C，却依然很负责任","tags":["区块链"],"title":"基于以太坊 ETH 的智能合约学习（二）使用官方的 Remix IDE 一键发币体验整体流程","uri":"https://senjianlu.com/2021/12/smart-contracts-note-02/","year":"2021"},{"content":"随着对延迟和防审查的要求越来越高，挪给代理这一块的预算也相应增多了，看了下 IPLC NAT 机器的价格感觉能接受了，于是决定开始升级个人用的代理节点了。\n这个系列单纯就用来记录我已经使用过一段时间的 IPLC 线路（机器）提供商，没有任何推荐或 AFF 内容，请确定好自己的需求并货比三家后再购买。\n 关于 IPLC\n 百科上的介绍：IPLC 是 \u0026ldquo;International Private Leased Circuit\u0026rdquo; 的缩写，即“国际私用出租线路”，是指用户专用的跨国的数据、话音等综合信息业务的通信线路。通俗地说，也就是指传统的专线，如 DDN、E1 等，用于互连两点之间的通信，只不过 IPLC 是跨国跨境的而已。\n 简单来讲就是点到点的不过墙线路，延迟、隐私保护都极为优秀。\n 本章商家：wikihost（维基主机）\n1、价格信息\n注意：维基家的流量转发计价方式为一次性设置费 + 流量按量付费 + 端口占用费，而带宽方面 IPLC 转发均为 80 Mbps。\n① 一次性设置费（高价版本每个月会赠送一点 IPLC 流量）：\n② IPLC 流量费用：\n③ 端口占用费：\n2、配置（流量转发）\n注意：需要自备落地（即提前准备好搭建了代理服务的境外服务器）\n购买后在产品和服务处选择流量转发服务，点击管理产品：\n选择添加 IPLC 转发：\n假设你有一个 SOCKS5 代理运行在 13.233.150.148 服务器的 2222 端口上，那么如下配置即可（除了 HTTP 代理其他全支持转发）：\n 协议处可选 TCP 和 UDP，如果都选择了则会分别产生一条转发规则，端口占用收费会翻倍。\n 创建需要一点时间：\n趁这个时间我们查看一下转发规则：\n使用方式则很简单，本来你是使用如下代理信息的：\nimport requests\rproxies = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5://username:password@13.233.150.148:2222\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5://username:password@13.233.150.148:2222\u0026quot;,\r}\rr = requests.get(\u0026quot;https://google.com\u0026quot;, proxies=proxies)\r 直接将 13.233.150.148:2222 替换为 211.xx.xxx.xx:49333（IPLC 转发规则内的地址）即可：\nimport requests\r# IPLC 转发\rproxies = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5://username:password@211.xx.xxx.xx:49333\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5://username:password@211.xx.xxx.xx:49333\u0026quot;,\r}\rr = requests.get(\u0026quot;https://google.com\u0026quot;, proxies=proxies)\r 你的请求会直接到 211.xx.xxx.xx 这台境内服务器，然后走隧道过墙直达 Google。\n3、使用体验\n① 价格方面\n设置费略贵，至少要花 150 才能使用 IPLC 线路，不过每个月赠送流量还是蛮好评的，虽然没多少，但是不看视频只查文档的话一个月 500 MB 是基本用不完的，这是我的购买日期：\n在 Clash 中配置了这条线路只接管 Google 和 GitHub 相关服务的流量，截至 12 月 28 日：\n总共 3 个月花 9 块钱。\n② 使用方面\n除了 HTTP 外的代理协议全支持，并且晚高峰也绝对稳定。\nPython3 100 次对 Google 的爬取：\nYouTube 1080p 分辨率下秒加载：\n准确的延迟测量等有了专业工具再补。\n本章结束。\n","id":9,"section":"posts","summary":"随着对延迟和防审查的要求越来越高，挪给代理这一块的预算也相应增多了，看了下 IPLC NAT 机器的价格感觉能接受了，于是决定开始升级个人用的代理节点了。 这","tags":["其他"],"title":"IPLC 食用（一）wikihost（维基主机）家 IPLC 线路流量转发的使用体验","uri":"https://senjianlu.com/2021/12/vps-iplc-01/","year":"2021"},{"content":"上一章讲了硬件选配和组装，这章讲适合小白的专业挖矿系统 Mining OS（Minerstat OS）的安装、矿软件的设置和启动，当然也包括路由器上（OpenWrt 系统）设置使用代理（Clash 插件）来访问矿池。\n  Mining OS（Minerstat OS）是由一站式挖矿服务商 Minerstat 推出的专业挖矿系统，它有免费和收费两种版本，具体的差别可以看这里：Find the right plan for your mining operation\n至于为什么要选择第三方系统，而非使用 CentOS 等当前 Linux 的稳定发行版进行挖矿，是因为 Linux 下 AMD 显卡驱动、OpenCL 和 ORCm 等 GPU 计算平台的安装调试实在过于麻烦，后续接触深度学习的时候可能会补上 CentOS7 下手动调试挖矿软件的教程。\n 1、下载 msos-flasher 并写入 U 盘\nMining OS 通过 U 盘的安装流程的：矿机插 U 盘启动 msos-flasher 系统，然后通过这个系统将 U 盘里真正的 Mining OS 系统文件解压并安装到矿机硬盘里。\n下载地址：SSD Flasher（其实就是 msos-flasher） 等待下载完成后解压出 .img 文件，使用 Etcher 将 msos-flasher 写入 U 盘（16 GB 及以上）：\n稍等片刻即可，这个时候可以先进入下一章去下载真正的 Mining OS 系统。\n2、下载 Mining OS（Minerstat OS）\n官方下载页面：Mining OS\n注意：如果你使用的是 AMD Vega 或 RX 6000 系列的显卡需要和我一样下载新版本：\nN 卡和其他 A 卡就下载普通版即可：\n下载完成后直接将压缩包拷贝到 msos-flasher 系统写入完成的 U 盘的根目录下： 拷贝的过程中我们可以再提前进入下一章！\n3、注册 Minerstat 账号并新建 Worker（矿工）\n需要注意的是，如果你想使用 Mining OS 系统的话，你需要为每台矿机每个系统都绑定 Worker（即矿工），Minerstat 有自己的网页控制面板，之后 Worker 会出现在控制台中，这意味着你可以很方便地远程监视或是设置你的矿机。\n没有账号的话先注册：\n登录之后选择 Workers：\n根据自己矿机的硬件型号进行配置：\n之后点击 Add worker 并下载配置文件，文件内容就是你账号的登录密钥和矿工名字，在之后矿机系统内的配置时会用到：\n4、矿机通过 U 盘启动 msos-flasher 系统并将 Mining OS 安装到硬盘\n拔 U 盘插到矿机上，矿机开机后进入 BIOS，通过 U 盘 UEFI 引导启动，安装过程中无需做任何操作，出现以下界面说明开始将 msOS 写入硬盘了：\n关于 BIOS 具体设置可以参考知乎文章：怎么设置bios从u盘启动 bios设置u盘启动方法\n稍等片刻后写入完成：\n之后输入 poweroff 关机、拔掉 U 盘并重新启动矿机即可。\n5、设置矿机网络并绑定 Worker\n重启完成后会自动连接网络（前提是你的路由器开启了 DHCP 功能），之后会给出用来内网访问矿机的 VNC 地址： 打开那个地址后，绑定刚刚 config.js 中的矿工信息即可：\nmworker $accesskey $workername\r 绑定后矿机会重启，之后就能在网页控制面板看到这个 Worker 了：\n6、设置钱包地址\n点击更新钱包：\n将 MetaMask ETH 钱包的地址拷贝过去： 之后保存即可：\n提币的话，最终是由你选定的矿池提给你的而非 Minerstat，所以如果你不准备用默认矿池的话，这里对钱包地址的更改一点用都没有。\n 当然你也可以配置完钱包地址后稍等片刻直到默认矿池刷新出你的算力收益，以确认你矿机的运转是正常的：\n 7、更改矿池\n我比较想用 ethermine.org 的池子，更改一下。\n打开 ethermine.org 官网并连接到 MetaMask 钱包：\n连接成功后打开控制台：\n复制上方的地址（理论上就是你 MetaMask 的钱包地址）并点击开始挖矿： 获取矿池连接信息：\n拼接出完整的矿池连接命令：\n-worker Worker-01-AMD⁣⁣ -pool asia1.ethermine.org:4444⁣ -pool asia2.ethermine.org:4444 -wal 0xD29exxxxxxxxxxxxxxxxxxxxxxxxxxxx60.Worker-01-AMD⁣⁣ -eres 0 -log 0 -gbase 0⁣​\r  Minerstat 官方示例：\n-worker (WORKER)⁣⁣ -pool (POOL:ETH)⁣ -wal (WALLET:ETH)⁣.(WORKER) -pass x -eres 0 -log 0 -gbase 0 -proto (AUTO)\r  填入 Worker config 中的 PHOENIX-ETH 项即可：\n大概 5 分钟后收益就会出现了：\n由于算力取得是 60 分钟内的平均值，因此大概需要跑 2 小时才能显示准确的算力。\n8、Clash 配置使用代理访问矿池地址\n连不上矿池的话领不到计算任务，算力就有可能显示为 0 了。\nClash 的配置话较为简单，在原本 Clash 的 rules 标签中添加以下两行即可（我使用的是 ethermine.org 的矿池）：\nrules:\r...\r...\r# Minerstat 可添可不添\r- DOMAIN-SUFFIX,minerstat.com,矿池\r# 视你自己的情况配置域名匹配\r- DOMAIN-SUFFIX,ethermine.org,矿池\r...\r...\r 然后查看连接确认一下没问题：\n本章结束。\n","id":10,"section":"posts","summary":"上一章讲了硬件选配和组装，这章讲适合小白的专业挖矿系统 Mining OS（Minerstat OS）的安装、矿软件的设置和启动，当然也包括路由器上（Ope","tags":["区块链"],"title":"以太坊矿机搭建（二）安装 Mining OS（Minerstat OS）专业挖矿系统一键挖矿","uri":"https://senjianlu.com/2021/12/eth-miner-note-02/","year":"2021"},{"content":"趁着币价开始下跌，挖矿热潮暂退的间隙，开始组自己的第一台矿机了。并没有赚钱的打算，只是为了接触区块链最基础的一环来为自己的智能合约学习做铺垫。\n本章主要记录一下自己挑选硬件的过程，希望对你也能有所帮助。\n 以硬件作小节，最后一章大致描述下硬件组装需要注意的点。\n1、主板\n首先你得确定自己的主板型号，这样才能去寻找对应的 CPU。而如何挑选主板呢？最简单的，去明确自己的目标：想要一台几显卡的矿机。\n由于像 ETH 这样的显卡挖矿并不需要很大的 PCI-E 带宽，1X 就能满足要求了，因此如果你想要一台 8 卡的挖矿主机，那么你所挑选的主板上至少要有 8 条 PCI-E 1X 速率的插槽，一下子范围就缩小了。\n 注：一般来说 M.2 固态硬盘的插槽也可以转为 PCI-E 插槽，但是像 Z270-P 这样的主板存在 M.2 插槽和自带的 PCI-E 插槽共享通道的问题，所以购买之前最好像卖家了解清楚或是直接就不将 M.2 插槽数算入。\n Reddit 上有一篇较为详细的推荐帖子：Suggested Motherboards\n我入的是 ASUS Z270-AR，肉眼可见的 7 条 PCI-E 插槽加 2 条 M.2 插槽，价格为 ￥476，其他的在某宝上要么缺货要么涨的有点多\u0026hellip;\u0026hellip;\n2、CPU\n因为根本不吃 CPU 所以没啥好挑的，买了个帖子 Processor/CPU 里推荐的 G3930，淘宝店家也正好有，省运费。\n注：Intel 平台的板 U 请自行注意针脚数是否能匹配，不清楚请找卖家咨询好。\n3、内存\n矿机平台用 Windows 系统就上 8 GB，否则 4 GB 就够用了。\n4、硬盘\n矿机平台是 Linux 系统的话 U 盘都行，也是随便买。\n5、显卡\n先看你挖的币最少需要多少 GB 的显存支持，例如 ETH 需要至少 8 GB，其他就看个人预算了。\n算力收益计算器：GPU 挖矿\n我推荐的 6800XT、3060Ti 和 3070Ti，如果你的预算不够当然也能去收二手卡，但是币价稳定或是小跌的情况下迟早都是会回本的，省事、有保修的新卡对我来说诱惑力更大一点。\n6、电源\n总功率计算的话，上面的显卡算力收益计算器中将功率 * 1.1 再加个 50 W 的平台功率大概就行了。\n金牌以下认证的电源就没必要入了，将你矿机平台的总功率 * 1.1 得到标称功率再去选购比较稳妥。\n牌子的话预算少就长城，预算够就海韵、海盗船和酷冷至尊，我入的是振华。\n7、机架\n某宝闭眼挑，如果你的总功率需要双电源的话，记得选大机架预留另一个电源的位置。\n8、其他\n如果你的主板不是直插型的专业矿板，那么你还需要购买 PCI-E 延长线；机架的散热也需要购置风扇；如果你想准确测量矿机耗电的话，还需要购买功率显示插座。\n9、组装\n物理搭建几乎没什么需要注意的，前提是你买的是质量较好的机架。 唯一需要注意的是你主板安装时孔位的对齐，以我的板子 Z270-AR 为例：\n因为主板 2 孔和 3 孔位置是确定的，所以需要将较长的空隙留给主板上侧。\n 附上我的最终配置单（价格截至 2021 年 12 月 20 日）：    硬件 型号 品牌 价格 数量     CPU G3930 Intel ￥315 1   主板 PRIME Z270 AR ASUS ￥476 1   内存 普条 DDR4（8 GB） 金士顿 ￥165 1   硬盘 铁甲悍将（120 GB） 影驰 ￥110 1   显卡 6800XT 樱瞳（16 GB） 盈通 ￥7999 2   电源 1000W 金牌全模 振华 ￥929 1   机架 8 卡开放式（带 8 个 PCI-E 转换板和 7 个风扇） 维达 ￥930 1   总计   ￥18923     在当前币价下，一天收益大概在 45 元左右，也就是说需要大概 400 多天才能回本。\n 本章结束。\n","id":11,"section":"posts","summary":"趁着币价开始下跌，挖矿热潮暂退的间隙，开始组自己的第一台矿机了。并没有赚钱的打算，只是为了接触区块链最基础的一环来为自己的智能合约学习做铺垫","tags":["区块链"],"title":"以太坊矿机搭建（一）矿机平台的硬件挑选和组装","uri":"https://senjianlu.com/2021/12/eth-miner-note-01/","year":"2021"},{"content":"虽然一直都知道存在无法在境内正常加载文章中图片的问题，但是嫌麻烦一直就拖着。最近接触到了 Cloudflare Workers，实践反代的时候发现异常简单，顺便就把图床也反代同时设定为自定义域名了，记录一下。\n  实现流程：\n用户 -(域名)-\u0026gt; Cloudflare DNS -(解析)-\u0026gt; Cloudflare Workers 分配的域名 -(路由激活指定的 CF Workers)-\u0026gt; CF Workers 内部代码运行：访问 GitHub 源文件并返回\n 1、Cloudflare 开启 Workers\n 注：第一次开启 Cloudflare Workers 需要邮箱验证，步骤参照以下。\n设置子域：\n选择免费计划即可：\n接着确认下电子邮件即可：\n 选择创建服务：\n输入服务名称，我这里是反代图床，就填 img 了，之后选择 HTTP 处理程序而非主要用以网页生成的简介，之后创建服务：\n看到以下页面说明创建成功：\n2、编写反代用的 Worker 代码\nCloudflare Worker 中的代码用 JS 写就行，同时还有很多现成的好用的方法，具体的学习请参照官方文档：Cloudflare Workers documentation\n我这里要实现反代功能，那么就只需要将来源链接中的域名修改成 raw.githubusercontent.com，接着访问一下 GitHub 文件的内容并返回即可，直接上具体实现的代码：\naddEventListener(\u0026quot;fetch\u0026quot;, event =\u0026gt; {\revent.respondWith(handleRequest(event.request))\r})\rasync function handleRequest(request) {\r// Cloudflare Workers 分配的域名\rcf_worker_host = \u0026quot;img.cscheap.workers.dev\u0026quot;;\r// 自定义的域名\rorigin_host = \u0026quot;img.cscheap.com\u0026quot;;\r// GitHub 仓库文件地址\rgithub_host = \u0026quot;raw.githubusercontent.com/senjianlu/imgs/master\u0026quot;;\r// 替换 2 次以同时兼容 Worker 来源和域名来源\rurl = request.url.replace(cf_worker_host, github_host).replace(origin_host, github_host);\rreturn fetch(url);\r}\r 注意上面我除了 Cloudflare Workers 分配的域名我还添加了自定义域名，这在下一小结里会谈到，你可以自行决定是否加上。\n找一张有的图片测试一下代码是否生效：\n确定没问题之后点击保存并部署即可。\n3、设定触发器和自定义域名\n部署完成后，你已经可以通过 Cloudflare Workers 分配给你的域名访问你 GitHub 仓库里的图片了，而且默认就是套了 CF 的 CDN 的，在境内也能访问顶多就是速度会慢一点，如图：\n但是我还是想把域名改为我自己博客的子域，于是在触发器里添加路由：\n输入自己的子域名即可：\n别忘了去 DNS 处添加 CNAME 解析（我这里用的是 DNSPod，不使用 Cloudflare 的 DNS 不开启小云朵也是可以使用 CF 的 CDN 的，因为走了一遍 Cloudflare Workers，但是无法享受到 CF 提供的免费 SSL 证书）：\n通过自己的子域名测试访问成功（没有 HTTPS 就是因为没使用 Cloudflare 的 DNS）：\n4、VSCode 中多文件内容使用全部替换（以我博客实际域名 senjianlu.com 为例）\n把之前文章中的图片链接全都替换一下：\n将 ](https://raw.githubusercontent.com/senjianlu/imgs/master 替换为 ](https://img.senjianlu.com 即可：\n5、PicGo 中设置 GitHub 图床自定义域名（以我博客实际域名 senjianlu.com 为例）\n这样每次上传 Ctrl + Shift + P 上传成功后，剪贴版里就是 img.senjianlu.com/xxxxxx.png 形式的图片链接了。\n结束。\n","id":12,"section":"posts","summary":"虽然一直都知道存在无法在境内正常加载文章中图片的问题，但是嫌麻烦一直就拖着。最近接触到了 Cloudflare Workers，实践反代的时候发现异常简单，顺便就","tags":["网站建设"],"title":"Cloudflare Workers 反代使用 GitHub 仓库搭建的图床","uri":"https://senjianlu.com/2021/12/cloudflare-workers-image/","year":"2021"},{"content":"公司用的日本专线，狡猾的日本人为了防止上班摸鱼把博客园都屏蔽了，使用中文搜索问题检索结果永远只有 CSDN 和内容农场\u0026hellip;\u0026hellip;\n恰巧看到这个贴子：使用 Docker 安装 Firefox 浏览器让小鸡发光发热，看了下最终的效果是能在浏览器标签内构建一个 Firefox 浏览器，无视本机的任何防火墙限制，立马决定试下。\n  最终的效果如下，你可以先确定是否符合你的需求再往下看，说一句视频是肯定看不了的，页面的刷新能看到较为明显的渲染过程：\n且请使用 2 核以上的服务器，1H2G 服务器在页面刷新时占用如下：\n  1、安装 Docker 和下载 Firefox 容器镜像\n一笔带过 CentOS7 下 Docker 的安装和启动：\nyum -y install docker\rservice docker start\r 下载镜像，Docker Hub 地址：jlesage/firefox\ndocker pull jlesage/firefox\r 2、启动容器\n基础启动命令：\ndocker run -d \\\r--name=firefox \\\r-e TZ=Asia/Hong_Kong \\\r-e DISPLAY_WIDTH=1920 \\\r-e DISPLAY_HEIGHT=1080 \\\r-e KEEP_APP_RUNNING=1 \\\r-e ENABLE_CJK_FONT=1 \\\r-e VNC_PASSWORD=my_password \\\r-p 80:5800 \\\r--security-opt seccomp=unconfined --shm-size 4000m \\\rjlesage/firefox\r  参数解析：\n   参数 解释 样例     TZ 时区。 Asia/Hong_Kong   DISPLAY_WIDTH 浏览器分辨率长。 1920   DISPLAY_HEIGHT 浏览器分辨率高。 1080   KEEP_APP_RUNNING 是否保持运行。不保持的话选 0，即所有标签关闭后容器停止。 1   ENABLE_CJK_FONT 字体选项？反正不开启中文会乱码。 1   VNC_PASSWORD 访问密码。 my_password    端口映射不说了，容器内的 5800 端口映射到宿主机的 80 端口，这样就能直接用宿主机的 IP 访问服务了；--security-opt seccomp=unconfined 允许容器执行全部的系统的调用，即给予容器最大权限；--shm-size 4000m 限制容器内存占用。\n 开放端口和安全组之后，直接使用服务器 IP 访问即可：\n由于我使用的是 Linode 的赠金开的服务器，而且是上班开机下班删机的那种，因此暂时没有再做进一步的安全配置。\n结束。\n","id":13,"section":"posts","summary":"公司用的日本专线，狡猾的日本人为了防止上班摸鱼把博客园都屏蔽了，使用中文搜索问题检索结果永远只有 CSDN 和内容农场\u0026hellip;\u0026hellip;","tags":["Docker"],"title":"CentOS7 下用 Docker 部署 Firefox 以实现浏览器套浏览器访问被屏蔽的网站","uri":"https://senjianlu.com/2021/12/centos7-docker-firefox-in-browser/","year":"2021"},{"content":"翻出了刚开始交易时候的收益图，不到 1600 USDT 均价的 ETH 忍痛割肉，现在涨到了 4000 U 左右，抱着困惑去重新了解了一遍 Ethereum 的愿景是什么、怎么运作和如何基于它开发自己的智能合约，突然觉得这才互联网该有的样子：数以千计的以太坊客户端构建出稳定的运行环境，降低开发者的入行门槛；严格计算工作量来逼迫开发者精简功能和优化算法；去中心化以尽可能减少监管带来的影响\u0026hellip;\u0026hellip;\n听起来真的是很美好，但是实践总是检验真理的唯一标准，何况 ETH 还推出了测试链供开发和调试，尝试自己写一下合约也是为未来做准备吧。\n 本章只记录如何安装和使用 Chrome 插件版的 MetaMask 小狐狸钱包，它就是一个虚拟币的钱包，即使你不做智能合约的开发，单纯的进行币币交易那么也可以使用它。\n1、下载和安装 MetaMask\nChrome 插件市场：Chrome 网上应用店\nMetaMask 插件地址：MetaMask\n直接点击添加至 Chrome 即可：\n确认一下：\n稍等片刻就添加好了：\n 顺带一提，官方只提供了三种安装方式，Chrome 插件、IOS 客户端和安卓客户端：\n而点击了 Install MetaMask for Chrome 按钮后是直接跳转到 Chrome 插件市场的，也就是说官方并未提供过所谓的插件压缩包供手动安装使用。如果你无法科学访问 Google 服务但是想使用 MetaMask，请去解决科学的问题而不是使用别人提供的插件压缩包。\n 2、开始使用 MetaMask\n点击一下小狐狸：\n第一次使用需要创建或是绑定钱包地址，你会看到如下页面：\n开始使用后选择创建钱包账户和助记词：\n选择同意：\n初始化密码：\n视频教程直接跳过即可：\n记录下助记词：\n 注意：助记词相当重要，请抄下后物理存储，并且不要告诉任何人，它是找回你 MetaMask 钱包账户的唯一关键。\n 之后会有一次助记词的确认，我这里忘记截图了，确认后就能看到：\n全部完成：\n之后你再点击小狐狸插件，就可以直接看到钱包内容了：\n3、从交易所将 ETH 提至钱包\n有币了再写。\n4、添加币安智能链并将 BNB 提至钱包\n在没有配置其他链（网络）之前，你只能在 MetaMask 钱包上进行以太坊主网络上币的转账等操作，而无法提取币安链上的 BNB 或波场链上的 USDT (TRC20) 到钱包。\n这里以添加币安的链为例子，你在玩链游的时候可能会用到。\n关于币安链和以太坊链的不同：币安智能链与以太坊有何不同？ 官方文档：在币安智能链中关联MetaMask钱包\n① 添加网络：\n② 填入币安链的网络信息：\n 官方文档中有记载：\n 保存后看见 Smart Chain 网络就说明成功了：\n③ 提取 BUSD 和 BNB 到钱包\n选择 BUSD 提现：\n将 MetaMask 钱包上的地址复制到提币地址处：\n选择 BSC 网络：\n校验：\n 校验也可以跳过，你可以通过确认 MetaMask 以太坊网络钱包地址和币安的相同来校验，虽然无法跨链转币，但是你可以通过相同的地址来找回币，具体参考币安官方文档对币安智能链的解释。\n 输入数量后点击提现并通过验证码确认：\n大概 2 分钟后币就到 MetaMask 钱包了：\n 如果你的钱包里之前没有 BUSD 的话，可能需要添加下 Token：\n输入 BUSD 的合约地址：0xe9e7cea3dedca5984780bafc599bd69add087d56 并添加：\n确认即可：\n BNB 同理：\n注：如果确认 BUSD 转账成功了，可以直接把地址保存到地址簿中，下次直接使用即可。\n结束。\n","id":14,"section":"posts","summary":"翻出了刚开始交易时候的收益图，不到 1600 USDT 均价的 ETH 忍痛割肉，现在涨到了 4000 U 左右，抱着困惑去重新了解了一遍 Ethereum 的愿景是什么、怎么运作和如何基于它开发","tags":["区块链"],"title":"基于以太坊 ETH 的智能合约学习（一）下载和使用小狐狸钱包 MetaMask（Chrome 插件版）并添加 BSC 主网络进行 BNB 转账","uri":"https://senjianlu.com/2021/12/smart-contracts-note-01/","year":"2021"},{"content":"本来是准备买 Navicat 的，但是不巧错过了永久版 7 折的优惠\u0026hellip;\u0026hellip;意外发现 MongoDB 官方居然也有可视化工具：MongoDB Compass，社区版是免费的，尝试一下并留个笔记。\n 1、下载和安装 MongoDB Compass\n下载地址：Download MongoDB Compass\n选择全功能版本、然后选择自己的操作系统：\n下载完后是个可执行的 .exe 文件，转移到你需要的路径后直接打开，会在桌面创建快捷方式：\n看情况勾选隐私选项：\n 各选择内容：\n✅ 启用产品反馈工具\n启用一个工具，用于直接从 Compass 发送反馈或与我们的产品和开发团队交谈。\n🔲 启用地理可视化\n允许 Compass 向第 3 方地图服务发出请求。\n✅ 启用崩溃报告\n允许 Compass 发送包含堆栈跟踪和未处理异常的崩溃报告。\n🔲 启用使用统计\n允许 Compass 发送匿名使用统计信息。\n✅启用自动更新\n允许 Compass 定期检查新的更新。\n 2、连接远程数据库\n官方给了一键连接形式： 但是由于我在服务器端设定了只允许来自 localhost 的连接，因此需要建立 SSH 隧道连接到服务器、再连接服务器本地的 MongoDB 数据库，如果你和我的配置一样，那么可以参照我以下的连接方式。\n先选择 Fill in connection fields individually：\n数据库连接信息按照自己的填，我开启了强制认证，因此需要填写用户和密码：\n比较重要的是连接服务器这里，也是按自己的配置填写，我用的私钥登录：\n点击 Connect 连接后就能看见你的数据库信息了：\n 如果出现以下错误信息：\nAn error occurred while loading navigation: command hostInfo requires authentication\r 那么说明你已经开启了数据库的强制认证，登录的话需要填写正确的账号密码，实在忘记的话就尝试去找回吧。\n 3、基础操作\n操作很简单，应该稍微介绍一下就行了。\n① 左上角 Local 退回到数据库选择页面，右侧的 Database 面板可以选择新建数据库或是进入数据库：\n② 进入数据库后可以选择新建集合或是进入集合：\n 部分情况下你可能会发现数据库内的集合对不上，那么请刷新一下，这也是我使用时常出现的 BUG：\n ③ 进入集合就可以对文档做增删改查了：\n④ Performance 面板可以查看数据库的运行状态，包括内存占用等信息，用来监视 MongoDB 这种吃内存的怪物还是蛮方便的：\nMongoDB 暂时只是用来存下历史价格数据，等后期真正使用数据时再做探索。\n本章结束。\n","id":15,"section":"posts","summary":"本来是准备买 Navicat 的，但是不巧错过了永久版 7 折的优惠\u0026hellip;\u0026hellip;意外发现 MongoDB 官方居然也有可视化工具：MongoDB Compas","tags":["MongoDB"],"title":"MongoDB 学习笔记（三） MongoDB 数据库远程连接 GUI 工具 MongoDB Compass 的使用","uri":"https://senjianlu.com/2021/12/mongodb-note-03/","year":"2021"},{"content":"才发现 Windows11 添加了时钟应用，自带专注时段（可以直接理解为番茄时间）的规划功能，对于一直以来只有较大任务计划而导致在碎片时间内无法集中注意力的我来说简直是神器，趁着周末体验一下。\n 把一些基础设置的步骤一并放上，使用的体验感受会放在结尾。\n1、启用时钟\n开始菜单搜索 “时钟” 或者 \u0026quot;Clock\u0026quot; 应该都可以：\n2、规划专注时段\n首页显示的番茄工作法的总时常，默认规划为：每工作 30 分钟左右休息 5 分钟\n通过点击 视图设置 来自定义：\n修改休息周期即可：\n3、链接 Spotify\n 微软商店安装 Spotify 需要先将地区切换至美国：\n 点击 链接 Spotify 并登录、同意即可：\n链接完成后默认会推送一些轻音乐，右键播放后仍可以在 Spotify 应用内控制：\n4、启用待办事项（Windows To Do）\nWindows To Do 实际为另一个应用，因此需要先登录以同步数据：\n可能会存在卡加载的问题，没关系看到任务栏出来了就 OK 了：\n你可以直接在任务栏添加任务：\n也可以在 Windows To Do 添加，两边会同步的：\n5、使用感受\n可能是有新鲜感加持的原因，体验很棒！Windows11 的时钟很适合小任务的划分，以手头我正在开发的项目为例：Notion 以整个项目为大任务，其中各子模块为中任务，子模块中的每一个功能开发或是优化为小任务：\n通过番茄工作法，即使是 90 分钟的时间也能有规划的去推进进度，这对于自制力并不是那么强的我真的是很有帮助。\n题外话，从 WSL 到 WSL2 的优化、对安卓虚拟机的原生支持，再到我发掘到这个时钟应用，我开始发现微软作为开发者，其实是最懂开发者需要什么的，只是取决于他们是否愿意去做那些功能罢了，感觉 MacBook 的购买计划又可以往后延延了\u0026hellip;\u0026hellip;\n结束。\n","id":16,"section":"posts","summary":"才发现 Windows11 添加了时钟应用，自带专注时段（可以直接理解为番茄时间）的规划功能，对于一直以来只有较大任务计划而导致在碎片时间内无法集中注意力的我来","tags":["其他"],"title":"Windows11 时钟 Clock 的使用体验","uri":"https://senjianlu.com/2021/12/windows11-clock/","year":"2021"},{"content":"这个黑五本来是准备上斯巴达和 HostHatch 的车的，但是把前两年黑五的账单付了下后，发现吃灰的小鸡实在太多了，除了腾讯云香港的几台主机建了站在稳定服役，其他 20 来台基本都只装了个 SOCKS5 代理服务端，实在浪费\u0026hellip;\u0026hellip;\n正巧看到这个帖子：Gullo 128M 套 CF 做网站很爽，还有更便宜的 NAT VPS 吗，6 台不同地域的 NAT 主机总价为 12 美刀每年，折合每台才 2 刀，虽然每台主机只提供 20 个 IPv4 端口，且 IP 大概率是被墙的，但是便宜呀，果断入手玩下，顺便记录下 Gullo 控制面板一些折腾的地方。\n 1、开机并获取 SSH 登录信息\nGullo 每台 NAT 主机的主键是其内网地址，网段为 10.10.10.1 到 10.10.255.255，SSH 登录信息都可以通过这个内网地址来获得，不过比较绕，我将买完机器后的各阶段操作都记录在下面，请自行参考。\n① 等待开机\nGullo 家的机器有很大一部分是老板手动开的（离谱），黑五我这一单 NAT IPv4 128MB Bundle 等了将近 30 小时才审核完开机，开机成功你的注册邮箱会收到这样的邮件：\n收到登录信息的话你就可以直接跳到后面玩法部分了，但是如果你没收到或是漏收到了，那么跟着我往下一步步调查 SSH 登录信息吧。\n② 登录至 VPS 控制面板\n地址：https://solusvm.gullo.me/\n用户名我是在发来的少数 SSH 登录信息中找到的（如果你一个 NAT 机器的登录信息都没收到的话，发工单吧），密码则需要自己找回一下以重新设置：\n回邮箱拿到新密码登录即可：\n③ 获取 NAT 机器的外网 IPv4 地址（针对没收到 SSH 登录信息的 NAT 机器）\nGullo 提供的工具：NAT IPv4 Port Calculator\n在控制面板选定机器，并使用上面的工具通过内网地址查询外网 IPv4 地址、可使用的 20 个端口和 SSH 连接端口：\n④ 重设 NAT 机器的密码（针对没收到 SSH 登录信息的 NAT 机器）\n使用 Serial Console 临时连一下机器，选 1 小时时长即可：\n获取临时的 SSH 登录信息：\n 这里如果一直连不上，重装下 NAT 机器的系统试一下，还不行的话就发工单吧，我有一台德国的机器就永远密码错误\u0026hellip;\u0026hellip;便宜机器问题确实多，但也正常。\n 登录之后，安装一下 passwd 并重设密码：\nyum -y install passwd\r# 重设 root 用户密码\rpasswd root\r 之后在其他机器上连接即可，以 Linux 为例：\nssh -p $port root@$host\r 2、挂个探针\nNAT 机不配接入 Zabbix，这里用的是哪吒探针，搭建教程可以参考：CentOS7 下哪吒监控面板的搭建的监控端的安装\n在面板后台新建机器，拷贝一键安装命令后直接取 NAT 主机上执行即可：\n3、搭个 SOCKS5 代理服务端\n一键脚本：CentOS7 下一键安装 GOST 并启动 HTTP 和 SOCKS5 代理服务\n注意这里的端口得是你 20 个可用端口中的一个：\ncurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20下一键安装%20GOST%20并启动%20HTTP%20和%20SOCKS5%20代理服务/install.sh | bash -s $proxy_port $proxy_username $proxy_password\r 换台服务器测试一下代理是否生效：\ncurl -x socks5://$username:$password@$host:$port http://ip-api.com/json/?lang=zh-CN\r 虽然共用的这个 IPv4 地址已经脏的不能再脏了，但就爬虫用用也还行。\n4、套 Cloudflare 建个站\nGullo 给每台 NAT 主机都提供了一个全端口的 IPv6 地址，建站就很方便了，直接在 DNS 中解析 AAAA 记录即可。但是考虑到部分用户是没有 IPv6 地址的，真要建站还需要套个 Cloudflare 的 CDN 做下中转。\n这里就拿 Nginx 的默认页面举例，由于在 1.3 之后某个版本，Nginx 已经默认启用对 IPv6 地址访问的监听，因此无需做多余配置直接在 NAT 机器上安装：\nyum -y install epel-release\r# 安装 Nginx\ryum -y install nginx\r# 启动 Nginx\rservice nginx start\r 获取你 NAT 机器的 IPv6 地址：\n在 Cloudflare 的 DNS 处解析，类型选 AAAA，SSL/TLS 选 灵活 让 CF 提供 SSL 证书：\n稍等片刻后访问页面测试一下：\n再用只有 IPv4 地址的主机访问一下：\nIPv4 都支持了，那么 IPv6 更不用说了，通过 ipv6-test 测试一下：\n Gullo 部分机房存在阻断 Cloudflare 流量来源的问题（我实践后发现起码纽约机房是阻断的），这会导致你不套 CF 使用 IPv6 可以访问网站，但是套了后出现 522 的错误，具体的讨论可以看这个：Gullos hosting in NY blocking cloudflare ?\n你也可以在服务器上通过以下命令来查看 Cloudflare 的流量是否顺利的回源了：\ncat /var/log/nginx/access.log\r 上面的 IPv6 地址属于 Cloudflare，那么就说明回源成功了。\n 结束。\n","id":17,"section":"posts","summary":"这个黑五本来是准备上斯巴达和 HostHatch 的车的，但是把前两年黑五的账单付了下后，发现吃灰的小鸡实在太多了，除了腾讯云香港的几台主机建了站在稳定服役，其","tags":["linux"],"title":"Gullo 2 美刀年付 NAT 主机的基础操作和玩法","uri":"https://senjianlu.com/2021/12/gullo-nat-vps/","year":"2021"},{"content":"本博客有且只有在该文章末尾添加了测试用的广告。\n 1、注册 Google AdSense\n官方链接：Google AdSense\n填入链接和邮箱：\n接着使用 Google 账号登录以完成绑定：\n2、确认网站所有权和审核\n在首页，获取用以认证用的代码：\n注：如果你的 Google 账号没有收款信息，需要先在收款人信息页面做填写，才能看到如下页面。 这里提示需要放置在 \u0026lt;head\u0026gt; 和 \u0026lt;/head\u0026gt; 标记之间，那么还是直接去修改主题内的文件，我的路径为：\\themes\\pure\\layouts\\partials\\head.html\n重新 build 页面并发布后，在页面上确定已经添加代码并开始审核：\n审核结束后如果看到以下页面说明审核通过了：　3、纠正 ads.txt 文件\n你可能会出现这样的错误：\n修正方法官方也给出了：\n普通的项目直接在网站根目录下添加 ads.txt 文件就行了，但是通过 Hugo 渲染的模板项目 ads.txt 则需要放在静态文件目录下：/static\n渲染一下，public 的目录下有 ads.txt 就说明成功了：\n4、选择合适的广告类型\n官方给了 3 种广告单元可供选择：\n我是给博文添加的，理论上信息流和文章内嵌类型的点击率更高：前者和文章或网页内容会有所关联，后者多数情况会以大图形式融入文章中。但是我个人是极度厌恶技术博客内插入广告的，这里只拿普通的展示广告做例子：\n接着就能拿到代码段了：\n如果你是给自己网站的前端页面添加广告的话，直接复制到 HTML 页面中的指定位置做调整就行了。\n5、为 Hugo 静态博客新建 Shortcodes 广告模板以方便 Markdown 的书写和渲染\nHugo Shortcodes 官方介绍：Shortcodes\n引入 YouTube 视频的官方案例：single-positional-example-youtube\n如果你只想实现广告或其他差不多的简单功能，直接和我继续操作下去也可以。\n明确一下，Hugo 模板的查找顺序是：\n /layouts/shortcodes/.html /themes//layouts/shortcodes/.html  即优先使用主目录下的模板。\n知道了模板存放路径，那么命名呢？命名也很简单，模板的 .html 文件名字可以自定义，在 Markdown 中书写的时候使用相同的名字就行了，例如我创建了 google-adsense.html 这个模板：\n那么我在文章的 .md 文件中这样调用，后期 Hugo 就会自动渲染了：\n{{\u0026lt; google-adsense \u0026gt;}}\r 把刚刚的 Google AdSense 的广告代码复制过来，并将部分值设定为用参数传入， google-adsense.html 的内容就变成了这个样子：\n\u0026lt;script async src=\u0026quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-{{ index .Params 0 }}\u0026quot;\rcrossorigin=\u0026quot;anonymous\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;!-- 测试广告 --\u0026gt;\r\u0026lt;ins class=\u0026quot;adsbygoogle\u0026quot;\rstyle=\u0026quot;display:block\u0026quot;\rdata-ad-client=\u0026quot;ca-pub-{{ index .Params 0 }}\u0026quot;\rdata-ad-slot=\u0026quot;{{ index .Params 1 }}\u0026quot;\rdata-ad-format=\u0026quot;auto\u0026quot;\rdata-full-width-responsive=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/ins\u0026gt;\r\u0026lt;script\u0026gt;\r(adsbygoogle = window.adsbygoogle || []).push({});\r\u0026lt;/script\u0026gt;\r 调用：\n{{\u0026lt; google-adsense 7999470995937770 3998950649 \u0026gt;}}\r 广告测试样例：\n \r\r\r(adsbygoogle = window.adsbygoogle || []).push({});\r   注意：广告生效需要时间，从 1 小时到 24 小时不等，期间你打开页面可能会发现广告处空白并在控制台报错：\nFailed to load resource: the server responded with a status of 400 ()\r 参考讨论：Google adsense responding the server responded with a status of 400 ()，一般情况下耐心等待即可。\n 结束。\n","id":18,"section":"posts","summary":"本博客有且只有在该文章末尾添加了测试用的广告。 1、注册 Google AdSense 官方链接：Google AdSense 填入链接和邮箱： 接着使用 Google 账号登录以完成绑定： 2、确认网站","tags":["网站建设"],"title":"申请 Google AdSense 并为 Hugo 静态博客配置 Shortcodes 广告模板页面方便 Markdown 的书写和渲染","uri":"https://senjianlu.com/2021/12/hugo-google-adsense/","year":"2021"},{"content":"第一次接触 MongoDB 这种非关系型数据库的表结构设计。\n MongoDB 的层级名词翻译过来会有点难理解，所以我将它和 PostgreSQL 数据库的对应起来：\n   PostgreSQL MongoDB     Database（数据库） Database（数据库）   Table（表） Collection（集合）   Tuple/Row（行） Document（文档）   Column（列） Field（字段）     参考文章：MongoDB 的文档、集合、数据库\n一、Database 数据库 多个文档构成集合，多个集合组成数据库。一个 MongoDB 实例可以承载多个数据库，每个数据库可以拥有 0 到多个集合。\n官方文档：Databases\n1、说明\n 每个数据库有相应的数据文件和命名空间文件。文件的前缀是数据库的名称，后缀 .ns 表示命名空间文件，后缀以 0、1 等数字结尾的，表示数据文件。 数据文件的大小从 64MB 开始，新的数据文件大小是上一个文件的 2 倍。所以能看到，下图中 chen.0 的大小是 64MB，chen.1 的大小是 128MB，chen.2 的是 256MB。 文件使用MAP进行内存映射，会将所有的数据文件映射到内存中，但是只是虚拟内存，只有访问到这块数据时才会交换到物理内存中。 每个数据文件会被分成一个一个的数据块，块与块之间用双向链表链接。 在命名空间文件中，保存了每个命名空间的存储信息元数据，包括其大小、块数、第一块的位置、最后一块的位置、被删除的块的链表以及索引信息。　  2、常用命令\n① 查看所有数据库：\nshow dbs\r ② 查看当前数据库：\ndb\r ③ 切换到指定数据库：\n注：当数据库不存在的时候，不会立刻创建数据库的数据文件和命名空间文件，只有在第一次向数据库中插入一个文件的时候才去创建对应的数据库。在这一点上，集合也有类似的特性。\nuse $database_name\r ④ 删除当前在使用的这个数据库：\n注：在删除当前使用的数据库之后，db 任然指向被删除的那个数据库名称，可以通过 use 切换；如果不切换就做数据插入操作，会重新建立相同名字的一个数据库，但是已经不是原来的数据库了，尽管有相同的名称，也有可能有相同的集合和文档。\ndb.dropDatabase()\r 3、其他\n系统保留数据库：\n admin：root 数据库 local：这个数据库中的数据永远不会被复制，可以用于存储限于本地数据单台服务器的任意集合 config：分片时，config 数据库在内部使用，保存分片信息  二、Collection（集合） 集合是一组文档的集，结构层级相当于关系型数据库中的数据表。\n官方文档：Collections\n1、说明\n和关系型数据库的表不同，集合内的文档结构可以各不相同，只要是 JOSN 格式即可。例如：\n{\u0026quot;title\u0026quot;: \u0026quot;hello!\u0026quot;}\r{\u0026quot;recommend\u0026quot;: 5}\r 这两个文档是可以存放在同一个集合中的，但最好还是确保同集合内文档的格式统一。\n2、常用命令\n① 查看当时数据库下所有集合：\nshow collections\r ② 创建集合：\ndb.createCollection(\u0026quot;$collection_name\u0026quot;)\r 带参数创建：\n注：参数意为创建固定集合 test_collection_02，整个集合空间大小 6142800B, 文档最大个数为 10000 个。\ndb.createCollection(\u0026quot;test_collection_02\u0026quot;, {capped: true, autoIndexId: true, size: 6142800, max: 10000 } )\r  但在实际操作中，你并不需要特意的去创建，如果你插入一些文档时指定集合不存在，MongoDB 会自动为你创建：\ndb.test_collection_03.insert({\u0026quot;name\u0026quot;: \u0026quot;自动创建集合测试\u0026quot;})\r 检查一下：\n ③ 删除集合：\ndb.$collection_name.drop()\r ④ 更多指令：\ndb.$collection_name.help()\r 注：下图中截取了一小部分。 三、Document（文档） 文档是 MongoDB 的核心概念，也是数据的基本单元，非常类似于关系数据库中的行。在 MongoDB 中，文档表示为键值对的一个有序集。\n举一些例子：\n{\u0026quot;title\u0026quot;: \u0026quot;hello!\u0026quot;}\r{\u0026quot;title\u0026quot;: \u0026quot;hello!\u0026quot;, \u0026quot;recommend\u0026quot;: 5}\r{\u0026quot;title\u0026quot;: \u0026quot;hello!\u0026quot;, \u0026quot;recommend\u0026quot;: 5, \u0026quot;author\u0026quot;: {\u0026quot;firstname\u0026quot;: \u0026quot;paul\u0026quot;, \u0026quot;lastname\u0026quot;: \u0026quot;frank\u0026quot;}}\r 从上面的例子可以看到，文档的值有不同的数据类型，甚至可以是一个完整的内嵌文档（最后一个示例的 author 值是一个完整的文档，文档里面定义了 firstname 和 lastname 。当然还可以包含更多其他信息甚至于在内嵌文档中还可以有内嵌文档）。\n1、说明\n 文档区分大小写和数据类型，所以以下两组文档是不同的：  // 值类型不同\r{\u0026quot;recommend\u0026quot;: \u0026quot;5\u0026quot;}\r{\u0026quot;recommend\u0026quot;: 5}\r// 键大小写区分\r{\u0026quot;Recommend\u0026quot;: \u0026quot;5\u0026quot;}\r{\u0026quot;recommend\u0026quot;: \u0026quot;5\u0026quot;}\r MongoDB 的文档中的键值对是有序的，因此下面的文档是不同的：  {\u0026quot;title1\u0026quot;: \u0026quot;hello!\u0026quot;, \u0026quot;title2\u0026quot;: \u0026quot;Mongo\u0026quot;}\r{\u0026quot;title2\u0026quot;: \u0026quot;Mongo\u0026quot;, \u0026quot;title1\u0026quot;: \u0026quot;hello!\u0026quot;}\r MongoDB 的文档中不能有重复的键，因此下面的文档是非法的：  {\u0026quot;title\u0026quot;:\u0026quot;hello!\u0026quot;,\u0026quot;title\u0026quot;:\u0026quot;Mongo\u0026quot;}\r 2、常用命令\n① 查看集合内的所有文档：\n# 搜索一个文档，在我的测试中返回的是最先插入的文档\rdb.$collection_name.findOne().pretty()\r# 不带搜索条件以查询整个集合所有的文档，.pretty() 作用为格式化输出\rdb.$collection_name.find().pretty()\r# 带搜索条件\rdb.$collection_name.find($query, $projection)\r    参数 说明 示例     query 【选填】使用查询操作符指定查询条件 {\u0026ldquo;recommend\u0026rdquo;: {$lt: 50}}   projection 【选填】使用投影操作符指定返回的键，不填则返回符合搜索条件的文档的所有键值对     查询方法在后面会展开来讲，现在先放菜鸟的教程链接供参考：MongoDB 查询文档\n② 向集合中插入文档：\ndb.$collection_name.insert($document_value)\r ③ 删除文档：\n# 删除集合中的所有文档\rdb.$collection_name.remove()\r# 删除满足要求的文档（2.6 及以后的版本适用）\rdb.$collection_name.remove($query, {justOne: $justOne_value, writeConcern: $writeConcern_value})\r    参数 说明 示例     justOne 【选填】如果设为 true 或 1，则只删除一个文档；如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档 true   writeConcern 【选填】抛出异常的级别     ④ 更新文档：\ndb.$collection_name.update($query, $update, {upsert: $upsert_value, multi: $multi_value, writeConcern: $writeConcern_value})\r    参数 说明 示例     update 【必填】update 的对象和一些更新的操作符，如 $, $inc 等，也可以理解为 sql update 查询内 set 后面的操作 {$set: {\u0026ldquo;title\u0026rdquo;: \u0026ldquo;MongoDB\u0026rdquo;}}   upsert 【选填】如果不存在满足搜索条件的记录，是否将 update 的文档作为新文档插入。默认是 false 即不插入，true 则为插入 true   multi 【选填】 是否更新多条记录。默认是 false，只更新找到的第一条记录；如果这个参数为 true，就把按条件查出来的所有记录全部更新 true    本章结束。\n","id":19,"section":"posts","summary":"第一次接触 MongoDB 这种非关系型数据库的表结构设计。 MongoDB 的层级名词翻译过来会有点难理解，所以我将它和 PostgreSQL 数据库的对应起来： PostgreSQL MongoDB Database（数据库）","tags":["MongoDB"],"title":"MongoDB 学习笔记（二） MongoDB 层级关系的梳理和基础操作","uri":"https://senjianlu.com/2021/11/mongodb-note-02/","year":"2021"},{"content":"应该也算硬件相关吧\u0026hellip;\u0026hellip;\n 1、将系统地区切换至美国并开启虚拟化\n因为是系统层面的配置因此放在一起讲。\n① 设置 -\u0026gt; 时间和语言 -\u0026gt; 语言 \u0026amp; 区域 -\u0026gt; 国家或地区 -\u0026gt; 切换到美国\n 不切换地区结果如下：  ② 开启 Windows 虚拟化\n这里只需要开启 Windows 虚拟机监控程序平台 和 虚拟机平台 就够了，没有 Hyper-V 不勾选也没有关系，对实际运行不会有影响：\n2、安装安卓子系统\n当前在微软商店安装Amazon Appstore 会自动帮你下载安卓子系统，考虑到我已经在路由器上配置了代理，能正常访问亚马逊服务，便采用这个较为官方的方式：\n 如果你并不想安装 Amazon Appstore，并且后续只准备在安卓虚拟机中安装一些有 .apk 安装文件提供的国产应用，那么也可以直接前往：Windows Subsystem for Android™ with Amazon Appstore 进行下载：\n 3、配置安卓子系统\n打开其系统设置：\n配置需做如下修改：\n① 将子系统资源改为连续以进行第三方应用安装（安装完之后可改回按需要）\n② 开启开发人员模式并记录下连接用的信息\n4、从 .apk 文件安装应用\n这里就不演示从官方 Amazon Appstore 安装应用了，没有意义。\n我需要安装的网易 UU 加速器，用来控制同一网络环境下 OpenWrt 上的 UU 加速器路由器插件，以此为例。\n① 从官方下得安装文件\n② 下载安装 ADB 工具\n 官方描述：Android SDK Platform Tools 是 Android SDK 的一个组件。它包含与 Android 平台进行交互的工具，例如 adb、fastboot 和 systrace。开发 Android 应用时需要使用这些工具。如果您想要解锁设备的引导加载程序并为其刷入新的系统映像，同样需要使用这些工具。\n 下载地址：platform-tools-latest-windows.zip\n将解压后的文件夹移至任意位置：\n③ 使用 ADB 连接安卓虚拟机\n在 ADB 工具包目录下启动 Windows 终端，并连接至安卓虚拟机（地址为你开启开发人员模式时记录的那个）：\n# 查看当前是否有能连接的设备\radb devices\r# 连接至安卓虚拟机\radb connect 127.0.0.1:58526\r ④ 安装应用\n找到你 .apk 存放的路径并作为参数传入：\n.\\adb install C:\\Users\\m112233\\Downloads\\uu-6.2.6.1115.apk\r 完成后，就能在你最近添加的项目处看见了：\n正常打开没有问题：\n之后你可以把地区改回中国、虚拟机子系统改回按需求（这样 Android 虚拟机不会一直在后台运行着）。\n再安装其他软件时如果出现连不上虚拟机的问题，需要将步骤 3 的配置重新做一遍。\n结束。\n","id":20,"section":"posts","summary":"应该也算硬件相关吧\u0026hellip;\u0026hellip; 1、将系统地区切换至美国并开启虚拟化 因为是系统层面的配置因此放在一起讲。 ① 设置 -\u0026gt; 时间和语言","tags":["硬件"],"title":"Windows11 抢先体验 Android 虚拟机并安装第三方应用","uri":"https://senjianlu.com/2021/11/windows11-android/","year":"2021"},{"content":"对价格字段进行增量同步。\n  简单阐述全量同步和增量同步区别：\n全量同步：就是每天定时（避开业务高峰期）或者周期性全量把数据从一个地方拷贝到另外一个地方，可以采用直接全部覆盖（使用新数据覆盖旧数据）或者走更新逻辑（覆盖前判断下，如果新旧不一致，就更新）。\n增量同步：就是指抓取某个时刻（更新时间）或者检查点以后的数据来同步，不是无规律的全量同步。\n  1、基础的配置文件\nMongoDB 写插件的官方文档：Datax MongoDBWriter\n{\r\u0026quot;job\u0026quot;: {\r\u0026quot;setting\u0026quot;: {\r\u0026quot;speed\u0026quot;: {\r\u0026quot;channel\u0026quot;: 3\r},\r\u0026quot;errorLimit\u0026quot;: {}\r},\r\u0026quot;content\u0026quot;: [\r{\r\u0026quot;reader\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;postgresqlreader\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;username\u0026quot;: \u0026quot;{from_username}\u0026quot;,\r\u0026quot;password\u0026quot;: \u0026quot;{from_password}\u0026quot;,\r\u0026quot;where\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;column\u0026quot;: [\r\u0026quot;{from_column_01}\u0026quot;,\r\u0026quot;{from_column_02}\u0026quot;\r],\r\u0026quot;connection\u0026quot;: [\r{\r\u0026quot;table\u0026quot;: [\r\u0026quot;{from_table}\u0026quot;\r],\r\u0026quot;jdbcUrl\u0026quot;: [\r\u0026quot;jdbc:postgresql://{from_host}:{from_port}/{from_database}\u0026quot;\r]\r}\r]\r}\r},\r\u0026quot;writer\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;mongodbwriter\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;address\u0026quot;: [\r\u0026quot;{to_host}:{to_port}\u0026quot;\r],\r\u0026quot;userName\u0026quot;: \u0026quot;{to_username}\u0026quot;,\r\u0026quot;userPassword\u0026quot;: \u0026quot;{to_password}\u0026quot;,\r\u0026quot;dbName\u0026quot;: \u0026quot;{to_database}\u0026quot;,\r\u0026quot;collectionName\u0026quot;: \u0026quot;smr_{web}_{mode}_history\u0026quot;,\r\u0026quot;column\u0026quot;: [\r{\r\u0026quot;name\u0026quot;: \u0026quot;{from_column_01}\u0026quot;,\r\u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;\r},\r{\r\u0026quot;name\u0026quot;: \u0026quot;{from_column_02}\u0026quot;,\r\u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;\r}\r]\r}\r}\r}\r]\r}\r}\r 2、我的需求和解决\n我的需求是：定时将 PostgreSQL 表中的价格字段和更新时间字段，以更新时间的时间戳作为主键，保存到 MongoDB 中。\n写起来还是很简单的，只要注意一下 PostgreSQL 时间戳的转换就行了。\n最后的配置文件：\n{\r\u0026quot;job\u0026quot;: {\r\u0026quot;setting\u0026quot;: {\r\u0026quot;speed\u0026quot;: {\r\u0026quot;channel\u0026quot;: 10\r},\r\u0026quot;errorLimit\u0026quot;: {\r\u0026quot;record\u0026quot;: 2,\r\u0026quot;percentage\u0026quot;: 0.02\r}\r},\r\u0026quot;content\u0026quot;: [\r{\r\u0026quot;reader\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;postgresqlreader\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;username\u0026quot;: \u0026quot;{from_username}\u0026quot;,\r\u0026quot;password\u0026quot;: \u0026quot;{from_password}\u0026quot;,\r\u0026quot;where\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;column\u0026quot;: [\r\u0026quot;update_time\u0026quot;,\r\u0026quot;price\u0026quot;\r],\r\u0026quot;connection\u0026quot;: [\r{\r\u0026quot;table\u0026quot;: [\r\u0026quot;test_table\u0026quot;\r],\r\u0026quot;jdbcUrl\u0026quot;: [\r\u0026quot;jdbc:postgresql://{from_host}:{from_port}/{from_database}\u0026quot;\r]\r}\r]\r}\r},\r\u0026quot;writer\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;mongodbwriter\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;address\u0026quot;: [\r\u0026quot;{to_host}:{to_port}\u0026quot;\r],\r\u0026quot;userName\u0026quot;: \u0026quot;{to_username}\u0026quot;,\r\u0026quot;userPassword\u0026quot;: \u0026quot;{to_password}\u0026quot;,\r\u0026quot;dbName\u0026quot;: \u0026quot;{to_database}\u0026quot;,\r\u0026quot;collectionName\u0026quot;: \u0026quot;test_table_price_history\u0026quot;,\r\u0026quot;column\u0026quot;: [\r{\r\u0026quot;name\u0026quot;: \u0026quot;time\u0026quot;,\r\u0026quot;type\u0026quot;: \u0026quot;int\u0026quot;\r},\r{\r\u0026quot;name\u0026quot;: \u0026quot;price\u0026quot;,\r\u0026quot;type\u0026quot;: \u0026quot;double\u0026quot;\r}\r],\r\u0026quot;upsertInfo\u0026quot;: {\r\u0026quot;isUpsert\u0026quot;: \u0026quot;false\u0026quot;\r}\r}\r}\r}\r]\r}\r}\r 结束。\n","id":21,"section":"posts","summary":"对价格字段进行增量同步。 简单阐述全量同步和增量同步区别： 全量同步：就是每天定时（避开业务高峰期）或者周期性全量把数据从一个地方拷贝到另外一个","tags":["DataX"],"title":"DataX 实践（三）从 PostgreSQL 读数据库增量同步表到 MongoDB 写数据库","uri":"https://senjianlu.com/2021/11/datax-note-03/","year":"2021"},{"content":"在开展 PostgreSQL 增量同步到 MongoDB 的工作之前，先尝试个简单点的全量同步，也能熟悉一下 DataX 的各个配置项和其作用。\n  附下 DataX 的工作原理：\n官方文档中也给了一个 MySQL 同步到 HDFS 的例子，和上面的流程图一起看会更容易理解： DataX 本身作为离线数据同步框架，采用 Framework+plugin 架构构建。将数据源读取和写入抽象成为 Reader/Writer 插件，纳入到整个同步框架中。\n Reader：Reader 为数据采集模块，负责采集数据源的数据，将数据发送给 Framework。 Writer： Writer 为数据写入模块，负责不断向 Framework 取数据，并将数据写入到目的端。 Framework：Framework 用于连接 reader 和 writer，作为两者的数据传输通道，并处理缓冲，流控，并发，数据转换等核心技术问题。    1、基础的配置文件\n要实现不同的源数据库读取和目标数据库写入功能，只需要在配置文件中装载不同插件即可。\n插件列表：Support Data Channels\n这里以 PostgreSQL 读写为例，只要注意一下源列和目标列是靠索引对齐的，字段名可以不一样就行了：\n{\r\u0026quot;job\u0026quot;: {\r\u0026quot;setting\u0026quot;: {\r\u0026quot;speed\u0026quot;: {\r\u0026quot;channel\u0026quot;: 3\r},\r\u0026quot;errorLimit\u0026quot;: {\r\u0026quot;record\u0026quot;: 2,\r\u0026quot;percentage\u0026quot;: 0.02\r}\r},\r\u0026quot;content\u0026quot;: [\r{\r\u0026quot;reader\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;postgresqlreader\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;username\u0026quot;: \u0026quot;{from_username}\u0026quot;,\r\u0026quot;password\u0026quot;: \u0026quot;{from_password}\u0026quot;,\r\u0026quot;where\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;column\u0026quot;: [\r\u0026quot;{from_column_01}\u0026quot;,\r\u0026quot;{from_column_02}\u0026quot;\r],\r\u0026quot;connection\u0026quot;: [\r{\r\u0026quot;table\u0026quot;: [\r\u0026quot;{from_table}\u0026quot;\r],\r\u0026quot;jdbcUrl\u0026quot;: [\r\u0026quot;jdbc:postgresql://{from_host}:{from_port}/{from_database}\u0026quot;\r]\r}\r]\r}\r},\r\u0026quot;writer\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;postgresqlwriter\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;username\u0026quot;: \u0026quot;{to_username}\u0026quot;,\r\u0026quot;password\u0026quot;: \u0026quot;{to_password}\u0026quot;,\r\u0026quot;column\u0026quot;: [\r\u0026quot;{from_column_01}\u0026quot;,\r\u0026quot;{from_column_02}\u0026quot;\r],\r\u0026quot;preSql\u0026quot;: [\r\u0026quot;DELETE FROM {to_table};\u0026quot;\r],\r\u0026quot;connection\u0026quot;: [\r{\r\u0026quot;jdbcUrl\u0026quot;: \u0026quot;jdbc:postgresql://{to_host}:{to_port}/{to_database}\u0026quot;,\r\u0026quot;table\u0026quot;: [\r\u0026quot;{to_table}\u0026quot;\r]\r}\r]\r}\r}\r}\r]\r}\r}\r 除开 Python3 能使用 .format() 方法直接替换的参数外，完整的参数介绍可以参照以下的官方文档。\nPostgreSQL 读插件：PostgreSQLReader\nPostgreSQL 写插件：PostgreSQLWriter\n2、我的需求和解决\n我的需求很简单：定时同步整表数据，不需要什么搜索条件。\n但是在我实际进行同步的时候，碰到了这个问题：\nException in thread \u0026quot;taskGroup-0\u0026quot; com.alibaba.datax.common.exception.DataXException: Code:[DBUtilErrorCode-06], Description:[执行数据库 Sql 失败, 请检查您的配置的 column/table/where/querySql或者向 DBA 寻求帮助.]. - 执行的SQL为: select id,name,price,detail from test_table 具体错误信息为：com.alibaba.datax.common.exception.DataXException: Code:[DBUtilErrorCode-12], Description:[不支持的数据库类型. 请注意查看 DataX 已经支持的数据库类型以及数据库版本.]. - 您的配置文件中的列配置信息有误. 因为DataX 不支持数据库读取这种字段类型. 字段名:[detail], 字段名称:[1111], 字段Java类型:[java.lang.Object]. 请尝试使用数据库函数将其转换datax支持的类型 或者不同步该字段 .\r 检查了一下，detail 字段是 JSONB 类型的，无论是读还是写插件文档中都没有标注支持该类型，考虑了一下可能只有 4 个选择了：\n 更改数据库字段类型 在读的过程中使用函数将 JSONB 类型改为字符串，写的时候依靠 PosrgreSQL 自动将字符串类型转为 JSONB 存入数据库 在读的过程中使用函数将 JSONB 类型改为字符串，写入临时列，等同步结束后再执行语句将临时列数据转为 JSONB 存回原列 摆烂，不同步这个字段  JSONB 存存无用信息很方便，且当前已经有很多基于 JSONB 特性写的 SQL 语句了，排除了 1。\n在多次尝试之后发现无法实现，排除掉了 2。\n 关于 2 的尝试，读的过程中类型转换是很顺利的，写入之前值已经是类似 '{\u0026quot;111\u0026quot;: 222}' 的格式了，但是到了正式写入：如果你不强制指定类型，那么会报 PostgreSQLWriter 插件不支持 JSON 类型写入的错误，猜测是读取了数据库中的列类型而并非直接读取值的类型；强制指定类型 \u0026quot;detail::VARCHAR\u0026quot; 之后又会报 PostgreSQL 插入错误，无法将 VARCHAR 类型的数据插入 JSONB 类型的列。\n 最终只剩方案 3，庆幸在表设计之初就准备了备用字段，现在还有 2 个能用，并且后续如果 DataX 插件支持 JSONB 类型，只需要改配置文件就行了，很方便。\n修改后的配置文件（加上了我自己表的结构信息）：\n{\r\u0026quot;job\u0026quot;: {\r\u0026quot;setting\u0026quot;: {\r\u0026quot;speed\u0026quot;: {\r\u0026quot;channel\u0026quot;: 10\r},\r\u0026quot;errorLimit\u0026quot;: {\r\u0026quot;record\u0026quot;: 2,\r\u0026quot;percentage\u0026quot;: 0.02\r}\r},\r\u0026quot;content\u0026quot;: [\r{\r\u0026quot;reader\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;postgresqlreader\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;username\u0026quot;: \u0026quot;{from_username}\u0026quot;,\r\u0026quot;password\u0026quot;: \u0026quot;{from_password}\u0026quot;,\r\u0026quot;where\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;column\u0026quot;: [\r\u0026quot;id\u0026quot;,\r\u0026quot;name\u0026quot;,\r\u0026quot;price\u0026quot;,\r\u0026quot;detail:VARCHAR:\u0026quot;\r],\r\u0026quot;connection\u0026quot;: [\r{\r\u0026quot;table\u0026quot;: [\r\u0026quot;test_table\u0026quot;\r],\r\u0026quot;jdbcUrl\u0026quot;: [\r\u0026quot;jdbc:postgresql://{from_host}:{from_port}/{from_database}\u0026quot;\r]\r}\r]\r}\r},\r\u0026quot;writer\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;postgresqlwriter\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;username\u0026quot;: \u0026quot;{to_username}\u0026quot;,\r\u0026quot;password\u0026quot;: \u0026quot;{to_password}\u0026quot;,\r\u0026quot;column\u0026quot;: [\r\u0026quot;id\u0026quot;,\r\u0026quot;name\u0026quot;,\r\u0026quot;price\u0026quot;,\r\u0026quot;spare\u0026quot;\r],\r\u0026quot;preSql\u0026quot;: [\r\u0026quot;DELETE FROM test_table;\u0026quot;\r],\r\u0026quot;postSql\u0026quot;: [\r\u0026quot;UPDATE test_table SET detail = spare::JSONB;\u0026quot;,\r\u0026quot;UPDATE test_table SET spare = NULL;\u0026quot;\r],\r\u0026quot;connection\u0026quot;: [\r{\r\u0026quot;jdbcUrl\u0026quot;: \u0026quot;jdbc:postgresql://{to_host}:{to_port}/{to_database}\u0026quot;,\r\u0026quot;table\u0026quot;: [\r\u0026quot;test_table\u0026quot;\r]\r}\r]\r}\r}\r}\r]\r}\r}\r 会慢一点，适当调高 channel 并发之后还能接受，等数据量上来了再补性能调优。\n本章结束。\n","id":22,"section":"posts","summary":"在开展 PostgreSQL 增量同步到 MongoDB 的工作之前，先尝试个简单点的全量同步，也能熟悉一下 DataX 的各个配置项和其作用。 附下 DataX 的工作原理： 官方文档中也给了一个 MySQL 同步到","tags":["DataX"],"title":"DataX 实践（二）从 PostgreSQL 读数据库全量同步表到 PostgreSQL 写数据库","uri":"https://senjianlu.com/2021/11/datax-note-02/","year":"2021"},{"content":"需要从 PostgreSQL 同步数据到 MongoDB，看了一圈选择了 DataX 工具，阿里的开源项目还是蛮值得信赖的。\n官方并未提供 Docker 镜像，但是考虑到我现在已经部署了 K3s 集群，所以决定折腾下，自己构建个镜像来用。\n 参考文章：Docker 运行 DataX 实现数据同步方案\n我的 Dockerfile 文件：DataX-docker\n我构建完的 Docker 镜像：rabbir/datax\n1、安装和配置 DataX 运行环境\n 官方描述的运行环境：\n Linux JDK（1.8 以上，推荐 1.8） Python（推荐 Python2.6.X） Apache Maven 3.x （Compile DataX）   ① 直接拉取 CentOS7 的镜像，解决 Linux 和 Python 需求（CentOS7 官方镜像自带 Python2.7.5）：\n# 拉取镜像\rdocker pull centos:centos7\r# 运行镜像\rdocker run -it docker.io/centos:centos7 /bin/bash\r 之后的命令都是在容器内执行！\n② 安装 JDK1.8：\n# 安装位置\rcd /usr/local/\r# 下载压缩包\rwget --no-check-certificate --no-cookies --header \u0026quot;Cookie: oraclelicense=accept-securebackup-cookie\u0026quot; http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz\r# 解压并重命名\rtar -zxvf jdk-8u131-linux-x64.tar.gz\rmv jdk1.8.0_131 jdk1.8\r# 删除压缩包\rrm -f jdk-8u131-linux-x64.tar.gz\r# 配置环境变量\rvi ~/.bashrc\r 新增以下两行：\n...\r...\r# Java 相关\rexport JAVA_HOME=/usr/local/jdk1.8\rexport PATH=$PATH:$JAVA_HOME/bin\rexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\r...\r...\r 使配置生效：\nsource ~/.bashrc\r# 确认 Java 版本\rjava -version\r ③ 安装 Apache Maven：\n# 安装位置\rcd /usr/local/\r# 下载压缩包\rwget --no-check-certificate https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz\r# 解压并重命名\rtar -zxvf apache-maven-3.6.3-bin.tar.gz\rmv apache-maven-3.6.3 maven\r# 删除压缩包\rrm -f apache-maven-3.6.3-bin.tar.gz\r# 配置环境变量\rvi ~/.bashrc\r ...\r...\r# Maven 相关\rexport MAVEN_HOME=/usr/local/maven\rexport PATH=$PATH:$MAVEN_HOME/bin\r...\r...\r 使配置生效：\nsource ~/.bashrc\r# 确认 Java 版本\rmvn -v\r 至此环境安装和配置完成。\n2、下载并编译 DataX\n官方文档：Quick Start\ncd /usr/local/\ryum -y install git\r# 克隆源码\rgit clone https://github.com/alibaba/DataX.git\r# 编译\rcd DataX\rmvn -U clean package assembly:assembly -Dmaven.test.skip=true\r  我碰到的问题：\n① oscarwriter JAR 包的缺失：\n[ERROR] Failed to execute goal on project oscarwriter: Could not resolve dependencies for project com.alibaba.datax:oscarwriter:jar:0.0.1-SNAPSHOT: Could not find artifact com.oscar:oscar:jar:7.0.8 at specified path /usr/local/DataX/oscarwriter/src/main/lib/oscarJDBC.jar -\u0026gt; [Help 1]\r 解决方法就是去 pom.xml 中注释掉，反正也用不到。编辑源码根目录的 pom.xml 文件：\nvi pom.xml\r 注释掉 oscarwriter 那行：\n...\r...\r\u0026lt;!-- \u0026lt;module\u0026gt;oscarwriter\u0026lt;/module\u0026gt; --\u0026gt;\r...\r...\r  Docker 容器性能受限，整体编译大概需要 10 分钟左右（我是因为出了错重新编译跳过了编译成功的包，所以只用了 3 分钟）。\n编译完成后，DataX 的可运行的 .py 文件会在 /usr/local/DataX/target/datax/datax/bin/ 路径下，测试一下：\ncd /usr/local/DataX/target/datax/datax/bin/\r# 查看配置模板\rpython datax.py -r streamreader -w streamwriter\r 如下输出说明 DataX 安装完成：\n3、构建 Docker 容器镜像并运行\n① 首先写个正常能跑的测试用配置文件：\n# 放在不同路径下\rvi /root/stream2stream.json\r {\r\u0026quot;job\u0026quot;: {\r\u0026quot;content\u0026quot;: [\r{\r\u0026quot;reader\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;streamreader\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;sliceRecordCount\u0026quot;: 10,\r\u0026quot;column\u0026quot;: [\r{\r\u0026quot;type\u0026quot;: \u0026quot;long\u0026quot;,\r\u0026quot;value\u0026quot;: \u0026quot;10\u0026quot;\r},\r{\r\u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\u0026quot;value\u0026quot;: \u0026quot;Hello DataX!\u0026quot;\r}\r]\r}\r},\r\u0026quot;writer\u0026quot;: {\r\u0026quot;name\u0026quot;: \u0026quot;streamwriter\u0026quot;,\r\u0026quot;parameter\u0026quot;: {\r\u0026quot;encoding\u0026quot;: \u0026quot;UTF-8\u0026quot;,\r\u0026quot;print\u0026quot;: true\r}\r}\r}\r],\r\u0026quot;setting\u0026quot;: {\r\u0026quot;speed\u0026quot;: {\r\u0026quot;channel\u0026quot;: 5\r}\r}\r}\r}\r 跑一下：\npython datax.py /root/stream2stream.json   datax.py 自带对路径的判断，因此在任何目录下去执行都没有问题，如下命令会收获一样正常运行的结果：\ncd /root\rpython /usr/local/DataX/target/datax/datax/bin/datax.py stream2stream.json\r  ② 将上述所有命令写入 Dockerfile（部分命令如环境变量的配置会有所不同）：\n# 基础镜像系统版本为 CentOS:7\rFROM centos:7\r# 维护者信息\rLABEL maintainer=\u0026quot;Rabbir admin@cs.cheap\u0026quot;\r# Docker 内用户切换到 root\rUSER root\r# 设置时区为东八区\rENV TZ Asia/Shanghai\rRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026gt; /etc/timezone\r# 安装 Git 和 Wget\rRUN yum -y install wget\rRUN yum -y install git\r# 切换到 /usr/local/ 目录下\rWORKDIR /usr/local/\r# 下载解压 JDK\rRUN wget --no-check-certificate --no-cookies --header \u0026quot;Cookie: oraclelicense=accept-securebackup-cookie\u0026quot; http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz\rRUN tar -zxvf jdk-8u131-linux-x64.tar.gz\rRUN mv jdk1.8.0_131 jdk1.8\rRUN rm -f jdk-8u131-linux-x64.tar.gz\r# 下载解压 Maven\rRUN wget https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz --no-check-certificate\rRUN tar -zxvf apache-maven-3.6.3-bin.tar.gz\rRUN mv apache-maven-3.6.3 maven\rRUN rm -f apache-maven-3.6.3-bin.tar.gz\r# 添加容器内的永久环境变量\rRUN sed -i \u0026quot;2 a export JAVA_HOME=/usr/local/jdk1.8\u0026quot; /etc/profile\rRUN sed -i \u0026quot;3 a export PATH=\\$PATH:\\$JAVA_HOME/bin\u0026quot; /etc/profile\rRUN sed -i \u0026quot;4 a export CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar\u0026quot; /etc/profile\rRUN sed -i \u0026quot;5 a export MAVEN_HOME=/usr/local/maven\u0026quot; /etc/profile\rRUN sed -i \u0026quot;6 a export PATH=\\$PATH:\\$MAVEN_HOME/bin\u0026quot; /etc/profile\rRUN source /etc/profile\rRUN sed -i '1 a source /etc/profile' ~/.bashrc\rRUN source ~/.bashrc\r# 添加构建用的临时环境变量\rENV JAVA_HOME /usr/local/jdk1.8\rENV PATH $PATH:$JAVA_HOME/bin\rENV CLASSPATH .:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\rENV MAVEN_HOME /usr/local/maven\rENV PATH $PATH:$MAVEN_HOME/bin\r# 克隆并编译 DataX 的源码\rWORKDIR /usr/local/\rRUN git clone https://github.com/alibaba/DataX.git\rWORKDIR /usr/local/DataX/\rRUN sed -i \u0026quot;s#\u0026lt;module\u0026gt;oscarwriter\u0026lt;/module\u0026gt;#\u0026lt;!-- \u0026lt;module\u0026gt;oscarwriter\u0026lt;/module\u0026gt; --\u0026gt;#\u0026quot; pom.xml\rRUN mvn -U clean package assembly:assembly -Dmaven.test.skip=true\r# 创建配置文件存放用文件夹\rRUN mkdir /data\rWORKDIR /data\r# 启动命令\rENTRYPOINT [\u0026quot;/usr/bin/python\u0026quot;, \u0026quot;/usr/local/DataX/target/datax/datax/bin/datax.py\u0026quot;]\rCMD [\u0026quot;\u0026quot;]\r 构建（镜像名和版本自行替换）：\ndocker build -t rabbir/datax:latest .\r 因为需要读取配置文件，而 Docker 运行时是不支持将本地文件作为参数传入的，因此需要配置一下宿主机和容器内 /data 文件夹的映射，参考以下命令：\ndocker run --name datax_test_container -v /rab/docker/datax/data:/data rabbir/datax:latest test/stream2stream.json\r  解释：配置文件在宿主机内的完整路径为：/rab/docker/datax/data/test/stream2stream.json，那么通过映射它在容器内的路径则为：/data/test/stream2stream.json，此时就只需要传入 test/stream2stream.json 作为参数就可以了。\n 运行完后容器会自动退出：\n本章结束。\n","id":23,"section":"posts","summary":"需要从 PostgreSQL 同步数据到 MongoDB，看了一圈选择了 DataX 工具，阿里的开源项目还是蛮值得信赖的。 官方并未提供 Docker 镜像，但是考虑到我现在已经部署了 K3s 集群","tags":["DataX"],"title":"DataX 实践（一）构建 DataX 的 Docker 容器镜像并测试运行","uri":"https://senjianlu.com/2021/11/datax-note-01/","year":"2021"},{"content":"虽然我很早之前就完成了数据库版本的升级（9.2.4 -\u0026gt; 12.8），但是由于考虑到教程对新手的友好就一直没有去更新第一章，这次作为补足放出吧。\n新的特性可以参照这篇文章：PostgreSQL 12 新特性汇总，对于这种大型开源项目并有专业的团队和完善的社区做维护，我是推荐无脑上新版本的。\n 参考文章：在CentOS 7上安装\u0026amp;配置PostgreSQL 12\n1、导入 yum 源并安装 PostgreSQL 服务\n导入 yum 源：\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm\r 安装 PostgreSQL 服务：\nsudo yum install -y postgresql12 postgresql12-server\r 2、初始化和启动数据库\n初始化： 注：如果你是在安装主从同步中的从数据库的话，请不要初始化数据库。\nsudo /usr/pgsql-12/bin/postgresql-12-setup initdb\r 启动数据库：\n# 启动数据库服务\rsudo systemctl start postgresql-12\r# 设置为开机自启动\rsudo systemctl enable postgresql-12\r 3、修改初始用户 postgres 的密码\nLinux 系统中切换到 postgres 用户，并进入 psql 命令行：\nsu postgres\rpsql\r 执行 SQL 语句：\nALTER USER postgres WITH PASSWORD 'new_postgres_password';\r  退出 psql 命令行使用：Ctrl + D\n 4、配置数据库允许远程访问\n首先开放防火墙和端口，这里就不做演示了，默认 PostgreSQL 服务会启动在 5432 端口上。\n① 修改允许访问的 IP：\nvi /var/lib/pgsql/12/data/postgresql.conf\r 将 listen_addresses 解注并将值改为 *：\n...\r...\rlisten_addresses='*'\r...\r...\r ② 允许所有 IP 使用密码验证访问：\nvi /var/lib/pgsql/12/data/pg_hba.conf\r 在尾部添加：\n...\r...\rhost all all 0.0.0.0/0 md5\r  稍微讲下默认配置中用到的认证模式：\n trust: 信任任何连接，不需要输入密码，即使数据库中没有这个用户。 peer: 信任任何连接，不需要输入密码，但是需要数据库中存在这个用户。 md5: 需要输入密码，且需要数据库中存在这个用户。  想详细了解数据库的认证方式可以参考官方文档：The pg_hba.conf File\n 之后重启数据库：\nsudo systemctl restart postgresql-12\r 结束。\n","id":24,"section":"posts","summary":"虽然我很早之前就完成了数据库版本的升级（9.2.4 -\u0026gt; 12.8），但是由于考虑到教程对新手的友好就一直没有去更新第一章，这次作为补足放出吧。 新","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记（一） 补足：CentOS7 下 12.8 版本数据库的安装","uri":"https://senjianlu.com/2021/11/postgresql-note-01-supplement/","year":"2021"},{"content":"1、错误信息\nMissing or invalid credentials.\rError: connect ECONNREFUSED /run/user/0/vscode-git-02xxxeed11.sock\rat PipeConnectWrap.afterConnect [as oncomplete] (net.js:1146:16) {\rerrno: -111,\rcode: 'ECONNREFUSED',\rsyscall: 'connect',\raddress: '/run/user/0/vscode-git-02xxxeed11.sock'\r}\rMissing or invalid credentials.\rError: connect ECONNREFUSED /run/user/0/vscode-git-02xxxeed11.sock\rat PipeConnectWrap.afterConnect [as oncomplete] (net.js:1146:16) {\rerrno: -111,\rcode: 'ECONNREFUSED',\rsyscall: 'connect',\raddress: '/run/user/0/vscode-git-02xxxeed11.sock'\r}\rremote: Repository not found.\rfatal: Authentication failed for 'https://github.com/username/repo.git/'\r 2、解决办法\n参考文章：Git push: Missing or invalid credentials. fatal: Authentication failed for \u0026lsquo;https://github.com/username/repo.git\u0026rsquo;\n① 依次选择：文件 -\u0026gt; 首选项 -\u0026gt; 设置\n② 搜索 git.terminalAuthentication 并取消勾选：\n③ 重启 VS Code 并重新 Push：\n这样操作之后有一个坏处，就是你 VS Code 对 GitHub 认证信息保存的功能会失效，你的每次 Push 都必须输入用户和密码。\n结束。\n","id":25,"section":"posts","summary":"1、错误信息 Missing or invalid credentials. Error: connect ECONNREFUSED /run/user/0/vscode-git-02xxxeed11.sock at PipeConnectWrap.afterConnect [as oncomplete] (net.js:1146:16) { errno: -111, code: 'ECONNREFUSED', syscall: 'connect', address: '/run/user/0/vscode-git-02xxxeed11.sock' } Missing or invalid credentials. Error: connect ECONNREFUSED /run/user/0/vscode-git-02xxxeed11.sock at PipeConnectWrap.afterConnect [as oncomplete] (net.js:1146:16) { errno: -111, code: 'ECONNREFUSED', syscall: 'connect', address: '/run/user/0/vscode-git-02xxxeed11.sock' } remote: Repository not found. fatal: Authentication failed for 'https://github.com/username/repo.git/' 2、解决办法 参考文","tags":["linux"],"title":"VS Code 使用 Remote 连接服务器并 Push 到 GitHub 私有仓库时报错：Missing or invalid credentials. 的解决办法","uri":"https://senjianlu.com/2021/11/vscode-github-push-error/","year":"2021"},{"content":"1、定时更新机场节点\n注意：定时更新机场节点配置中填入的链接，一定是要能被 Clash 正常读取的配置文件形式。\n不仅是类似原生 SSR 等的订阅链接无法被 Clash 正常读取，就连一般机场提供的加密的 Clash 订阅链接也不行，必须经过订阅转换为配置文件形式才能生效。\n 两种转换方法：\n① 在线订阅地址转换\n常用：品云订阅转换（部分地区被墙）\n注；推荐这个只是因为我也在用，如果出问题一起当受害者\u0026hellip;\u0026hellip;\n② 自建订阅转换\n项目：tindy2013/subconverter\n使用 Docker 部署（官方文档：README-docker.md）：\n# 下载镜像\rdocker pull tindy2013/subconverter:latest\r# 部署\rdocker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest\r# 测试是否部署成功\rcurl http://localhost:25500/version\r 开放防火墙和安全组后在外部访问：http://IP:25500/sub?target=clash\u0026amp;url=https%3A%2F%2Fmojie.info%2Fapi%2Fv1%2Fclient%2Fsubscribe%3Ftoken%3D4fxxxxxxxxxxxxxxxxxxx4c6f6\u0026amp;insert=false 以获取转换完成的配置文件，简单地说明一下参数（官方详细文档：README-cn.md）：\n   参数名 解析 样例     target 指想要生成的配置类型。 clash   url 经过URLEncode 处理后的订阅链接。 https%3A%2F%2Fmojie.info%2\u0026hellip;\u0026hellip;   insert 用于设置是否将配置文件中的 insert_url 插入（意义不明，我的理解是是否引入其他外部节点）。 false     ...\r...\r# 代理提供商\rproxy-providers:\r# 机场-魔戒所用订阅\rMojie-sub:\r# 对订阅地址的访问方式\rtype: http\r# 订阅地址\rurl: \u0026quot;https://sub.id9.cc/sub?target=clash\u0026amp;url=https%3A%2F%2Fmojie.info%2Fapi%2Fv1%2Fclient%2Fsubscribe%3Ftoken%3D4fxxxxxxxxxxxxxxxxxxx4c6f6\u0026amp;insert=false\u0026quot;\r# 订阅后节点存放用的配置文件（不同机场需使用不同文件）\rpath: ./sub/Mojie.yaml\r# 更新订阅间隔时间（秒）\rinterval: 3600\r# 节点检查\rhealth-check:\renable: true\rinterval: 600\rurl: http://www.gstatic.com/generate_204\r...\r...\r# 节点组\rproxy-groups:\r# 手动选择\r- name: 手动选择\rtype: select\rproxies:\r- 奇异之旅\r- 魔戒\r# 机场-魔戒\r- name: 魔戒\rtype: select\r# 注意：这里使用订阅的动作为 use\ruse:\r- Mojie-sub\r...\r...\r 重启后，到控制台就能看见自动更新的节点了：\n2、导入外部规则\n大佬们写的规则基本都是适配大众需求的，例如流媒体等。小众规则还是自己动手吧！\n推荐的外部规则开源项目：Loyalsoldier/clash-rules\n参照格式：\n...\r...\r# 规则提供商\rrule-providers:\r# 规则集的名字\rgoogle:\r# 对外部规则的访问方式\rtype: http\r# 朴素规则（无查询优化）\rbehavior: classical\r# 外部规则地址\rurl: \u0026quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt\u0026quot;\r# 规则文件存放路径\rpath: ./ruleset/google.yaml\r# 更新规则间隔时间（秒）\rinterval: 86400\r# 规则\rrules:\r...\r...\r# 使用外部规则，中间填规则集的名字\r- RULE-SET,google,奇异之旅\r# 境内站点\r- GEOIP,CN,直连\r# 境外站点\r- MATCH,奇异之旅\r  如果对 behavior 这个参数有困惑，你可以参考以下这个 Issue：请问用rule-providers时behavior如何选择？ classical/ipcidr/domain 三者又有什么区别？\n 很可惜的是 OpenWrt 上的 Clash 暂时不支持 RULE-SET 规则，就不做具体演示了。 结束。\n","id":26,"section":"posts","summary":"1、定时更新机场节点 注意：定时更新机场节点配置中填入的链接，一定是要能被 Clash 正常读取的配置文件形式。 不仅是类似原生 SSR 等的订阅链接无法被 Clash 正常读","tags":["Clash"],"title":"Clash 学习（三）进阶配置：在 Clash 中定时更新机场节点和导入外部规则","uri":"https://senjianlu.com/2021/11/clash-note-03/","year":"2021"},{"content":"在路由器上的 Clash 中配置网易云音乐灰歌解锁的时候发现：UWP 版的网易云音乐请求指向的似乎不是 music.163.com 等域名（事实上走的是 music.163.com 域名，只是我 Clash 配置的有问题罢了😓），没法照抄网络上的 Clash 配置文件，求人不如求己还是自己抓包看下吧。\n 1、安装 Fiddler\n官方下载地址：Download Fiddler Classic\n然后安装：\n显示如上界面便说明安装成功了。\n2、基础配置\n这一步的配置非常基础，是几乎所有人都会进行修改的，主要是为了达到 2 个目的：\n 解密 HTTPS 流量（当然无法完全解密，但是起码看起来会更轻松了） 允许局域网内设备连接 Fiddler（安卓等移动设备抓包时会用到）  配置选项位置如下：\n① 设置解密 HTTPS 流量（可能会弹出 Windows 安装证书的确认框，同意即可）：\n忽略服务器证书的错误，这在服务器端配置了不可信证书时会生效，比如说域名绑定的是自签证书：\n② 配置代理端口并允许局域网内连接：\n之后移动端配置代理为你主机的 IP:8888，那么所有的流量就都会走 Fiddler 了。\n3、实践抓取 UWP 版网易云音乐的请求域名\n首先设置下网易云音乐使用 Fiddler 的端口作代理：\n拖动进程选择器到网易云音乐窗口，目的是只监听这一个进程的流量：\n清空：\n然后在网易云音乐执行一下操作，我这里执行的是搜索歌曲，一点按钮就能看到 Fiddler 抓取到发出的请求了：\n我这次只想知道 UWP 版网易云音乐是对哪个域名发出请求的，于是只要注意 Host 列即可：搜索音乐的使用的是 interface.music.163.com！\n当然这还不够，再试试其他操作：\n播放音乐走的是 *.music.126.net：\n视频走的是 *.vod.126.net：\n有一个奇怪的域名 clientlog.music.163.com，猜测是记录连接的日志用的，反正会被 *.music.163.com 通配符覆盖到，就不用管了。\n还有个网易云盾 ac.dun.163yun.com，想了想就不加进 Clash 配置里了：\n那么应该就差不多了，UWP 版的网易云音乐在 Clash 中的规则就是下面这样的：\n 具体的网易云灰歌教程可以参照这篇文章：CentOS7 下用 Docker 部署 UnblockNeteaseMusic 并在 Clash 中配置分流以在局域网内解锁网易云音乐变灰的歌曲\n不懂 Clash 的配置请去看这篇文章：Clash 学习（一）配置文件各项在实际使用中的用处和创建自己的第一个配置文件\n ...\r...\rrules:\r- DOMAIN-SUFFIX,music.163.com,网易云音乐\r- DOMAIN-SUFFIX,music.126.net,网易云音乐\r# 如果灰歌解锁服务器速度不行的话就不要代理视频了\r- DOMAIN-SUFFIX,vod.126.net,网易云音乐\r...\r...\r 结束。\n","id":27,"section":"posts","summary":"在路由器上的 Clash 中配置网易云音乐灰歌解锁的时候发现：UWP 版的网易云音乐请求指向的似乎不是 music.163.com 等域名（事实上走的是 music.163.com 域名，只是我 Clash 配置的有问题罢","tags":["Fiddler"],"title":"Fiddler 学习（一）安装、配置和尝试抓取 UWP 版网易云音乐的请求域名","uri":"https://senjianlu.com/2021/11/fiddler-note-01/","year":"2021"},{"content":"之前也是部署过这个项目的，但是后来嫌 PC 端和手机端的网易云音乐都要手动配置有点麻烦，于是就放弃了。\n现在在路由器上安装了 Clash，想到既然它能做指定域名的分流，那么应该也能指定网易云的流量走解锁用的服务器来达到灰歌解锁的功能吧（最后发现：只有在 Clash 为网关的情况下才可以实现无需任何多余配置的全客户端灰歌解锁，普通模式仍需配置 Clash 为 HTTP 代理），尝试一下！\n 1、服务器端的安装\n参考官方文档：UnblockNeteaseMusic，执行执行即可：\ndocker run --name unblock-netease-music --restart=always -d -p 18080:8080 nondanee/unblockneteasemusic -o kugou kuwo xiami migu\r  如果需要加代理认证功能可以使用如下命令：\ndocker run --name unblock-netease-music --restart=always -d -p 18080:8080 nondanee/unblockneteasemusic -o kugou kuwo xiami migu -t $your_username:$your_password\r 需要注意：Windows 端和 macOS 端认证功能无法生效，虽然能测试通过，但是无法播放歌曲且会报连接错误！如果要在这两个端使用，你必须使用 GOST 或 Clash 等工具将需要认证的代理转换为本地不需要认证的代理。\n 之后记得防火墙和安全组都开放指定端口。\n2、测试解锁是否生效\nPC 端的网易云代理设置方法如下：\n填入你的代理后点击测试：\n显示该代理可用，再来看看灰歌的解锁情况。\n这是配置前的截图：\n配置后：\n成功！\n3、在路由器的 Clash 插件上进行配置\n既然是在路由器上配置，那么该局域网内所有设备的网易云音乐都会自动解锁灰歌（需要 Clash 在网关模式下才能实现），比起在每个设备上都配置一遍代理来的方便的多。\n代码片段：\nproxies:\r# 无需认证\r- {name: 网易云音乐灰歌解锁节点, type: http, server: 63.225.10.10, port: 18080 }\r# 需要认证\r# - {name: 网易云音乐灰歌解锁节点, type: http, server: 63.225.10.10, port: 18080, username: your_username, password: your_password }\rproxy-groups:\r- name: 网易云音乐\rtype: select\rproxies:\r- 网易云音乐灰歌解锁节点\r# 多配置个直连以防不测\r- DIRECT\rrules:\r# 网易云音乐域名和 IP 段\r# UWP 版只使用以下两个即可\r- DOMAIN-SUFFIX,music.163.com,网易云音乐\r- DOMAIN-SUFFIX,music.126.net,网易云音乐\r# 为保险添加以下所有域名和 IP 段\r- DOMAIN-SUFFIX,163yun.com,网易云音乐\r- DOMAIN-SUFFIX,api.iplay.163.com,网易云音乐\r- DOMAIN-SUFFIX,apm.music.163.com,网易云音乐\r- DOMAIN-SUFFIX,apm3.music.163.com,网易云音乐\r- DOMAIN-SUFFIX,interface.music.163.com,网易云音乐\r- DOMAIN-SUFFIX,interface3.music.163.com,网易云音乐\r- DOMAIN-SUFFIX,mam.netease.com,网易云音乐\r- DOMAIN-SUFFIX,hz.netease.com,网易云音乐\r- IP-CIDR,39.105.63.80/32,网易云音乐\r- IP-CIDR,45.254.48.1/32,网易云音乐\r- IP-CIDR,47.100.127.239/32,网易云音乐\r- IP-CIDR,59.111.21.14/31,网易云音乐\r- IP-CIDR,59.111.179.214/32,网易云音乐\r- IP-CIDR,59.111.181.38/32,网易云音乐\r- IP-CIDR,59.111.181.60/32,网易云音乐\r- IP-CIDR,59.111.160.195/32,网易云音乐\r- IP-CIDR,59.111.160.197/32,网易云音乐\r- IP-CIDR,59.111.181.35/32,网易云音乐\r- IP-CIDR,59.111.238.29/32,网易云音乐\r- IP-CIDR,101.71.154.241/32,网易云音乐\r- IP-CIDR,103.126.92.132/32,网易云音乐\r- IP-CIDR,103.126.92.133/32,网易云音乐\r- IP-CIDR,112.13.119.17/32,网易云音乐\r- IP-CIDR,112.13.122.1/32,网易云音乐\r- IP-CIDR,115.236.118.33/32,网易云音乐\r- IP-CIDR,115.236.121.1/32,网易云音乐\r- IP-CIDR,118.24.63.156/32,网易云音乐\r- IP-CIDR,193.112.159.225/32,网易云音乐\r- IP-CIDR,223.252.199.66/32,网易云音乐\r- IP-CIDR,223.252.199.67/32,网易云音乐\r  抓包步骤可以参考这篇文章：Fiddler 学习（一）安装、配置和尝试抓取 UWP 版网易云音乐的请求域名\n 后话（在我发现路由器端的 Clash 插件并没有那么万能的情况下做的补充）：如果你已经将 Clash 设置为网关，实现了透明代理的话，那么 Windows 和安卓端都不再需要配置代理了，直接使用即可：\n但如果你和我一样只是在路由器上安装了 Clash，并没有实现透明代理，那么你仍需要将网易云音乐的代理手动指向路由器上 Clash：\n 错误排查用：\n① Clash 日志中可以看到网易云音乐流量的走向，如果发现明明在网易云音乐客户端进行了操作，Clash 却没捕捉到流量，说明你 Clash 并非透明代理模式。你需要将路由器上的 Clash 设置为允许局域网内设备访问，并手动在网易云音乐中配置其 HTTP 端口，就和我上面演示的一样。\n② 歌曲是否成功解锁了？你可以通过在服务器上执行以下命令，查看 Docker 容器内的日志来确定：\ndocker logs unblock-netease-music\r  结束。\n","id":28,"section":"posts","summary":"之前也是部署过这个项目的，但是后来嫌 PC 端和手机端的网易云音乐都要手动配置有点麻烦，于是就放弃了。 现在在路由器上安装了 Clash，想到既然它能","tags":["Docker"],"title":"CentOS7 下用 Docker 部署 UnblockNeteaseMusic 并在 Clash 中配置分流以在局域网内解锁网易云音乐变灰的歌曲","uri":"https://senjianlu.com/2021/11/centos7-docker-unblock-netease-music/","year":"2021"},{"content":"只描述对节点订阅信息的解码和在 Clash 中的配置方法。\n 1、HTTP 协议的节点\n 服务器端安装脚本：CentOS7 下一键安装 GOST 并启动 HTTP 和 SOCKS5 代理服务\ncurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20下一键安装%20GOST%20并启动%20HTTP%20和%20SOCKS5%20代理服务/install.sh | bash -s $proxy_port $proxy_username $proxy_password\r  官方配置文件模板中的代码片段：\nproxies:\r# http\r- name: \u0026quot;http\u0026quot;\rtype: http\rserver: server\rport: 443\r# username: username\r# password: password\r# tls: true # https\r# skip-cert-verify: true\r# sni: custom.com\r HTTP 节点代理的配置应该算是最基础也最好理解的了，但还是列张表格将以下，也为后面几章复杂节点的配置解析做铺：    参数名 解析 样例     name 自定义。该节点的名称，也是主键，后续在代理组中通过这个属性来选定该节点。 myhttp   type 可选 http、socks5、ss、ssr、vmess 和 trojan。节点的协议。 http   server 节点所在服务器的 IP 或解析的域名。 http.proxy.com   port 节点所在服务器上，代理服务所在的端口。 443   username 【选填】用户名。用以代理认证用。 myusername   password 【选填】用户密码。用以代理认证用。 mypassword   tls 【选填】可选 true 或 false。是否开启 HTTPS，开启的话需要服务器配置 SSL 证书。 false   skip-cert-verify 【选填】可选 true 或 false。是否跳过对 SSL 证书的认证，自签证书等不被信任因此一般选 true。 true   sni 【选填】一般填 server 的域名即可。面对一台服务器上有多个 SSL 证书的时候需要用到 sni 来辨别使用哪个。 http.proxy.com    举个最简单的例子，当我在某宝买到了有效期为 1 个与的 HTTP 代理时，卖家发给我的格式是这样的：\nhttp://99999:22222@63.225.10.10:20800\r 那我该怎么填？很简单先解析，HTTP 代理和 SOCKS5 代理都是一个格式：\n协议://用户名:用户密码@服务器 IP 或域名:端口\r 于是在 Clash 中这样配置就好了：\nproxies:\r# http\r- name: \u0026quot;淘宝购买的节点 01\u0026quot;\rtype: http\rserver: 63.225.10.10\rport: 20800\rusername: 99999\rpassword: 22222\r# tls: true # https\r# skip-cert-verify: true\r# sni: custom.com\r 简单吧，当然了这是最基础的代理配置，它的功能同样简单甚至可以说是简陋，内容不会经过混淆加密，任何人截取到了通过这个代理的请求就能知道你在做什么，SOCKS5 也一样，无法确保安全性。因此使用 HTTP 和 SOCKS5 代理前请慎重考虑自己的数据是否重要！\n2、SOCKS5 协议的节点\n官方配置文件模板中的代码片段：\nproxies:\r# socks5\r- name: \u0026quot;socks\u0026quot;\rtype: socks5\rserver: server\rport: 443\r# username: username\r# password: password\r# tls: true\r# skip-cert-verify: true\r# udp: true\r 和 HTTP 代理的参数一致，不再赘述配置方法。\n结束。\n","id":29,"section":"posts","summary":"只描述对节点订阅信息的解码和在 Clash 中的配置方法。 1、HTTP 协议的节点 服务器端安装脚本：CentOS7 下一键安装 GOST 并启动 HTTP 和 SOCKS5 代理服务 curl -s ht","tags":["Clash"],"title":"Clash 学习（四）在 Clash 中配置使用 HTTP 协议或 SOCKS5 协议的节点","uri":"https://senjianlu.com/2021/11/clash-note-04/","year":"2021"},{"content":"苦 JSONB 久矣。\n  介绍下实验用表 item 的表结构：\n   名 类型 长度 小数点 不是 null 键 注释     id int4 32 0 √ 🔑 商品 ID   name varchar 255 0   商品名   property jsonb 0 0   属性    表中数据：    id name property     1 毛巾 {\u0026ldquo;price\u0026rdquo;: 5.88, \u0026ldquo;num\u0026rdquo;: 20, \u0026ldquo;type\u0026rdquo;: \u0026ldquo;厨卫\u0026rdquo;, \u0026ldquo;discount\u0026rdquo;: false}   2 饼干 {\u0026ldquo;price\u0026rdquo;: 3.00, \u0026ldquo;num\u0026rdquo;: 55, \u0026ldquo;type\u0026rdquo;: \u0026ldquo;食品\u0026rdquo;, \u0026ldquo;discount\u0026rdquo;: true}    注：当然实际开发中绝对不会把价格等信息写在 JSONB 中，这里的结构和数据仅作测试用。\n 然后考虑了一下介绍各操作的顺序，对于 JSON 类型，增加、删除、修改、查看的顺序居然意外的合理，那就按这个顺序来吧。\n1、增加操作\n① 为 JSONB 类型数据新增键值对的操作符为 ||，即双竖杠。\n具体操作：\nUPDATE item SET property = property::JSONB || '{\u0026quot;discount_percent\u0026quot;: \u0026quot;90%\u0026quot;}'::JSONB WHERE id = 2;\r 这里为饼干新增了具体折扣数值这个属性，双冒号 :: 起到了类型转换的作用。\n    id name property     2 饼干 {\u0026ldquo;num\u0026rdquo;: 55, \u0026ldquo;type\u0026rdquo;: \u0026ldquo;食品\u0026rdquo;, \u0026ldquo;price\u0026rdquo;: 3.00, \u0026ldquo;discount\u0026rdquo;: true, \u0026ldquo;discount_percent\u0026rdquo;: \u0026ldquo;90%\u0026quot;}     ② 使用 jsonb_insert 这个函数。\n官方对这个函数的介绍：\njsonb_insert(target jsonb, path text[], new_value jsonb [, insert_after boolean])\r 第一个参数 target 为需要插入新属性的 JSONB 类型的对象；\n第二个参数 path 为路径，列表类型，用 [] 或 {} 包裹元素都可以，键一般就写在这个列表的最后一位；\n第三个参数 new_value 就是该键值对的值了；\n第四个参数是个可选参数 insert_after，用以判断是将值插在指定位置之前还是之后，这个在路径最后一位为索引而非键的情况下常用，默认为 false。\n具体操作：\n-- 新建键值对\rUPDATE item SET property = jsonb_insert(property, '{oriented}', '[\u0026quot;老人\u0026quot;, \u0026quot;小孩\u0026quot;]'::JSONB, false) WHERE id = 1;\r-- 为键值对的值做添加，添加在索引 1 的元素后面，即最终顺序为：[\u0026quot;老人\u0026quot;, \u0026quot;小孩\u0026quot;, \u0026quot;青年\u0026quot;]\rUPDATE item SET property = jsonb_insert(property, '{oriented, 1}', '\u0026quot;青年\u0026quot;'::JSONB, true) WHERE id = 1;\r-- 由于 jsonb_insert 无法自动设置父节点，因此在创建 country 下的 city 属性时，首先得确保 country 属性存在！\rUPDATE item SET property = jsonb_insert(property, '{country}', '{\u0026quot;country\u0026quot;: \u0026quot;China\u0026quot;}'::JSONB, false) WHERE id = 1;\rUPDATE item SET property = jsonb_insert(property, '{from, city}', '\u0026quot;Changzhou\u0026quot;'::JSONB, false) WHERE id = 1;\r     id name property     1 毛巾 {\u0026ldquo;num\u0026rdquo;: 20, \u0026ldquo;from\u0026rdquo;: {\u0026ldquo;city\u0026rdquo;: \u0026ldquo;Changzhou\u0026rdquo;, \u0026ldquo;country\u0026rdquo;: \u0026ldquo;China\u0026rdquo;}, \u0026ldquo;type\u0026rdquo;: \u0026ldquo;厨卫\u0026rdquo;, \u0026ldquo;price\u0026rdquo;: 5.88, \u0026ldquo;discount\u0026rdquo;: false, \u0026ldquo;oriented\u0026rdquo;: [\u0026ldquo;老人\u0026rdquo;, \u0026ldquo;小孩\u0026rdquo;, \u0026ldquo;青年\u0026rdquo;]}     2、删除操作\n删除的操作符为 -，即减号。\n具体操作：\n-- 单个属性\rUPDATE item SET property = property::JSONB - 'discount_percent' WHERE id = 2;\r-- 多个属性\rUPDATE item SET property = property::JSONB - '{\u0026quot;discount\u0026quot;, \u0026quot;type\u0026quot;}'::text[] WHERE id = 1;\r     id name property     1 毛巾 {\u0026ldquo;num\u0026rdquo;: 20, \u0026ldquo;from\u0026rdquo;: {\u0026ldquo;city\u0026rdquo;: \u0026ldquo;Changzhou\u0026rdquo;, \u0026ldquo;country\u0026rdquo;: \u0026ldquo;China\u0026rdquo;}, \u0026ldquo;price\u0026rdquo;: 5.88, \u0026ldquo;country\u0026rdquo;: {\u0026ldquo;country\u0026rdquo;: \u0026ldquo;China\u0026rdquo;}, \u0026ldquo;oriented\u0026rdquo;: [\u0026ldquo;老人\u0026rdquo;, \u0026ldquo;小孩\u0026rdquo;, \u0026ldquo;青年\u0026rdquo;]}   2 饼干 {\u0026ldquo;num\u0026rdquo;: 55, \u0026ldquo;type\u0026rdquo;: \u0026ldquo;食品\u0026rdquo;, \u0026ldquo;price\u0026rdquo;: 3.00, \u0026ldquo;discount\u0026rdquo;: true}     3、更新操作\n使用 jsonb_set 这个函数。\n官方对这个函数的介绍：\njsonb_set(target jsonb, path text[], new_value jsonb[, create_missing boolean])\r 第一个参数 target 为需要修改的 JSONB 类型的对象；\n第二个参数 path 为路径，列表类型，用 [] 或 {} 包裹元素都可以，键一般就写在这个列表的最后一位；\n第三个参数 new_value 就是该键值对的值了；\n第四个参数是个可选参数 create_missing，是否在没有该值时创建，由此你也知道了 jsonb_set 在插入操作时也可使用，默认为 true。\n具体操作：\n-- 插入新值\rUPDATE item SET property = jsonb_set(property, '{discount_percent}', '\u0026quot;100%\u0026quot;'::JSONB, true) WHERE id = 1;\r-- 修改旧值\rUPDATE item SET property = jsonb_set(property, '{price}', '4.88'::JSONB, false) WHERE id = 1; -- 对更深层的值进行修改\rUPDATE item SET property = jsonb_set(property, '{\u0026quot;from\u0026quot;, \u0026quot;city\u0026quot;}', '\u0026quot;Suzhou\u0026quot;'::JSONB, false) WHERE id = 1; -- 用一个新的 JSONB 类型数据来更新表中的字段，重复的键会使用新的数据，不重复的键值对会被添加（这里是添加符号 || 的另一种用法）\rUPDATE item SET property = property || '{\u0026quot;num\u0026quot;: 108, \u0026quot;sell_num\u0026quot;: 1}'::JSONB WHERE id = 1;\r     id name property     1 毛巾 {\u0026ldquo;num\u0026rdquo;: 108, \u0026ldquo;sell_num\u0026rdquo;: 1, \u0026ldquo;from\u0026rdquo;: {\u0026ldquo;city\u0026rdquo;: \u0026ldquo;Suzhou\u0026rdquo;, \u0026ldquo;country\u0026rdquo;: \u0026ldquo;China\u0026rdquo;}, \u0026ldquo;price\u0026rdquo;: 4.88, \u0026ldquo;oriented\u0026rdquo;: [\u0026ldquo;老人\u0026rdquo;, \u0026ldquo;小孩\u0026rdquo;, \u0026ldquo;青年\u0026rdquo;], \u0026ldquo;discount_percent\u0026rdquo;: \u0026ldquo;100%\u0026quot;}     4、查找操作\n查找作为最基础的操作，可写的也最多，几乎所有能返回 Boolean 的函数都能作为查找条件，这里就只写几个我最常用的例子吧！\n① 查找出存在这个属性的数据：\n-- 包含指定属性\rSELECT * FROM item WHERE property::JSONB ? 'from';\r-- 只需包含列表中的任意属性\rSELECT * FROM item WHERE property::JSONB ?| array['discount_percent', 'discount'];\r-- 需要包含列表中的所有属性\rSELECT * FROM item WHERE property::JSONB ?\u0026amp; array['discount_percent', 'discount'];\r ② 查找某属性值符合条件的数据：\n-- 某属性等于某个值\rSELECT * FROM item WHERE property::JSONB @\u0026gt; '{\u0026quot;discount\u0026quot;: true}'::JSONB;\r-- 更深层的属性相等\rSELECT * FROM item WHERE property::JSONB @\u0026gt; '{\u0026quot;from\u0026quot;: {\u0026quot;country\u0026quot;: \u0026quot;China\u0026quot;}}'::JSONB;\r-- 大于某个值\rSELECT * FROM item WHERE (property::JSONB -\u0026gt;\u0026gt; 'price')::NUMERIC \u0026gt;= 4;\r-- 更深层的值大于\rSELECT * FROM item WHERE (property::JSONB #\u0026gt;\u0026gt; '{\u0026quot;from\u0026quot;, \u0026quot;zip_code\u0026quot;}')::INT \u0026gt;= 213000;\r-- 列表包含（属于列表类型操作）\rSELECT * FROM item WHERE property::JSONB -\u0026gt; 'oriented' @\u0026gt; '\u0026quot;老人\u0026quot;';\r 如果上面这些操作无法满足你，那么请前往官方文档：JSON Functions and Operators 继续学习。\n结束。\n","id":30,"section":"posts","summary":"苦 JSONB 久矣。 介绍下实验用表 item 的表结构： 名 类型 长度 小数点 不是 null 键 注释 id int4 32 0 √ 🔑 商品 ID name varchar 255 0 商品名 property jsonb 0 0 属性 表中数据： id name property 1 毛巾 {\u0026ldquo;price\u0026rdquo;: 5.88, \u0026ldquo;num\u0026rdquo;: 20, \u0026ldquo;type\u0026rdquo;:","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记（六）对 JSONB 类型字段的增删改查操作","uri":"https://senjianlu.com/2021/11/postgresql-note-06/","year":"2021"},{"content":"在没套 Cloudflare 之前有在 Nginx 中配置 HTTP 访问 301 重定向到 HTTPS 的习惯，但是在套了 CF 之后常常出现 301 重定向次数过多的情况，不明白原理地瞎调试走了很多弯路，重新实践一遍并整理为笔记方便自己回顾。\n 这里就以各模式作为区分，总共 4 种模式就分为 4 个小章节。\n注意：这四种模式仅在开启了 Cloudflare 的 CDN 后才有效，仅把 Cloudflare 作 DNS 使用时以下加密模式均不会生效！ 1、模式：关闭（不安全）\n这个模式会将所有用户对你站点的 HTTPS 请求重定向到 HTTP，官方描述：\n Setting your encryption mode to Off (not recommended) redirects any HTTPS request to plaintext HTTP.\n 优点：没有\n缺点：\n 容易遭受到中间人攻击 Chrome 等浏览器会显示该网站不安全 影响搜索引擎收录   实践：\n① HTTP 访问（未在 Nginx 配置中开启 HTTP 访问重定向到 HTTPS）：\n② HTTPS 访问（未在 Nginx 配置中开启 HTTP 访问重定向到 HTTPS）：\n注：这里我已经手动改为 https://ssl.ceshiku.cn 但是被重定向回了 HTTP。\n③ HTTP 访问（已经在 Nginx 配置了 HTTP 访问重定向到 HTTPS）：\n注：循环重定向了，比较好理解：HTTP 访问到 Nginx 被重定向到了 HTTPS，HTTPS 到 Cloudflare 又被重定向到了 HTTP，循环往复\u0026hellip;\u0026hellip;\n④ HTTPS 访问（已经在 Nginx 配置了 HTTP 访问重定向到 HTTPS）：\n注：同 HTTP 访问一样循环重定向。\n 2、模式：灵活\n这个灵活并不是指 Cloudflare 会自动辨别对源站使用 HTTP 或 HTTPS 访问，而是指：用户到 Cloudflare 的访问是强制 HTTPS 加密的，证书由 Cloudflare 提供；而 Cloudflare 到源服务器的访问是强制 HTTP 的，因此源站不需要配置证书。\n我觉得翻译为半程加密会更合理一些，官方描述：\n Setting your encryption mode to Flexible makes your site partially secure. Cloudflare enforces HTTPS between your visitor and Cloudflare, but all connections between Cloudflare and your origin are made through HTTP. As a result, an SSL certificate is not required on your origin.\n 优点：\n 简单，源站不需要配置 HTTPS 证书  缺点：\n 在 Cloudflare 到源站中仍存在中间人攻击的风险   实践：\n① HTTP 访问（未在 Nginx 配置中开启 HTTP 访问重定向到 HTTPS）：\n注：成功变成了 HTTPS 访问，证书是 Cloudflare 提供的。\n② HTTPS 访问（未在 Nginx 配置中开启 HTTP 访问重定向到 HTTPS）：\n注：源站配置了证书但未使用。\n③ HTTP 访问（已经在 Nginx 配置了 HTTP 访问重定向到 HTTPS）：\n注：循环重定向：Cloudflare 到源站的 HTTP 请求被 Nginx 重定向到了 HTTPS，接着 HTTPS 请求经过 Cloudflare 又变回了对源站的 HTTP 请求\u0026hellip;\u0026hellip;\n④ HTTPS 访问（已经在 Nginx 配置了 HTTP 访问重定向到 HTTPS）：\n注：同 HTTP 访问一样循环重定向。\n 3、模式：完全\n全程加密但不完全：如果用户发出的是 HTTP 请求，那么用户到 Cloudflare 和 Cloudflare 到源站均会使用 HTTP 协议；如果用户发出的是 HTTPS 请求，那么用户到 Cloudflare 会使用 Cloudflare 提供的证书进行加密，而 Cloudflare 到源站会使用源站的证书进行加密。\n官方描述：\n When you set your encryption mode to Full, Cloudflare enforces HTTPS between your visitor and Cloudflare and makes connections to the origin using the scheme requested by the visitor. If your visitor uses http, then Cloudflare connects to the origin using plaintext HTTP and vice versa.\n 优点：\n 使用此模式可以兼容 Nginx 配置 HTTP 重定向到 HTTPS 源站可以使用自签证书  缺点：\n 在 Cloudflare 到源站中仍存在中间人攻击的风险（包括通过证书劫持和伪造等方式，不同于严格模式，Cloudflare 不会对源站的证书进行审核）   实践：\n① HTTP 访问（未在 Nginx 配置中开启 HTTP 访问重定向到 HTTPS）：\n② HTTPS 访问（未在 Nginx 配置中开启 HTTP 访问重定向到 HTTPS）：\n注：源站配置了证书，但在浏览器端显示的是用户和 Cloudflare 之间加密所用的证书。\n③ HTTP 访问（已经在 Nginx 配置了 HTTP 访问重定向到 HTTPS）：\n注：跳转到了 HTTPS。\n④ HTTPS 访问（已经在 Nginx 配置了 HTTP 访问重定向到 HTTPS）：\n 4、模式：完全（严格）\n和完全模式实现的功能一样，但是新增了对证书的认证：源站如果配置了自签证书、非可信证书或过期证书，那么 Cloudflare 会回复客户端访问失败并返回526 响应代码。\n官方描述：\n When you set your encryption mode to Full (strict), Cloudflare does everything in Full mode but also enforces more stringent requirements for origin certificates.\n 优点：\n 使用此模式可以兼容 Nginx 配置 HTTP 重定向到 HTTPS 安全，只要用户使用 HTTPS 访问可以完全杜绝中间人攻击  缺点：\n 四种模式中工作量最大，需要维护服务器端的证书   实践结果和第 3 种模式完全一样，不放上来了。\n 5、总结\n① 如果你还在困惑该选哪种模式，我帮你整理了常用需求对应的模式，请参照：\n② 还有需要注意的会出现 301 重定向次数过多的 2 种情况：\n 关闭模式下在 Nginx 开启了强制重定向（HTTPS -(Cloudflare)-\u0026gt; HTTP -(Nginx)-\u0026gt; HTTPS -(Cloudflare)-\u0026gt; HTTP\u0026hellip;\u0026hellip;） 灵活模式下在 Nginx 开启了强制重定向（HTTP -(Cloudflare)-\u0026gt; HTTP -(Nginx)-\u0026gt; HTTPS -(Cloudflare)-\u0026gt; HTTP\u0026hellip;\u0026hellip;）  ③ 最后放上完全和完全（严格）模式下可以参考的 Nginx 配置：\n...\r...\rserver {\rlisten 80;\rlisten [::]:80;\rserver_name _;\rroot /usr/share/nginx/html;\rinclude /etc/nginx/default.d/*.conf;\r# 证书申请用\rlocation ~ /.well-known {\rroot /usr/share/nginx;\rallow all;\r}\r# 强制重定向到 HTTPS\rlocation / {\rreturn 301 https://$host$request_uri;\r}\r}\rserver {\rlisten 443 ssl;\rserver_name _;\rroot /usr/share/nginx/html;\r# SSL 配置\rssl_certificate /etc/letsencrypt/live/ssl.ceshiku.cn/fullchain.pem;\rssl_certificate_key /etc/letsencrypt/live/ssl.ceshiku.cn/privkey.pem;\rssl_protocols TLSv1 TLSv1.1 TLSv1.2;\rssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\r# 以下填你的反代等配置\r...\r...\r}\r...\r...\r 结束。\n","id":31,"section":"posts","summary":"在没套 Cloudflare 之前有在 Nginx 中配置 HTTP 访问 301 重定向到 HTTPS 的习惯，但是在套了 CF 之后常常出现 301 重定向次数过多的情况，不明白原理地瞎调试走了很多弯路，重新实践一","tags":["网站建设"],"title":"Cloudflare 四种 SSL/TLS 加密模式的功能解析及实践","uri":"https://senjianlu.com/2021/11/cloudflare-ssl-tls/","year":"2021"},{"content":"维基主机家 CN2 虚拟空间上的 Nextcloud 管理员密码忘了，并且因为当初没有配置邮箱信息，导致没法收到重置密码邮件，反正也没啥重要文件索性重装下，以此记录下流程。\n 注：所有安装流程截图均以 Plesk 为例，不同虚拟主机请自行探索实际操作方法。\n1、下载 Nextcloud 安装包\n官方下载地址：Download for server\n选择 Web Installer：\n接着上传到虚拟主机空间内，放在对应域名文件夹的根目录下即可：\n2、配置域名解析和为安装清空至少 500MB 空间\n域名解析自行配置。\n安装需要至少 500MB 空间，云服务商的空间监控一般是不包括垃圾站内文件的，但是实际垃圾站内容量也会算进虚拟空间总限制容量内，因此也请清空。\n 像下图一样的情况实际上就是安装失败，日志内容大概为：\nWarning: ZipArchive::extractTo(): Invalid or uninitialized Zip object in /var/www/vhosts/.../.../setup-nextcloud.php on line 156 Warning: ZipArchive::close(): Invalid or uninitialized Zip object in /var/www/vhosts/.../.../setup-nextcloud.php on line 157 Warning: scandir(tmp-nextcloud1635676707/nextcloud): failed to open dir: No such file or directory in /var/www/vhosts/.../.../setup-nextcloud.php on line 161 Warning: scandir(): (errno 2): No such file or directory in /var/www/vhosts/.../.../setup-nextcloud.php on line 161 Warning: array_diff(): Expected parameter 1 to be an array, bool given in /var/www/vhosts/.../.../setup-nextcloud.php on line 161 Warning: Invalid argument supplied for foreach() in /var/www/vhosts/.../.../setup-nextcloud.php on line 161 Warning: rmdir(tmp-nextcloud1635676707/nextcloud): No such file or directory in /var/www/vhosts/.../.../setup-nextcloud.php on line 164  三个原因都有可能造成失败：\n 空间不够。 与安装界面断连导致程序异常出错，这在使用境外虚拟空间安装时很常见。 部分文件下载出错，主要以下面几个文件为主：     文件 路径 下载地址     nc.zip . https://download.nextcloud.com/server/releases/latest.zip    因此请提前清理好空间并准备好代理。当然对以上文件，你可以提前下载了放在目录下（目录 . 意为 setup-nextcloud.php 所在目录）。\n 3、开始安装\n访问：你的域名 + /setup-nextcloud.php\n选择 Next：\n选择目录，我这里选了 . 即为安装在当前 pan.cscheap.com/ 目录下：\n安装成功：\n配置管理员账户密码并使用 SQLite：\n完成！\n 当然你也可以使用外置的数据库，我不使用的原因是这家的数据库容易出现断连，导致安装不断卡在管理员账号配置阶段。\nPlesk 新建数据库方式如下：\n输入数据库名后缀、用户名后缀和密码：\n创建成功后前往 Nextcloud 管理员配置界面选择外置数据库即可：\n 最后提醒虚拟空间的网盘请定时压缩备份到本地，这是维基主机 2021 年 6 月份出的事故，补偿虽然蛮到位的，但是数据对某些人是无价的：\n结束。\n","id":32,"section":"posts","summary":"维基主机家 CN2 虚拟空间上的 Nextcloud 管理员密码忘了，并且因为当初没有配置邮箱信息，导致没法收到重置密码邮件，反正也没啥重要文件索性重装下，以此记录下流","tags":["网站建设"],"title":"Plesk（虚拟主机空间）下安装 Nextcloud 网盘系统","uri":"https://senjianlu.com/2021/10/plesk-install-nextcloud/","year":"2021"},{"content":"部分境外代理用的服务器连入 Zabbix 实在是太吃资源了，过高的延迟也使得连接一直中断，考虑了一下决定将边缘业务用的服务器全抽离出来，单独用哪吒监控做管理。\n 1、首先注册一个新的 GitHub 应用\n哪吒监控管理员后台的登录认证使用的是 GitHub OAuth，即：将认证步骤交给 GitHub，面板只负责接收回调并判断是否是本人。\n注册新的应用：\n回调地址在域名基础上加上 /oauth2/callback 即可：\n接着创建一下私钥：\n将 Client ID 和新建的 Client secret 都保存一下，Client secret 之后就再也不会完整出现了！  注：OAuth 不同于部分应用对你 GitHub 账号的绑定，OAuth 是不会像下面的图一样向你请求仓库的权限的:\n它只会需要一些个人公开信息（第 2 步面板端安装结束后有截图），因此使用上可以放心。\n更多详情请参照：授权 OAuth 应用程序\n 2、安装面板端（相当于 Zabbix 的 server + nginx 端）\n参照官方文档，执行：\ncurl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh \u0026amp;\u0026amp; chmod +x nezha.sh\rsudo ./nezha.sh\r  境内服务器安装使用加速源：\ncurl -L https://cdn.jsdelivr.net/gh/naiba/nezha@master/script/install.sh -o nezha.sh \u0026amp;\u0026amp; chmod +x nezha.sh\rsudo ./nezha.sh\r 依旧无法下载脚本或端安装文件的情况下，请使用临时代理（代理请自行准备，关闭连接后此配置会失效）：\nexport http_proxy=socks5://99999:22222@63.225.10.10:20800\r  选择安装面板端：\n期间需要安装 Docker，之后以此输入 Client ID、Client Secret 和 GitHub 用户名和站点标题即可，端口用默认的就行：\n别忘了开放防火墙和安全组，之后启动面板即可：\n 如果你和我一样是使用 Certbot 申请免费的 Let\u0026rsquo;s encrypt 证书，且使用的是在网站目录下放验证文件的方法，那么可以直接参考我的 Nginx 配置：\n...\r...\rserver {\rlisten 80;\rserver_name status.example.com;\r# Let's Encrypt 证书认证\rlocation ~ /.well-known {\rroot /usr/share/nginx;\rallow all;\r}\r# 非强制跳转 HTTPS\rlocation / {\r# 套 CDN 重定向次数过多则放开 301 跳转\rproxy_pass http://localhost:8008;\rproxy_set_header Host $host;\r# 不套 CDN 时 301 跳转 HTTPS\r# return 301 https://$host$request_uri;\r}\r}\rserver {\rlisten 443 ssl;\rserver_name status.example.com;\r# SSL 配置\rssl_certificate /etc/letsencrypt/live/status.example.com/fullchain.pem;\rssl_certificate_key /etc/letsencrypt/live/status.example.com/privkey.pem;\rssl_protocols TLSv1 TLSv1.1 TLSv1.2;\rssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\rlocation / {\rproxy_pass http://localhost:8008;\rproxy_set_header Host $host;\r}\rlocation /ws {\rproxy_pass http://127.0.0.1:8008;\rproxy_http_version 1.1;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection \u0026quot;Upgrade\u0026quot;;\rproxy_set_header Host $host;\r}\rlocation /terminal {\rproxy_pass http://127.0.0.1:8008;\rproxy_http_version 1.1;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection \u0026quot;Upgrade\u0026quot;;\rproxy_set_header Host $host;\r}\r}\r...\r...\r  前往页面授权登录即可：\n3、安装被监控端（即 Zabbix agent 端）\n首先在管理面板新建被监控服务器：\n获取密钥留用：\n接着前往被监控服务器，执行的命令和面板端的一样：\ncurl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh \u0026amp;\u0026amp; chmod +x nezha.sh\rsudo ./nezha.sh\r 这里的域名可以直接输入监控端的外网 IP 而不一定要是域名，反正不是套 CDN 就行了：\n回到页面上，就能看到服务器数据了：\n结束。\n","id":33,"section":"posts","summary":"部分境外代理用的服务器连入 Zabbix 实在是太吃资源了，过高的延迟也使得连接一直中断，考虑了一下决定将边缘业务用的服务器全抽离出来，单独用哪吒监控做管","tags":["Linux"],"title":"CentOS7 下哪吒监控面板的搭建的监控端的安装","uri":"https://senjianlu.com/2021/10/centos7-nezha-monitor/","year":"2021"},{"content":"在和舍友交流之后才发现拿 JSONB 存储历史价格信息的我可能是个天才吧\u0026hellip;\u0026hellip;\n回去检查了一下 PostgreSQL 中的对应字段，果然达到了 65535 字节的最大限制，赶紧着手迁移数据。\n 选 MongoDB 最主要的原因是它的一个集合（与 PostgreSQL 中的表同概念）可以被当作一个队列，无限制的插入 JSON 格式的数据，放下图方便理解：\n这对存储未知长度的历史价格数据真的很友好，并且根据日期建立索引后，查询的速度也会很快。\n 话不多说开始安装，官方文档：Install MongoDB Community Edition on Red Hat or CentOS\n1、配置 repo 仓库为 Yum 安装提供源\n创建 mongodb-org-5.0.repo：\nvi /etc/yum.repos.d/mongodb-org-5.0.repo\r 内容：\n[mongodb-org-5.0]\rname=MongoDB Repository\rbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64/\rgpgcheck=1\renabled=1\rgpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc\r 2、使用 Yum 进行安装\n执行：\nsudo yum install -y mongodb-org\r 安装完成会输出如下信息：\n 你也可以使用以下命令验证是否安装成功：\nrpm -qa |grep mongodb\rrpm -ql mongodb-org-server\r  3、启动 MongoDB\n启动：\nsystemctl start mongod.service\r 看下数据库进程是否启动成功了：\nps -ef|grep mongod\r 4、配置管理员密码\n进入数据库中：\n# 进入数据库中\rmongo\r 修改 root 用户的密码：\n# 切换到 admin 数据库中\r\u0026gt; use admin\rswitched to db admin\r\u0026gt; db.createUser({user:\u0026quot;root\u0026quot;, pwd:\u0026quot;mypassword\u0026quot;, roles:[\u0026quot;root\u0026quot;] })\rSuccessfully added user: { \u0026quot;user\u0026quot; : \u0026quot;root\u0026quot;, \u0026quot;roles\u0026quot; : [ \u0026quot;root\u0026quot; ] }\r 编辑 mongodb.conf 使登录需要验证身份：\nvi /etc/mongod.conf\r 修改如下内容：\n...\r...\r# 解除注释\rsecurity:\r# 新增这一行\rauthorization: \u0026quot;enabled\u0026quot; # disable or enabled\r...\r...\r 重启下数据库：\nsudo service mongod restart   如果你想验证是否已经开启了密码验证，首先 mongo 进入数据库，接着：\n# 切换到 admin 数据库\r\u0026gt; use admin\rswitched to db admin\r# 新建 test_collection 集合\r\u0026gt; db.createCollection(\u0026quot;test_collection\u0026quot;)\r# 因为没有认证所以失败\r{\r\u0026quot;ok\u0026quot; : 0,\r\u0026quot;errmsg\u0026quot; : \u0026quot;command create requires authentication\u0026quot;,\r\u0026quot;code\u0026quot; : 13,\r\u0026quot;codeName\u0026quot; : \u0026quot;Unauthorized\u0026quot;\r}\r# 登录\r\u0026gt; db.auth(\u0026quot;root\u0026quot;, \u0026quot;mypassword\u0026quot;)\r1\r\u0026gt; db.createCollection(\u0026quot;test_collection\u0026quot;)\r# 这次创建 test_collection 集合就成功了\r{ \u0026quot;ok\u0026quot; : 1 }\r  关于 MongoDB 详细的权限管理可以参考我的这篇文章：MongoDB 学习笔记（三） MongoDB 权限管理及实践\n5、配置远程访问\n编辑配置文件：\nvi /etc/mongod.conf\r 默认 bindIp 为 127.0.0.1，即只允许本地连接，修改为 0.0.0.0 即可：\n...\r...\r# network interfaces\rnet:\rport: 27017\rbindIp: 0.0.0.0 # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.\r...\r...\r 之后重启数据库：\nsudo service mongod restart  别忘了开发防火墙和云服务器厂商安全组。\n 远程连接方法：\nmongo $mongodb_host:27017/$database -u $username -p $password\r  本章结束。\n","id":34,"section":"posts","summary":"在和舍友交流之后才发现拿 JSONB 存储历史价格信息的我可能是个天才吧\u0026hellip;\u0026hellip; 回去检查了一下 PostgreSQL 中的对应字段，果然达到了 65535 字节的","tags":["MongoDB"],"title":"MongoDB 学习笔记（一） CentOS7 下安装 MongoDB","uri":"https://senjianlu.com/2021/10/mongodb-note-01/","year":"2021"},{"content":"Clash 的优点太多了不赘述了，我选择它的理由是 OpenWrt 的 Clash 插件可以在软路由层面将流量分流到不同节点，比如说：YouTube 使用香港节点、Netflix 走日本节点同时谷歌学术使用自建节点，这可以帮助我大幅度降低延迟和增强自建节点可用性（不会因为使用大量流量而被侦测到）。\n 本章内容和标题描述的一样，会尽量帮助你了解配置文件各项在 Clash 实际使用中的用处，最后也会从零书写一个自己的配置文件。\n我会推荐在开始阅读之前先看完这个很棒的介绍 Clash 配置的视频：Clash 配置文件详解，看完你自己也可以写规则\n1、配置文件各项的用处\n一个配置文件最简单的模板：\n# HTTP 协议代理所在端口\rport: 7890\r# SOCKS5 协议代理所在端口\rsocks-port: 7891\r# 允许局域网内其他设备连接以上 2 个代理端口\rallow-lan: true\r# 规则模式（可选：全局、规则和直连 3 种模式）\rmode: Rule\r# 日志级别\rlog-level: info\r# RESTful 风格的控制 API 服务地址（你可以自己写程序调用接口以切换代理节点等）\rexternal-controller: 0.0.0.0:9090\r# 代理节点池\rproxies:\r- {name: 自建节点 1, type: ss, server: proxy.example.com, port: 12345, cipher: aes-256-cfb, password: mypassword }\r# 代理节点组\rproxy-groups:\r# type: select 意为着这个节点组内的节点需要你手动选择切换\r- name: 使用代理的组名\rtype: select\rproxies:\r- 自建节点 1\r# 不使用代理直连\r- name: 直连的组名\rtype: select\rproxies:\r# DIRECT 意为直连\r- DIRECT\r# 规则，“规则模式”下需要配置，你设备每一次发送的请求都会经由该规则列表由上至下筛选\r# 格式为：- $匹配模式,$匹配参数,$代理节点组\rrules:\r- DOMAIN-SUFFIX,google.com,使用代理的组名\r- GEOIP,CN,直连的组名\r- MATCH,使用代理的组名\r  部分配置选项解释（各种协议的节点配置不在这章解释）：\nproxy-groups 中各组 type 可选：select、url-test 和 fallback 等。\n注：fallback 和 url-test 都为测速并自动选择节点，fallback 需要事前配置好域名服务器以防止 DNS 污染等造成的测速失败。\nrules 中各规则匹配模式可选：DOMAIN、DOMAIN-KEYWORD、DOMAIN-SUFFIX、GEOIP 和 MATCH 等，具体功能可以参照下表：\n   匹配规则 功能     DOMAIN 表示包含完整的域名   DOMAIN-SUFFIX 表示包含什么后缀的域名   DOMAIN-KEYWORD 表示包含 xxx域名关键字的链接   IP-CIDR IPV4 匹配   IP-CIDR6 IPV6 匹配   PROCESS-NAME 表示进程名称   GEOIP 数据库（国家代码）匹配   MATCH 全匹配（一般放在最后）     当启动了 Clash 并载入了以上的配置文件，你尝试访问 Google，节点配置无误的情况下你会惊喜的发现连接上了，那么它是怎么工作的呢？\n首先因为是 Rule 规则模式，目标域名为 www.google.com 的请求没有管节点和节点组，直奔 rules 规则组查找有没有自身匹配的\u0026hellip;\u0026hellip;\n似乎是有的！就在第一条，www.google.com 的域名后缀是 google.com，匹配上了！然后看看这条规则对应的代理组，“使用代理的组名”，进入，代理组内的选择模式为手动选择\u0026hellip;\u0026hellip;当前被选上的代理是：“自建节点 1”，那就使用它进行访问\u0026hellip;\u0026hellip;成功！\n是不是很简单，接着你有尝试访问 ip.cn 想查证下本机的 IP 有没有变\u0026hellip;\u0026hellip;没变？！因为 ip.cn 所在的服务器是大陆 IP 的，匹配上了第二条规则，于是进了直连代理组，接着进行访问而没有使用代理。\n那么，YouTube 呢，当然是可以的！所有域名解析的 IP 如果不在大陆都会被指向第三条规则。\n很简单对吗，来试试加点难度，理解一下下面的配置中各项的功能😀\n2、编写第一个配置文件\n在简单模板的基础上稍加更改，添加以下功能：\n 增加基础配置以给 OpenWrt 软路由系统上的 Clash 插件使用。 代理节点组区分为 5 个：自建节点、油管用、奈飞用、不使用代理直连和使用代理。 规则处新增 Google 学术域名的匹配、YouTube 域名的匹配、Netflix 域名的匹配和域名所在 IP 的匹配。  port: 7890\rsocks-port: 7891\rredir-port: 7892\rmixed-port: 7893\ripv6: false\rallow-lan: true\rmode: Rule\rlog-level: info\rexternal-controller: 0.0.0.0:9090\r# ====== 路由器插件使用所需要增加的基础配置 ======\r# 绑定内网的 IP 地址，我这里不绑定了，因为就是 OpenWrt 地址加 9090 端口访问\rbind-address: \u0026quot;*\u0026quot;\r# Clash 面板密码\rsecret: \u0026quot;123456\u0026quot;\r# Clash 面板前端 UI 样式\rexternal-ui: \u0026quot;./dashboard\u0026quot;\r# ====== ***************** ======\rproxies:\r- {name: 自建节点（Google 学术用）, type: ss, server: proxy.example.com, port: 12345, cipher: aes-256-cfb, password: mypassword }\r- {name: 机场香港节点 1...... }\r- {name: 机场香港节点 2...... }\r- {name: 机场奈飞节点...... }\r- {name: 机场节点普通节点 1...... }\r- {name: 机场节点普通节点 2...... }\r- {name: 机场节点普通节点 3...... }\r- {name: 机场节点普通节点 4...... }\rproxy-groups:\r# Google 学术组\r- name: 自建节点\rtype: select\rproxies:\r- 自建节点（Google 学术用）\r# type: url-test 和其下面的 url、interval 参数共同完成：此组下节点每 300 毫秒向 http://www.gstatic.com/generate_204c 发送一次请求并自动选择延迟最低的节点这一功能\r- name: 油管用\rtype: url-test\rurl: http://www.gstatic.com/generate_204c\rproxies:\r- 机场香港节点 1\r- 机场香港节点 2\r# 奈飞组\r- name: 奈飞用\rtype: select\rproxies:\r- 机场奈飞节点\r# 直连组\r- name: 不使用代理直连\rtype: select\rproxies:\r- DIRECT\r# 其他所有访问走该代理组\r- name: 其他所有访问走该代理组\rtype: select\rproxies:\r- 机场节点普通节点 1\r- 机场节点普通节点 2\r- 机场节点普通节点 3\r- 机场节点普通节点 4\r# 规则\rrules:\r- DOMAIN-SUFFIX,scholar.google.com,自建节点\r- DOMAIN-SUFFIX,scholar.google.com.hk,自建节点\r- DOMAIN-SUFFIX,youtube.com,油管用\r- DOMAIN-SUFFIX,netflix.com,奈飞用\r- GEOIP,CN,不使用代理直连\r- MATCH,其他所有访问走该代理组\r 结束。\n","id":35,"section":"posts","summary":"Clash 的优点太多了不赘述了，我选择它的理由是 OpenWrt 的 Clash 插件可以在软路由层面将流量分流到不同节点，比如说：YouTube 使用香港节点、Netflix 走","tags":["Clash"],"title":"Clash 学习（一）配置文件各项在实际使用中的用处和创建自己的第一个配置文件","uri":"https://senjianlu.com/2021/10/clash-note-01/","year":"2021"},{"content":"安装个 Shadowsocks 给新买的隧道用。\n 1、配置 repo 仓库给后面 YUM 安装使用\n注：原仓库已经删除，现在只剩备份仓库，使用的 repo 源是备用仓库中 README.md 中记载的，应该是可信的，并且我参考大量的教程也均使用的是这个地址，如果你还是不放心请在代理专用服务器上安装。\ncd /etc/yum.repos.d/\r# 配置 repo 仓库\rcurl -O https://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/repo/epel-7/librehat-shadowsocks-epel-7.repo\r 2、YUM 安装\n执行：\nyum install -y shadowsocks-libev\r 测试下是否安装成功：\nss-server\r 3、配置\n默认配置路径为：/etc/shadowsocks-libev/config.json\nvi /etc/shadowsocks-libev/config.json\r 默认的配置如下：\n{\r\u0026quot;server\u0026quot;:\u0026quot;127.0.0.1\u0026quot;,\r\u0026quot;server_port\u0026quot;:8388,\r\u0026quot;local_port\u0026quot;:1080,\r\u0026quot;password\u0026quot;:\u0026quot;mypassword\u0026quot;,\r\u0026quot;timeout\u0026quot;:60,\r\u0026quot;method\u0026quot;:\u0026quot;chacha20-ietf-poly1305\u0026quot;\r}\r 参数的解释（连接用的客户端简称为小飞机）：    参数 解释 样例 效果     server 和 Nginx 的 server 差不多，解析来自指定 IP 或域名的流量。 example.com 只解析来自 example.com 的流量，连接时小飞机也配置同样的域名。   server_port 服务端启动在的哪个端口。 18388 小飞机配置连接本服务器时的端口。   local_port 客户端连接用的端口。 1080 服务启动在本地的 1080 端口上，与连接信息无关。   password 客户端连接用的端口。 mypassword 小飞机配置连接本服务器时需要使用的密码。   timeout 连接超时时间。 60    method 加密方式 aes-256-cfb 小飞机配置连接本服务器时需要使用的加密方式。     加密方式可选：rc4、rc4-md5、aes-128-cfb、aes-192-cfb、aes-256-cfb、bf-cfb、camellia-128-cfb、camellia-192-cfb、camellia-256-cfb、cast5-cfb 和 des-cfb，推荐选择最常用的 aes-256-cfb 以免造成客户端不支持部分加密方式的尴尬情况。\n 我修改后的配置：\n{\r// 0.0.0.0 即接受所有来源的请求，如果配置域名的话你需要先将域名解析到此服务器，防止出现 failed to resolve server name 的错误。\r\u0026quot;server\u0026quot;:\u0026quot;0.0.0.0\u0026quot;,\r\u0026quot;server_port\u0026quot;:18388,\r\u0026quot;local_port\u0026quot;:1080,\r\u0026quot;password\u0026quot;:\u0026quot;mypassword\u0026quot;,\r\u0026quot;timeout\u0026quot;:60,\r\u0026quot;method\u0026quot;:\u0026quot;aes-256-cfb\u0026quot;\r}\r 5、开放防火墙和安全组\n不赘述流程但是不要忘记有这一步。\n 我的 Linux 基础指令笔记中也有：Linux 命令（1）防火墙端口开启关闭\n 6、启动服务\n启动和其他的常用指令一起写上：\n# 启动 Shadowsocks 服务\rsystemctl start shadowsocks-libev\r# 检查服务状态\rsystemctl status shadowsocks-libev\r# 服务开机自启\rsystemctl enable shadowsocks-libev\r# 查看 Shadowsocks 服务的全部日志\rjournalctl -u shadowsocks-libev\r 启动完状态应该是 active 的：\n7、客户端测试连接\n一般情况下你们都是在 Windows 或是手机端进行测试连接，这种情况我就不掩饰了手头没有闲置机器。\n我这里挑一台空闲的 CentOS7 机器安装 Shadowsocks 客户端（说是客户端，其实 Shadowsocks 服务端和客户端是一体的）来测试刚刚配置的服务端能否正常使用：\n# CentOS7 下一键安装 Shadowsocks 客户端\rcurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20%E4%B8%8B%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%20Shadowsocks%20%E5%AE%A2%E6%88%B7%E7%AB%AF/install.sh | bash\r 然后配置下客户端连接信息（位置和服务端都一样的）：\nvi /etc/shadowsocks-libev/config.json\r 配置文件只将 server 改为服务端的 IP 或绑定域名即可，其他不动：\n{\r\u0026quot;server\u0026quot;:\u0026quot;188.188.18.99\u0026quot;,\r\u0026quot;server_port\u0026quot;:18388,\r// 客户端的本地端口就在后续的访问上用到了\r\u0026quot;local_port\u0026quot;:1080,\r\u0026quot;password\u0026quot;:\u0026quot;mypassword\u0026quot;,\r\u0026quot;timeout\u0026quot;:60,\r\u0026quot;method\u0026quot;:\u0026quot;aes-256-cfb\u0026quot;\r}\r 改为使用 ss-local 来启动客户端：\n# 启动后在后台运行\rnohup /usr/bin/ss-local -c /etc/shadowsocks-libev/config.json \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\r 测试访问一下：\n# 访问 IP 信息获取接口，1080 为客户端所在端口\rcurl -x socks5://127.0.0.1:1080 http://ip-api.com/json/?lang=zh-CN\r {\u0026quot;status\u0026quot;:\u0026quot;success\u0026quot;,\u0026quot;country\u0026quot;:\u0026quot;日本\u0026quot;,\u0026quot;countryCode\u0026quot;:\u0026quot;JP\u0026quot;,\u0026quot;region\u0026quot;:\u0026quot;xx\u0026quot;,\u0026quot;regionName\u0026quot;:\u0026quot;Tokyo\u0026quot;,\u0026quot;city\u0026quot;:\u0026quot;东京\u0026quot;,\u0026quot;zip\u0026quot;:\u0026quot;xxx-xxxx\u0026quot;,\u0026quot;lat\u0026quot;:xx.xxxx,\u0026quot;lon\u0026quot;:xxx.xxx,\u0026quot;timezone\u0026quot;:\u0026quot;Asia/Tokyo\u0026quot;,\u0026quot;isp\u0026quot;:\u0026quot;xxxxxx\u0026quot;,\u0026quot;org\u0026quot;:\u0026quot;xxxxxx\u0026quot;,\u0026quot;as\u0026quot;:\u0026quot;xxxxxxx\u0026quot;,\u0026quot;query\u0026quot;:\u0026quot;188.188.18.99\u0026quot;}\r IP 对上了，说明配置没错！\n结束。\n","id":36,"section":"posts","summary":"安装个 Shadowsocks 给新买的隧道用。 1、配置 repo 仓库给后面 YUM 安装使用 注：原仓库已经删除，现在只剩备份仓库，使用的 repo 源是备用仓库中 README.md 中记载的，应该是可信的，","tags":["Linux"],"title":"CentOS7 下安装 Shadowsocks 服务端","uri":"https://senjianlu.com/2021/10/centos7-shadowsocks-server/","year":"2021"},{"content":"这应该也算学习笔记吧\u0026hellip;\u0026hellip;\n 1、信任所有的本地连接\n修改配置文件：\nvi /var/lib/pgsql/12/data/pg_hba.conf\r 从 md5 的认证方式改为 trust\n...\r...\r# \u0026quot;local\u0026quot; is for Unix domain socket connections only\rlocal all all trust\r# IPv4 local connections:\rhost all all 127.0.0.1/32 trust\r...\r...\r  如果你更改过 PostgreSQL 数据库的端口的话，也需要改回到 5432，否则直接访问会显示认证失败：psql: error: FATAL: Ident authentication failed for user \u0026ldquo;postgres\u0026rdquo;\nvi /var/lib/pgsql/12/data/postgresql.conf\r 改回 5432 端口：\nport = 5432 # (change requires restart)\r  之后重启数据库：\nsudo systemctl restart postgresql-12\r 2、切换至 postgres 用户并连接数据库\n切换用户：\nsu - postgres\r 连接数据库：\n-bash-4.2$ psql\r 3、修改密码\nALTER USER postgres WITH PASSWORD 'newpassword';\r 4、恢复原配置并重启\n恢复之前的配置后进行重启：\nsudo systemctl restart postgresql-12\r 结束。\n","id":37,"section":"posts","summary":"这应该也算学习笔记吧\u0026hellip;\u0026hellip; 1、信任所有的本地连接 修改配置文件： vi /var/lib/pgsql/12/data/pg_hba.conf 从 md5 的认证方式改为 trust ... ... # \u0026quot;local\u0026quot; is for Unix domain socket connections only local all all","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记（五）找回被遗忘的 postgres 密码","uri":"https://senjianlu.com/2021/10/postgresql-note-05/","year":"2021"},{"content":"这里插件的编译还是以 Clash 为例，官方版本为 v1.7.5.7，但实际上已经能编译出更新的版本，当前这里的编译请主要参考流程，插件除非是因为 OpenWrt 系统更新已经到了不能用的程度，否则是没有必要手动去编译的。\n一般情况下编译都是简单顺利的，但是你仍然要抱有出错并靠自己解决的觉悟，新特性和系统稳定总是很难兼得。\n 官方文档：compile\n他这里用到了 OpenWrt 的 SDK 进行编译，实际上我们并不需要这么做，因为我们有 OpenWrt 的源码，因此只需要使用 OpenWrt 的源码进行编译就行了，注意这里的编译并不是指将插件直接编译到完整的 OpenWrt 系统内，而是使用 OpenWrt 的源码单独编译一个 .ipk 的插件安装文件出来。\n1、下载插件源码\n以 luci-app-clash 为例，克隆代码：\n# 进入 lede 文件夹\rcd lede\r# 克隆到 package 目录下\rgit clone https://github.com/frainzy1477/luci-app-clash.git package/luci-app-clash\r 2、设置编译模式\n执行：\nmake menuconfig\r 我的插件是 luci-app-clash，属于 LuCI 目录，视情况选择：\n第二个选项就是（这里要参照你自己插件的目录层级关系，可能要再进一层到 Applications 中去）：\n这里只编译这个插件，选 M 编译模式（Y 模式为编译进系统，N 为去除这个插件）：\n之后保存退出。\n3、跟随插件官方文档配置编译环境\n每个插件所需的环境都不一样，比如说这次编译的 Clash，官方文档提到了要安装 po2lmo 以支持中文语言，照做即可：\n注：我已经事先编译过一次了，所以输出可能和你第一次执行有些不一样。 4、开始编译插件\n执行：\nmake package/luci-app-clash/compile V=99\r 多线程而且只编译一个插件是很快的，检查下输出看下插件安装文件所在位置：\n倒数第四行，写着文件被打包在了哪里：\n...\r...\rPackaged contents of /home/rabbir/lede/build_dir/target-x86_64_musl/luci-app-clash-v1.8.0/ipkg-all/luci-app-clash into /home/rabbir/lede/bin/packages/x86_64/base/luci-app-clash_v1.8.0_all.ipk\r...\r...\r 直接前去获取即可：\n安装过程不演示了，实际上我也并未安装，因为旧版本是可用的没有必要，并且我无法确定 1.0 版本的 Clash 内核能否和当前 v1.8.0 的 Clash 插件适配。\n结束。\n","id":38,"section":"posts","summary":"这里插件的编译还是以 Clash 为例，官方版本为 v1.7.5.7，但实际上已经能编译出更新的版本，当前这里的编译请主要参考流程，插件除非是因为 OpenWrt 系统更","tags":["硬件","Clash"],"title":"定制 OpenWrt 软路由系统（三）编译适用于自己 OpenWrt 软路由系统的 Clash 插件","uri":"https://senjianlu.com/2021/10/openwrt-note-03/","year":"2021"},{"content":"被自己写的第一篇教程恶心到了\u0026hellip;\u0026hellip;\n重新确定下拓扑，黑群晖系统不动，将其他两个软路由重新部署下。\n 首选说明几个重要的 IP 地址：    系统 IP     PVE 10.10.10.254   爱快 10.10.10.253   LEDE（已废弃） 10.10.10.252   OpenWrt 10.10.10.250     PVE 的配置\n1、主机网络的配置\n查看方式：\nvi /etc/network/interfaces\r vmbr0 对应的就是板载网口。\naddress 配置了 PVE 的 IP，于是就成了 PVE 管理面板的专属网口，连接其他网口是无法访问 PVE 的管理面板的。\nnetmask 子网掩码不用多说了，照着填就行了。\ngateway 网关为你爱快所在的 IP 地址。\n注：即使配置了网关现在 PVE 也是无法连接外网的，考虑到没有需求我也没再折腾。\n2、管理面板的配置\n网桥和网口一一配对，PVE 管理口配置 CIDR 和网关。\n到这拓扑就一定要确定了，结合我上面的拓扑也能知道我将 PVE 的管理口 vmbr0 同时设定为爱快主路由和 OpenWrt 旁路由的连接口，而 vmbr4 则作为 WAN 口接入入网线。\n 爱快的配置\n1、管理面板的配置\nnet0 作为和 OpenWrt 连接的网口，net1 作为 WAN 口。\n2、爱快内部配置\n默认就配置好了的 LAN 口（比对 MAC 地址发现就是上面的 net0）：\n需要自己配置的 WAN 口，只需要配置绑定剩下的 WAN 口并拨号即可：\nDHCP 服务端，这里把网关配置为 OpenWrt 地址即可：\n OpenWrt 的配置\n1、管理面板的配置\n除了那个 WAN 口（vmbr4）其他都配置上。\n2、OpenWrt 内部配置\n只保留 LAN 口配置：\nLAN 口内的基本设置中，将网关指回给爱快：\n物理设备中勾选所有网口：\n结束。\n","id":39,"section":"posts","summary":"被自己写的第一篇教程恶心到了\u0026hellip;\u0026hellip; 重新确定下拓扑，黑群晖系统不动，将其他两个软路由重新部署下。 首选说明几个重要的 IP","tags":["硬件"],"title":"PVE 下 OpenWrt 纯净系统 + 爱快双软路由部署配置文件的整理","uri":"https://senjianlu.com/2021/10/pve-openwrt-ikuai/","year":"2021"},{"content":"首先明确需要，当前我只需要 Clash 一个插件，并且官方文档是优先用 opkg 命令在 OpenWrt 系统下安装的，因此决定首先在编译前的配置文件生成步骤把不需要的插件（组件）都取消勾选、重新编译出干净的系统，再进行 Clash 的安装。\n 顺带贴一下 Clash 和 OpenClash 这两个插件的区别（来源于悟空的 YouTube 视频）： 这里我的机场主要都是 SSR 协议，因此必须选择 clashr 的内核（目前 clashr 内核已经合并到了 clash 内核内），而能更改内核的 Clash 路由器插件也只有 Clash 这个版本的了。\n  1、首先重新配置软路由系统镜像内的插件\n# 清空之前的配置\rrm -rf ./tmp \u0026amp;\u0026amp; rm -rf .config\r# 生成配置文件\rmake menuconfig\r 对照着页面上的插件按钮和左下角的链接，在 LuCI → Applications 内将不需要的插件一个个删除：\n嫌麻烦的话可以直接参照下方列表进行删除：\n# 服务 → 上网时间控制\rluci-app-accesscontrol\r# 服务 → 广告屏蔽大师 Plus+\rluci-app-adbyby-plus\r# 服务 → 动态 DNS\rluci-app-ddns\r# 网络存储 → qBittorrent\rluci-app-qbittorrent\r# 服务 → 解锁网易云灰色歌曲\rluci-app-unblockmusic\r# 服务 → UPnP\rluci-app-upnp\r# 服务 → UU 游戏加速器\rluci-app-uugamebooster\r# 服务 → KMS 服务器\rluci-app-vlmcsd\r# 服务 → 网络唤醒\rluci-app-wol\r# 服务 → 迅雷快鸟\rluci-app-xlnetacc\r 之后保存退出。\n2、二次编译\n由于我是在 WSL2 下进行编译的，防止存在带空格的 Windows 目录而导致的编译失败，使用以下命令：\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin make -j$(($(nproc) + 1)) V=s\r 3、安装新编译后的系统\n写成一个新的启动盘 disk-2：\n./img2kvm openwrt-x86-64-generic-squashfs-combined-efi.img 103 vm-103-disk-2\r 之后更改虚拟机的引导顺序为使用新盘启动，然后将软路由断电重启。\n重启后修改一下 IP 和用户密码，然后再重启，结束后再进去页面菜单应该就相当干净了。\n4、配置 OpenWrt 系统的网络\n这一步仅供参考，目的是为了使这个 OpenWrt 系统能连上网以便进行后续 opkg 的升级和插件安装，每个人的网络拓跋不一样，我的前置路由是用以拨号的爱快，因此只需要修改下这个 OpenWrt 的网关和 DNS 即可：\n再强制 DHCP 功能由其提供：\n成功联网：\n5、安装 Clash 插件\n将luci-app-clash 的.ipk 安装文件上传：\n然后更新软件包以方便 Clash 下载依赖，点击刷新列表：\n 如果出现以下错误\n...\r...\rDownloading https://mirrors.cloud.tencent.com/lede/releases/18.06.9/packages/x86_64/luci/Packages.sig\rSignature check failed.\rRemove wrong Signature file.\r...\r...\r 在 OPKG 配置处用 # 注销掉 option check_signature 即可：\n 接着执行安装：\n看见日志最后有 Configuring luci-app-clash. 就说明安装成功了，如果失败的话请多尝试几次，我至少也是执行了 2 次才成功的。\n 当前你也可以选择使用命令行执行安装：\nmv /tmp/upload/luci-app-clash_v1.7.5.7_all.ipk /tmp\rcd /tmp\ropkg update\ropkg install luci-app-clash_v1.7.5.7_all.ipk\r# 无视部分报警安装（极端情况下可以使用，能用此命令安装成功基础功能也就能使用）\ropkg install luci-app-clash_v1.7.5.7_all.ipk --force-depends\r  6、测试使用\n使用之前还需要配置下内核，安装包内不带内核需要自行下载：https://github.com/frainzy1477/clash_dev/releases/tag/v1.1.0\n下载完成之后上传：\n接着从你的机场复制订阅链接并下载配置：\n选择并使用配置：\n再启用客户端：\n此时就已经完成了 Clash 的启动了：  如果你出现国内网站能够访问，但是国外网站不能访问的情况，你又同时能确定线路没问题，那么请尝试更改本机获取 IP 的方式，从固定 IP 改为 DHCP 获取，或许能解决这个问题。\n 结束。\n","id":40,"section":"posts","summary":"首先明确需要，当前我只需要 Clash 一个插件，并且官方文档是优先用 opkg 命令在 OpenWrt 系统下安装的，因此决定首先在编译前的配置文件生成步骤把不需要的插件（组件","tags":["硬件","Clash"],"title":"定制 OpenWrt 软路由系统（二）删除多余插件并安装 Clash","uri":"https://senjianlu.com/2021/10/openwrt-note-02/","year":"2021"},{"content":"第一次完全按照视频教程装了爱快和 LEDE 双软路由系统，当时只是为了实现功能而完全没有考虑安全性和整个系统是否过于臃肿的问题，但是在使用了近 2 年之后，看了下 LEDE 页面完全没有点开过的大半菜单选项，于是决定根据需求定制下属于自己的 OpenWrt 系统固件。\n对于 OpenWrt 系统我的需求就两个：1、干净整洁；2、可以实现路由器端的科学上网，这里我选用的插件是 Clash。\n小提一句，LEDE 是 OpenWrt 在 2016 年 5 月后被新建的一条分支，但是由于之后 OpenWrt 的大量开发人员选择参与 LEDE 项目，经历长时间的两边维护后，于 2018 年 2 月 LEDE 又合并回了 OpenWrt 的主分支内，因此现在编译 OpenWrt 即可，不用再去管 LEDE 了。\n 本章主要参考教材为：打造一个专属于你的软路由系统，让它好用十倍！\n1、安装一个 Ubuntu 系统\n截至 2021-10-23 GitHub 项目的 README.md 上已经开始推荐 Ubuntu 20.04 LTS x64 系统，因为升级了 Windows11 的关系，直接使用 WSL2 安装个 Linux 虚拟机即可。\n 关于Windows 11 如何开启 WSL2 并安装 Linux 子系统，稍微记录一下。\n Win + X 键打开 Windos 终端（管理员）并执行：  # 开启 Linux 子系统功能\rdism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\r# 开启虚拟机功能\rdism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\r 在微软商店搜索并下载 Ubuntu 20.04 TLS 系统（发行版可根据自己需求更换）：\n 安装、打开，然后设置用户密码：\n 设置磁盘映射，Linux 子系统默认的路径如下（用户和 Linux 发行版自行替换）：\n注意：在这个目录下你会看到一个磁盘映射文件，因为涉及到文件编码格式的不同，官方是不推荐跨系统做文件管理的，但单纯的从 Linux 子系统中拷贝编译后的文件出来是没问题的。  C:\\Users\\$用户\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\\LocalState\r  2、更新软件源并安装编译所需依赖\n需要注意的是部分包境内下载速度缓慢，这一步最好在全局科学情况下执行。\n更新软件源：\nsudo apt-get update\r 安装编译所需依赖：\nsudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync\r 3、克隆代码\ngit clone https://github.com/coolsnowwolf/lede\r 4、执行编译前准备工作\n也都是官方文档的代码，直接拷贝执行：\ncd lede\r./scripts/feeds update -a\r./scripts/feeds install -a\r 5、接下来配置软路由系统\n这一步是较为关键的，直接决定了编译出来系统的架构和里面所包含的插件，因为是第一章只编译一个最基础的软路由系统固件，因此不会包含插件信息单单只做架构为 x86 的配置。\n执行：\nmake menuconfig\r 到图形化界面，发现前 3 项已经配置好了 x86_64 的架构设置，那么就不用动了，保存退出即可。\n6、下载 dl 库\nmake -j8 download V=s\r 7、打包编译\n-j1 参数意为单线程编译，官方文档推荐第一次使用单线程，但其实后续编译不再需要下很多包因此速度会提升很多，继续使用单线程也无妨。\n执行：\nmake -j1 V=s\r  这里需要注意的是，如果你和我一样使用的是 WSL 或者 WSL2 进行编译，由于部分 PATH 中路径包含带空格的 Windows 路径，很可能会导致编译失败，因此请执行下面的命令：\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin make -j1 V=s\r  我的 CPU 是 3700X，这一步的单线程编译了 6 个小时左右，最后如下图显示就说明编译结束了：\n8、拷贝编译完的固件\nWindow11 的 ESL2 会自动生成磁盘映射方便访问，直接进入即可。\n路径如下（用户名请自行替换）：\n\\\\wsl.localhost\\Ubuntu-20.04\\home\\$用户\\lede\\bin\\targets\\x86\\64\r 选 openwrt-x86-64-generic-squashfs-combined-efi.img 即可：\n因为我的软路由系统是跑在 PVE 平台上的，因此使用 Xftp 上传下即可，因为是 .img 文件，还需要做一次 img2kvm 直接写成可挂载硬盘的操作，直接上传至 /root 目录下即可。\n 附带说一句，PVE 下用以存储 .iso 文件的路径如下：\n/var/lib/vz/template/iso/\r 这个目录下的操作系统镜像文件可以在 PVE 控制面板新建虚拟机时直接进行选择。\n 9、测试安装\n先在 PVE 端创建个操作系统不使用任何介质、先不配置任何网络设备的空虚拟机：\n再使用 img2kvm 工具将编译后的系统镜像写成可挂载硬盘：\n./img2kvm openwrt-x86-64-generic-squashfs-combined-efi.img 103 vm-103-disk-1\r 写完之后会看见一个新盘被挂载到了虚拟机，直接添加，然后在选项 → 引导顺序中更改为从新盘启动：\n接着启动虚拟机并切换至控制台准备更改管理面板 IP（这里可能需要按下回车）：\n更新配置文件：\nvi /etc/config/network\r 将第 15 行的 192.168.1.1 更改为你需要的 IP 地址即可：\n之后重启。\n最后看下你之前 LEDE 软路由的网络设备是什么样的配置，抄一份在硬件处添加：\n接着重启并访问配置了的 IP 地址：\n这里的密码需要去控制台里更改：\npasswd root\r 接着登录即可：\n看到还是有一些插件被默认添加了，下一章对插件的自定义会尝试去除。\n本章结束。\n","id":41,"section":"posts","summary":"第一次完全按照视频教程装了爱快和 LEDE 双软路由系统，当时只是为了实现功能而完全没有考虑安全性和整个系统是否过于臃肿的问题，但是在使用了近 2 年之后","tags":["Clash","硬件"],"title":"定制 OpenWrt 软路由系统（一）从源码开始编译第一个系统固件","uri":"https://senjianlu.com/2021/10/openwrt-note-01/","year":"2021"},{"content":"首先明确 Docker 镜像的构建流程由项目根目录下的 Dockerfile 文件管理，GitHub Action 自动推送流程则由项目根目录下的 .github/workflows/main.yaml 文件控制。\n 以 rab_python_packages 项目为例，文件结构也可直接参考。\n1、建立 Dockerfile 文件\n文件内容：\n# 基础镜像系统版本为 CentOS:7\rFROM centos:7\r# 维护者信息\rLABEL maintainer=\u0026quot;Rabbir admin@cs.cheap\u0026quot;\r# Docker 内用户切换到 root\rUSER root\r# 设置时区为东八区\rRUN echo \u0026quot;Asia/shanghai\u0026quot; \u0026gt; /etc/timezone\r# 在基础镜像内安装 Git 和 Python3\rWORKDIR /root\rRUN yum -y install git\rRUN curl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20%E4%B8%8B%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%20Python3%20%E7%8E%AF%E5%A2%83/install.sh | bash\r# 在 /root/GitHub 目录下克隆 rab_python_packages 项目\rRUN mkdir /root/GitHub\rRUN mkdir /root/GitHub/rab_python_packages\rWORKDIR /root/GitHub/rab_python_packages\r# 将宿主机当前目录下的所有文件拷贝至镜像内的 /root/GitHub/rab_python_packages 文件夹中\rCOPY . .\r# 配置环境\rRUN python3 rab_env.py\rRUN python3 rab_env.py rab_chrome\r# 删除无用文件\rRUN rm -r chromedriver_linux64.zip\rRUN rm -r google-chrome-stable_current_x86_64.rpm\r# 启动容器时不指定命令则执行以下的默认命令，只取最后一行 CMD 命令生效\rCMD cd /root/GitHub/rab_python_packages \u0026amp;\u0026amp; python3 rab_logging.py\r 2、测试 Dockerfile\n在 Dockerfile 同目录下执行：\n# 镜像名自行替换\rdocker build -t rabbir/rab_python_packages:latest .\r 3、建立 GitHub Action 流程\n在项目根目录下新建 .github/workflows/ 文件夹并创建 main.yaml 文件：\nmkdir .github\rmkdir .github/workflows\rcd .github/workflows\rvi main.py\r 文件内容：\n注：以下文件可以直接复制使用，只需要更改倒数第 4 行的镜像名即可。\n# 将项目构建镜像并发布至 Docker Hub\rname: CI to Docker Hub\r# 在 Push 到 main 分支后启动该流程\ron:\rpush:\rbranches: [ main ]\rjobs:\rbuild:\rruns-on: ubuntu-latest\rsteps:\r# 在 GitHub Action 的服务器上 Check Out 源码（整体流程结束后会重置服务器环境因此不需要担心泄露）\r- name: Check Out Repo uses: actions/checkout@v2\r# 登录至 Docker Hub，账户密码需要在 Settings -\u0026gt; Secrets 中设置\r- name: Login to Docker Hub\ruses: docker/login-action@v1\rwith:\rusername: ${{ secrets.DOCKER_HUB_USERNAME }}\rpassword: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}\r# 设置 Buildx 为构建镜像做准备\r- name: Set up Docker Buildx\rid: buildx\ruses: docker/setup-buildx-action@v1\r# 构建并发布（执行项目路径下的 Dockerfile 文件）\r- name: Build and push\rid: docker_build\ruses: docker/build-push-action@v2\rwith:\rcontext: ./\rfile: ./Dockerfile\rpush: true\rtags: ${{ secrets.DOCKER_HUB_USERNAME }}/rab_python_packages:latest\r# 完成\r- name: Image digest\rrun: echo ${{ steps.docker_build.outputs.digest }}\r 结束。\n","id":42,"section":"posts","summary":"首先明确 Docker 镜像的构建流程由项目根目录下的 Dockerfile 文件管理，GitHub Action 自动推送流程则由项目根目录下的 .github/workflows/main.yaml 文件控制。 以 rab_python_packages 项目为例，文件结构也可直接参","tags":["Docker"],"title":"GitHub Action 自动构建项目容器镜像并 Push 到官方 Docker Hub","uri":"https://senjianlu.com/2021/10/github-action-push-to-docker-hub/","year":"2021"},{"content":"考虑到之后的项目有日志记录和分析的功能需求，提前准一下用以日志存储的 PV，虽然说挂载到服务器本地路径也可以，但这样的话服务器到期时就会有点麻烦，不如直接使用 COS 做存储，后期只需要切换服务器挂载即可。\n 简单介绍 PV 和 PVC：需要一一对应，具体使用时的关系可以参考以下图片：\n 1、安装腾讯云 COSFS 工具\n官方文档：COSFS 工具\n我这里选择了 Rancher 所在的服务器进行安装和后续挂载，只是考虑到这个服务器会持续续费。\n安装依赖：\nyum -y install libxml2-devel libcurl-devel\r 下载安装包：\nwget https://github.com/tencentyun/cosfs/releases/download/v1.0.19/cosfs-1.0.19-centos7.0.x86_64.rpm\r 安装：\nrpm -ivh cosfs-1.0.19-centos7.0.x86_64.rpm --force\r 2、配置密钥等信息并将 COS 作为存储盘挂载服务器上\n在服务器所在同地域新建存储桶以实现内网访问：\n获取自己的 API 密钥：\n 注意：用这个 API 密钥可以访问和操作你账户内的所有资源，包括服务器和 CDN 等，因此如果你对安全性有要求，可以参照以下步骤一来创建只有 COS 操作权限的密钥。\n选择用户列表并选择新建用户： 选择快速创建之后，输入用户名并修改权限：\n取消管理员权限并搜索 COS 相关权限： 勾选前 9 条 COS 相关操作权限：\n之后点击创建用户并打开用户详情页面，点击 API 密钥新建即可：\n 复制密钥并写入配置文件：\n注：参数自行替换，给配置文件设置 640 权限防止密钥泄露。\necho $BucketName_APPID:$SecretId:$SecretKey \u0026gt; /etc/passwd-cosfs\rchmod 640 /etc/passwd-cosfs\r 运行工具以将 COS 存储桶挂载：\n注：path 为本地路径，Region 参数可以在你的 COS 存储桶页面访问域名处取得。\ncosfs $BucketName_APPID $path -ourl=http://cos.$Region.myqcloud.com -odbglevel=info -oallow_other\r 测试是否挂载成功：\nvi $path/test.txt\r 之后保存，然后去存储桶文件列表界面查看： 成功。\n3、安装并配置挂载文件夹的 NFS 服务\n给挂载文件夹所在的服务器和所有 K3s 节点服务器安装 NFS（客户端和服务端均需要）：\nyum -y install nfs-utils\r 开始配置服务端，接下来的步骤只需要在挂载文件夹所在的服务器上做即可，启动服务并设置为开启自启：\nsystemctl start rpcbind\rsystemctl start nfs\rsystemctl enable rpcbind\rsystemctl enable nfs\r 配置共享：\n# 路径和内网网段自行替换\recho \u0026quot;$path 10.0.0.0/22(fsid=0,rw,sync,no_root_squash,no_all_squash)\u0026quot; \u0026gt; /etc/exports\r# 重新载入配置文件\rexportfs -r\r# 重启服务\rsystemctl restart nfs\r 之后检查一下本地的共享目录：\nshowmount -e localhost\r 无误之后此步结束。\n4、Rancher 界面新增 PV 存储\n注意：因为 PV 和 PVC 是一对一的关系，而容器在选择 PVC 作为存储路径时候可以选择 PVC 下的子目录，即支持 PVC 和容器一对多，因此这里创建一个较大的 PV 给多个中间件容器同时使用（只有同命名空间下的容器才能使用该命名空间下的 PVC）：\n选择 NFS Share 和多节点读写，路径为你刚刚的挂载路径，IP 则填写内网 IP：\n保存之后稍等片刻就能看见状态可用：\n然后去 K3s 的任意 server 节点执行以下命令查看下是否添加 PV 成功：\nkubectl get pv\r 5、新建 PVC\n添加 PVC：\n使用现有的持久卷并选择多主机读写：\n创建成功。\n6、建立容器测试访问\n选择老朋友 Nginx 容器，数据卷处添加现有的同命名空间的 PVC，把 HTML 文件所在文件夹映射一下：\n等待状态变为 Active：\n随便拷贝个网页放入存储桶相应文件夹下：\n访问下页面：\n7、建立容器测试写入\n编辑下刚刚建立的容器，映射下日志文件夹：\n之后重启等待状态变为 Active：\n检查下存储桶内，自动创建 log 文件夹和日志文件：\n本章结束。\n","id":43,"section":"posts","summary":"考虑到之后的项目有日志记录和分析的功能需求，提前准一下用以日志存储的 PV，虽然说挂载到服务器本地路径也可以，但这样的话服务器到期时就会有点麻","tags":["Linux","K3s"],"title":"K3s 学习（四）CentOS7 下挂载腾讯云 COS 为 K3s 集群提供持久化存储 PV","uri":"https://senjianlu.com/2021/10/k3s-note-04/","year":"2021"},{"content":"官方文档\n持续更新。\n 1、停止所有的容器\ndocker stop $(docker ps -aq)\r 2、停止指定镜像的容器\ndocker stop `docker ps -aq --filter ancestor=$image`\r ","id":44,"section":"posts","summary":"官方文档 持续更新。 1、停止所有的容器 docker stop $(docker ps -aq) 2、停止指定镜像的容器 docker stop `docker ps -aq --filter ancestor=$image`","tags":["Docker","Linux"],"title":"CentOS7 下使用 Docker 的一些实用指令","uri":"https://senjianlu.com/2021/10/centos7-docker/","year":"2021"},{"content":"这次迁移又需要修复一下中文字体的问题，记录一下。\n 1、下载有中文的字体\n前端管理界面出现以下方框的原因就是 Zabbix 默认使用的 DejaVuSans.ttf 字体中缺少中文字体样式：\n因此先下载中文字体：\nwget https://www.wfonts.com/download/data/2014/06/01/microsoft-yahei/chinese.msyh.ttf\r 2、将中文字体拷贝到 Docker 容器内\n首先确定 Zabbix Web Nginx 容器的 ID：\ndocker ps -a\r 我这里为 60d60911c8a7，进行拷贝：\ndocker cp chinese.msyh.ttf 60d60911c8a7:/usr/share/zabbix/assets/fonts\r 3、进去容器修改配置文件\n进入容器：\ndocker exec -it 60d60911c8a7 /bin/bash\r 确定字体拷贝成功和打开配置文件：\n# 确定字体文件拷贝成功\rcd /usr/share/zabbix/assets/fonts/\rls\r# 打开配置文件\rvi /usr/share/zabbix/include/defines.inc.php\r 如下修改后保存（字体文件名去掉 .ttf）：\n注：大概在 67 行左右。\n4、页面刷新\n结束。\n","id":45,"section":"posts","summary":"这次迁移又需要修复一下中文字体的问题，记录一下。 1、下载有中文的字体 前端管理界面出现以下方框的原因就是 Zabbix 默认使用的 DejaVuSans.ttf 字体中缺少中文字体样式：","tags":["Docker"],"title":"CentOS7 下 Zabbix Docker 容器修复管理界面中文字体为方框的问题","uri":"https://senjianlu.com/2021/10/centos7-docker-zabbix-fix-font/","year":"2021"},{"content":"将 server + agent 的集群导入 Docker 安装的 Rancher 中以进行管理。\n 1、从面板导入现有集群\n添加集群： 导入：\n输入集群名词后创建：\n复制命令前往集群执行：\n我是在节点的主 server 节点执行的，执行完后返回的信息：\nclusterrole.rbac.authorization.k8s.io/proxy-clusterrole-kubeapiserver created\rclusterrolebinding.rbac.authorization.k8s.io/proxy-role-binding-kubernetes-master created\rnamespace/cattle-system created\rserviceaccount/cattle created\rWarning: rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding\rclusterrolebinding.rbac.authorization.k8s.io/cattle-admin-binding created\rsecret/cattle-credentials-5xxdxx7 created\rclusterrole.rbac.authorization.k8s.io/cattle-admin created\rdeployment.apps/cattle-cluster-agent created\r 再回到页面上看见正在等待：\n 在这一步我等了 10 分钟左右还没有导入成功，看了下日志：\n[root@server-01 ~]# kubectl -n cattle-system logs -l app=cattle-cluster-agent -f\rINFO: Environment: CATTLE_ADDRESS=10.42.2.3 CATTLE_CA_CHECKSUM= CATTLE_CLUSTER=true CATTLE_FEATURES= CATTLE_INTERNAL_ADDRESS= CATTLE_IS_RKE=false CATTLE_K8S_MANAGED=true CATTLE_NODE_NAME=cattle-cluster-agent-69b856b99c-rp874 CATTLE_SERVER=https://rancher.k3s.com\rINFO: Using resolv.conf: search cattle-system.svc.cluster.local svc.cluster.local cluster.local nameserver 10.43.0.10 options ndots:5\rERROR: https://rancher.k3s.com/ping is not accessible (Could not resolve host: rancher.k3s.com)  似乎是无法访问到域名，但是 curl 试一下：\n[root@server-01 ~]# curl https://rancher.k3s.com/ping\rpong\r 又是能访问到的，猜测可能是 DNS 出了问题，回头看下日志有这么一段：\n...nameserver 10.43.0.10...\r 果然是 DNS 的问题，节点不知道 rancher.k3s.com 指向了哪个 IP，于是开始着手修复。\n官方关于这个错误的文档：Agent 无法连接 Rancher server\n在你的主节点执行：\nkubectl -n cattle-system patch deployments cattle-cluster-agent --patch '{\r\u0026quot;spec\u0026quot;: {\r\u0026quot;template\u0026quot;: {\r\u0026quot;spec\u0026quot;: {\r\u0026quot;hostAliases\u0026quot;: [\r{\r\u0026quot;hostnames\u0026quot;:\r[\r\u0026quot;rancher.k3s.com\u0026quot;\r],\r\u0026quot;ip\u0026quot;: \u0026quot;10.0.8.6\u0026quot;\r}\r]\r}\r}\r}\r}'\r  再回到 Rancher 页面应该就导入成功了：\n2、创建一个容器应用\n我这里选择了新建一个 Nginx 容器，也正好能测试下外网对容器内服务的访问情况。\n选择命名空间：\n部署服务： 填写对应的信息，这里的 Docker 镜像会默认从 hub.docker.com 下载，例如我这里填的是 nginx，那么后台会执行 docker pull nginx 这个操作。\n下拉点击创建后，就可以看见这个服务因为没有容器而更新了： 稍等片刻更新完成：\n3、容器的访问\n点进刚刚创建的服务内，因为选择的是创建一个无状态服务，因此会随机在一个节点（服务器）上建立服务，这里看到是 server-02 这个节点：\n用 server-02 节点的公网 IP 搭配映射的 30080 端口进行访问：\n结束。\n 附加： 既然开始碰到内网 DNS 的问题，顺便说一下，一般情况下 K3s 都会在内网建立 DNS 服务器来保证各节点之间的访问，由于是练手我还是准备一步一步来，先手动确保各服务器之间的连接，总体分为两步你也可以参考：\n 修改 hosts，将域名和 IP 绑定，之前我是用外网做 Rancher 和集群的连接的，趁着这个机会也改到内网连接吧，集群中的每台服务器都执行：  echo \u0026quot;10.0.8.6 rancher.k3s.com\u0026quot; \u0026gt;\u0026gt; /etc/hosts\r/etc/init.d/network restart\rping rancher.k3s.com\r 确认域名解析到 Rancher 面板所在服务器的内网地址之后此步完成。\n2. K3s 集群内部是通过 coreDNS 解析的关系，还需要在 coreDNS 中修改域名解析。\n注意：在 server 主节点修改即可，会自动同步到其他节点。\nkubectl edit configmap coredns -n kube-system\r 在 NodeHosts 中新增解析：\n...\r...\rNodeHosts: |\r10.0.8.12 server-01\r10.0.8.17 server-02\r# 此行解析为新增的\r10.0.8.6 rancher.k3s.com\rkind: ConfigMap\r...\r....\r 在其他节点确认修改成功：\nkubectl -n kube-system get configmap coredns -o yaml\r  ","id":46,"section":"posts","summary":"将 server + agent 的集群导入 Docker 安装的 Rancher 中以进行管理。 1、从面板导入现有集群 添加集群： 导入： 输入集群名词后创建： 复制命令前往集群执行： 我是在节点的主 server 节","tags":["Linux","K3s"],"title":"K3s 学习（三）Rancher 导入现有 K3s 集群并创建第一个容器应用","uri":"https://senjianlu.com/2021/10/k3s-note-03/","year":"2021"},{"content":"临时分享下文件可用，没有认证时间限制所以无法实现类似认证一次 6 小时后超时这种功能，每次访问页面或是 API 调用都需要验证。\n 官方文档：Restricting Access with HTTP Basic Authentication\n1、安装 httpd-tools 模块以启用 htpasswd\nyum -y install httpd-tools\r 2、配置用户信息\n我这里储存用户账号密码的文件选在在 /etc/nginx/conf.d/ 下保存\ncd /etc/nginx/conf.d/\rhtpasswd -c pass.db $username\r 输入密码：\nNew password: $password\rRe-type new password: $password\r 确认一下是否添加成功，密码会被加密：\ncat pass.db\r 3、修改 Nginx 配置文件\n...\r...\rserver {\rlisten 80;\rserver_name example.com;\r# 强制跳转 HTTPS\rlocation / {\r# 认证\rauth_basic \u0026quot;User Authentication\u0026quot;;\rauth_basic_user_file /etc/nginx/conf.d/pass.db;\r# 301 跳转\rreturn 301 https://$server_name$request_uri;\r}\r}\r...\r...\r 之后重启再访问页面就能看到：\n结束。\n","id":47,"section":"posts","summary":"临时分享下文件可用，没有认证时间限制所以无法实现类似认证一次 6 小时后超时这种功能，每次访问页面或是 API 调用都需要验证。 官方文档：Restric","tags":["网站建设"],"title":"Nginx 学习（三）配置基础的用户登录验证以保护站点","uri":"https://senjianlu.com/2021/10/nginx-note-03/","year":"2021"},{"content":"一些基础的 iptables 规则来保护服务器，持续更新。\n 1、查看当前 iptables 入方向规则：\n注意：和 Nginx 规则一样，从上到下匹配，有符合的就直接跳出不会再向下执行！\niptables -L INPUT --line-numbers\r 2、删除指定行的入方向规则：\niptables -D INPUT $row_no\r 3、允许指定 MAC 地址访问本机所有端口：\niptables -I INPUT -m mac --mac-source xx:D3:xx:7A:02:xx -j ACCEPT\r 4、屏蔽所有人对域名（包括子域名的访问）:\n注意：需要放在最后一行处！\niptables $row_no -I INPUT -p tcp --dport $port -m string --string \u0026quot;example.com\u0026quot; --algo kmp -j DROP\r ","id":48,"section":"posts","summary":"一些基础的 iptables 规则来保护服务器，持续更新。 1、查看当前 iptables 入方向规则： 注意：和 Nginx 规则一样，从上到下匹配，有符合的就直接跳出不会再向下执行！ iptables -L INPUT","tags":["Linux"],"title":"CentOS7 下的一些 iptables 实用配置","uri":"https://senjianlu.com/2021/09/centos7-iptables/","year":"2021"},{"content":"第一章安装完一个 server 和一个 agent 节点之后，就相当于拥有了一个迷你的 K3s 集群，现在开始安装管理面板。\n 考虑到作为 Docker 容器运行的 Rancher 重启较为安全简单，不再使用自签证书而是使用腾讯云签发的 1 年有效期的亚洲诚信证书。\n 注意：如果没有在 K3s 安装时修改 Ingress 监听端口，请不要在 server 或 agent 同服务器上安装，会造成 80 和 443 端口上起的服务无法正常访问！\n 1、使用 Docker 安装 Rancher Labs\n执行：\ndocker run -d --privileged --restart=unless-stopped \\\r# 容器 80、443 端口分别映射宿主机 8080 和 8443 端口\r-p 8080:80 -p 8443:443 \\\r# 证书\r-v /rab/ssl/rancher.k3s.com.pem:/etc/rancher/ssl/cert.pem \\\r-v /rab/ssl/rancher.k3s.com.key:/etc/rancher/ssl/key.pem \\\r# 数据挂载到宿主机\r-v /rab/docker/rancher/rancher:/var/lib/rancher \\\r-v /rab/docker/rancher/auditlog:/var/log/auditlog \\\r# Rancher 选择为 2.5.x 版本\r--privileged \\\rrancher/rancher:v2.5.5 \\\r# 非自签 SSL 证书\r--no-cacerts\r 查看状态：\ndocker stats\r CONTAINER CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS\re404cfxxx811 7.35% 1.5 GiB / 3.7 GiB 40.54% 192 MB / 3.09 MB 466 MB / 489 MB 21\r 成功。\n2、Nginx 反代（可选）\n注意：反代不要选择 HTTP 所在端口，Rancher 会自动跳转至 HTTPS 造成无法访问的情况！\n配置如下：\n...\r...\r# 防止出现“nginx: [emerg] unknown \u0026quot;connection_upgrade\u0026quot; variable”的错误\rmap $http_upgrade $connection_upgrade {\rdefault upgrade;\r'' close;\r}\r...\r...\rserver {\rlisten 80;\rserver_name rancher.k3s.com;\r# 强制跳转 HTTPS\rlocation / {\rreturn 301 https://$server_name$request_uri;\r}\r}\rserver {\rlisten 443 ssl;\rserver_name rancher.k3s.com;\r# SSL 配置\rssl_certificate /rab/ssl/1_rancher.k3s.com_bundle.crt;\rssl_certificate_key /rab/ssl/2_rancher.k3s.com.key;\rssl_protocols TLSv1 TLSv1.1 TLSv1.2;\rssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\rlocation / {\rproxy_set_header Host $host;\rproxy_set_header X-Forwarded-Proto $scheme;\rproxy_set_header X-Forwarded-Port $server_port;\rproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\rproxy_pass https://127.0.0.1:8443;\rproxy_http_version 1.1;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection $connection_upgrade;\r}\r}\r...\r...\r 3、重启 Nginx 并访问域名\n 第一次访问会需要配置管理员密码，后续如果忘记请执行以下命令获取新密码：\ndocker exec -ti $container_id reset-password\r 返回结果中会有新的密码\nNew password for default admin user (user-xxxxx):\r$new_password\r  本章结束。\n","id":49,"section":"posts","summary":"第一章安装完一个 server 和一个 agent 节点之后，就相当于拥有了一个迷你的 K3s 集群，现在开始安装管理面板。 考虑到作为 Docker 容器运行的 Rancher 重启较为安全简单，不再使用","tags":["Linux","K3s"],"title":"K3s 学习（二）安装 Rancher Labs（Docker 安装，推荐）","uri":"https://senjianlu.com/2021/09/k3s-note-02-02/","year":"2021"},{"content":"主要是两个步骤：1、生成 SSL 私钥（.key 文件）和证书签发请求文件（.csr 文件）；2、自己充当证书颁发机构（CA）进行签发生成证书（.crt 文件）。\n 1、检查是否已经安装 OpenSSL\nopenssl version\r  没有安装的话执行以下命令安装：\nyum -y install openssl\r  2、生成私钥\n秘钥文件名可以自己更改，我因为是给 K3s Rancher 用才这么命名。\n# 允许后需要输入至少 4 位的密码，后面有去除密码的步骤因此随便输入即可\ropenssl genrsa -des3 -out rancher.key 4096\r 3、生成证书签发请求\n在证书生成目录新建配置文件，以配置 SubjectAltName 来防止 Chrome 报“没有指定主题备用名称”的错误：\nvi ext.ini\r 文件内容：\n[ req ]\rdefault_bits = 4096\rdistinguished_name = req_distinguished_name\rreq_extensions = req_ext\r[ req_distinguished_name ]\rcountryName = Country Name (2 letter code)\rcountryName_default = CN\rstateOrProvinceName = State or Province Name (full name)\rstateOrProvinceName_default = Zhejiang\rlocalityName = Locality Name (eg, city)\rlocalityName_default = Hangzhou\rorganizationName = Organization Name (eg, company)\rorganizationName_default = k3s\rorganizationalUnitName = Organizational Unit Name (eg, section)\rorganizationalUnitName_default = rancher\rcommonName = Common Name (e.g. server FQDN or YOUR name)\rcommonName_max = 64\rcommonName_default = rancher.k3s.cn\r[ req_ext ]\rsubjectAltName = @alt_names\r[alt_names]\rDNS.1 = k3s.cn\rDNS.2 = *.k3s.cn\r  subj 参数解释：    字段 字段含义 示例     /C= Country 国家 CN   /ST= State or Province 省 Zhejiang   /L= Location or City 城市 Hangzhou   /O= Organization 组织或企业 k3s   /OU= Organization Unit 部门 rancher   /CN= Common Name 域名或 IP rancher.k3s.com     生成证书请求文件：\nopenssl req -new -sha256 -out rancher.csr -key rancher.key -config ext.ini\r 4、去除私钥中的密码\n以防止每次启动Web服务器时，都被要求输入密码：\nopenssl rsa -in rancher.key -out rancher.key\r 5、自己充当 CA 进行证书的签发\n# 签发 10 年的证书\ropenssl x509 -req -days 3650 -in rancher.csr -signkey rancher.key -out rancher.crt -extensions req_ext -extfile ext.ini\r 完成后看下目录确定是否生成成功：\n[root@VM-8-6-centos ~]# ls\r# 有 .crt 文件说明成功\rrancher.crt rancher.csr rancher.key ext.ini\r 6、Nginx 配置\n...\r...\rserver {\rlisten 80;\rserver_name rancher.k3s.com;\r# 强制跳转 HTTPS\rlocation / {\r# root /usr/share/nginx/html;\r# index index.html;\rreturn 301 https://$server_name$request_uri;\r}\r}\rserver {\rlisten 443 ssl;\rserver_name rancher.k3s.com;\r# SSL 配置\rssl_certificate /etc/nginx/ssl/rancher.crt;\rssl_certificate_key /etc/nginx/ssl/rancher.key;\rssl_protocols TLSv1 TLSv1.1 TLSv1.2;\rssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\rlocation / {\rroot /usr/share/nginx/html;\rindex index.html;\r}\r}\r...\r...\r 通过 HTTPS 访问仍然会显示不安全，查看下证书发现生效了但是因为是自签的所以不受信任：\n7、Windows 本地信任证书\n# cmd 键入 mmc 打开控制台\rmmc\r 添加/删除单元：\n为根节点添加证书选项，弹出框选择当前用户即可： 根目录中导入证书：\n将服务上的 .crt 文件下载到本地，导入一路选择“是”即可完成导入：\n回页面看一眼证书现在已经被信任了：\n8、Chrome 信任证书\n存在一些情况 Edge 已经信任证书，但是 Chrome 还不信任：\n前往 Chrome 高级设置里的证书处导入即可：\n结束。\n","id":50,"section":"posts","summary":"主要是两个步骤：1、生成 SSL 私钥（.key 文件）和证书签发请求文件（.csr 文件）；2、自己充当证书颁发机构（CA）进行签发生成证书（.crt","tags":["Linux"],"title":"CentOS7 下使用 OpenSSL 生成 CA 自签发证书并解决 Windows 下信任证书后 Chrome 出现 ERR_CERT_COMMON_NAME_INVALID 的问题","uri":"https://senjianlu.com/2021/09/centos7-openssl-ca/","year":"2021"},{"content":"第一章安装完一个 server 和一个 agent 节点之后，就相当于拥有了一个迷你的 K3s 集群，现在开始安装管理面板。\n注意：请参考成功率更高的Docker 安装 Rancher Labs，该文章已作废！\n 谨慎考虑是否参考，能确定的是在 2H4G 轻量服务器下，手动安装会出现很多奇奇怪怪的错误，光我自己安装 3 次一样的步骤就出现 2 次安装结束检查状态出现“error: deployment \u0026ldquo;rancher\u0026rdquo; exceeded its progress deadline”的问题，并且日志的排查相当麻烦，尝试前请一定建立云服务器快照以便回滚！\n 注意：如果没有在 K3s 安装时修改 Ingress 监听端口，请不要在 server 或 agent 同服务器上安装，会造成 80 和 443 端口上起的服务无法正常访问！\n 1、首先安装 Kubernetes 的软件包管理工具：Helm\n这也是Rancher 安装官方文档所提示必要的模块，安装步骤参考Installing Helm：\n# 下载压缩包\rwget https://get.helm.sh/helm-v3.7.0-linux-amd64.tar.gz\r# 解压\rtar -zxvf helm-v3.7.0-linux-amd64.tar.gz\r# 二进制文件直接放入环境变量中即可使用\rmv linux-amd64/helm /usr/local/bin/helm\r 完成后确定下是否安装成功：\n[root@VM-8-6-centos ~]# helm version\rversion.BuildInfo{Version:\u0026quot;v3.7.0\u0026quot;, GitCommit:\u0026quot;eeac83883cb40xxxxxxxxxxxec6373570374ce770b\u0026quot;, GitTreeState:\u0026quot;clean\u0026quot;, GoVersion:\u0026quot;go1.16.x\u0026quot;}\r 成功的情况添加含有 Rancher Chart 的 Helm Chart 仓库：\nhelm repo add rancher-stable https://releases.rancher.com/server-charts/stable\r  境内服务器使用阿里云的源\nhelm repo add rancher-stable http://rancher-mirror.oss-cn-beijing.aliyuncs.com/server-charts/stable\r  2、为 Rancher 创建 Namespace\nkubectl create namespace cattle-system\r 3、使用自签证书 安装 Rancher\n 这一步官方给了 3 个选项：\n Rancher 生成的自签名证书 Let\u0026rsquo;s Encrypt 使用您自己的证书（可以是自签也可以是腾讯云等免费申请来的或是付费购买的）   我选择了最后一种，自签发 10 年并在本地安装证书以信任，教程在这：CentOS7 下使用 OpenSSL 生成 CA 自签发证书并解决 Windows 下信任证书后 Chrome 出现 ERR_CERT_COMMON_NAME_INVALID 的问题。\n先配置环境变量：\nvi /etc/profile\r ...\r...\r# 指定 Rancher 的安装使用 KUBECONFIG 配置文件防止出现“dial tcp [::1]:8080: connect: connection refused”的错误\rexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\r source /etc/profile\r 接着执行安装命令：\n注意：hostname 选项必须与服务器证书中的 Common Name 或 Subject Alternative Names 条目匹配！\n# 使用 Helm 安装 Rancher\r# replicas 为 Rancher 部署所使用的复制数量，少于 3 个节点时填写准确节点数\r# 自签节点 privateCA 变量设置为 true\rhelm install rancher rancher-stable/rancher \\\r--namespace cattle-system \\\r--set hostname=rancher.k3s.com \\\r--set replicas=3 \\\r--set ingress.tls.source=secret \\\r--set privateCA=true\r# 配置 SSL 证书\rkubectl -n cattle-system create secret tls tls-rancher-ingress \\\r--cert=/etc/nginx/ssl/rancher.crt \\\r--key=/etc/nginx/ssl/rancher.key\r 验证是否安装成功：\n# Rancher 是否成功部署\rkubectl -n cattle-system rollout status deploy/rancher\r# Rancher 当前状态\rkubectl -n cattle-system get deploy rancher\r 确定完成后用 HTTPS://域名 进行访问。\n结束。\n","id":51,"section":"posts","summary":"第一章安装完一个 server 和一个 agent 节点之后，就相当于拥有了一个迷你的 K3s 集群，现在开始安装管理面板。 注意：请参考成功率更高的Docker 安装 Rancher Labs","tags":["Linux","K3s"],"title":"K3s 学习（二）安装 Rancher Labs（手动安装版本，不推荐）","uri":"https://senjianlu.com/2021/09/k3s-note-02-01/","year":"2021"},{"content":"之前是在一台 2H4G 服务器上用 Screen 跑多个项目，明明睡前看都是运行的好好的，早上起来检查却总有 1、2 个被 Kill 掉了，属实心累，正巧腾讯云送了老用户一年 2H4G 的服务器，带上学生机组个集群，后面再把项目都做成 Docker 运行应该就能保证稳定性了。\n 本次用来构建集群的服务器共有 4 台，另有 1 台用作面板安装。为什么不将面板部署到节点服务器是因为 K3s 安装时默认会安装 Ingress 做负载均衡，它会监听 80 和 443 端口并在 Nginx 之前就处理请求并返回“404 Page not found”，甚是烦人索性抽离出来，同时注意 Rancher 需要最小 2H4G 的配置来允许，不然会频繁 CPU 占用 100% 并出现 503 错误。\n因为使用了外置数据库的原因，K3s server 节点不再需要安装 3 台（3 台的限制是为了保证内置数据库同步并推举出主节点），但是我还是习惯安装三台。 注：服务器间均通过内网建立连接。\n 开始安装前，我强烈建议您在安全组和防火墙处开放全部端口，K3s 的官方文档都结构混乱，您很难排查端口相关的错误。在后期全部安装完毕后您再进行针对性关闭危险端口也不迟！\n1、准备外部数据库连接\n我这里使用的外置的 MySQL 数据库，编辑环境变量以添加 server 用的数据库连接：\nvi /etc/profile\r ...\r# 在最末尾添加数据库连接\r# 自行替换数据库连接参数\r# MySQL\rexport K3S_DATASTORE_ENDPOINT=\u0026quot;mysql://$username:$password@tcp(127.0.0.1:3306)/$database\u0026quot;\r# PostgreSQL\rexport K3S_DATASTORE_ENDPOINT=\u0026quot;postgres://$username:$password@127.0.0.1:5432/$database?sslmode=disable\u0026quot;\r # 使环境变量生效\rsource /etc/profile\r  PostgreSQL 连接不禁用 SSL 连接的话后续安装并启动 K3s 时会报以下错误：\n...\r...\r-- Unit k3s.service has begun starting up. Sep 27 20:46:52 VM-9-9-centos sh[5029]: + /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service Sep 27 20:46:52 VM-9-9-centos sh[5029]: Failed to get unit file state for nm-cloud-setup.service: No such file or directory Sep 27 20:46:52 VM-9-9-centos k3s[5036]: time=\u0026quot;2021-09-27T20:46:52.707510605+08:00\u0026quot; level=info msg=\u0026quot;Starting k3s v1.21.4+k3s1 (3e250fdb)\u0026quot; Sep 27 20:46:52 VM-9-9-centos k3s[5036]: time=\u0026quot;2021-09-27T20:46:52.714638844+08:00\u0026quot; level=fatal msg=\u0026quot;starting kubernetes: preparing server: creating storage endpoint: building kine: pq: SSL is not enabled on the server\u0026quot; Sep 27 20:46:52 VM-9-9-centos systemd[1]: k3s.service: main process exited, code=exited, status=1/FAILURE Sep 27 20:46:52 VM-9-9-centos systemd[1]: Failed to start Lightweight Kubernetes. -- Subject: Unit k3s.service has failed -- Defined-By: systemd -- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-deve ...\r...\r  2、安装 server 节点\n在设置好数据库连接环境变量之后开始安装，使用官方提供的脚本：\n注：这里安装时会自动读取环境中和 K3s 有关的变量，因此不再需要指定数据库连接。\ncurl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.20.8+k3s1 sh -s - server\r  境内服务器使用 cnrancher.com 的源\ncurl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_VERSION=v1.20.8+k3s1 sh -s - server\r  安装完后查看节点：\nk3s kubectl get nodes\r 出现以下信息则说明安装完成。\nNAME STATUS ROLES AGE VERSION\rvm-9-9-centos Ready control-plane,master 18m v1.21.4+k3s1\r 获取以下 node-token 方便之后部署 agent 节点：\ncat /var/lib/rancher/k3s/server/node-token\r K1082501c0eaxxxxxxxx77059a4fff524xxx589b9::server:1f2d8a3xxxxx7a1e2e4xxx60\r  副 server 节点的安装仅需要使用同一个数据库，K3s 会通过数据库同步各节点：\n# K3s server 用 MySQL 数据库连接\rexport K3S_DATASTORE_ENDPOINT=\u0026quot;mysql://$username:$password@tcp(127.0.0.1:3306)/$database\u0026quot;\r  3、安装 agent 节点\n仍然是先配置环境变量：\nvi /etc/profile\r 注意：agent 节点的环境变量中不需要配置数据库的连接信息！\n...\r# 在最末尾添加 server 节点的 node-token\rexport K3S_TOKEN=\u0026quot;K1082501c0eaxxxxxxxx77059a4fff524xxx589b9::server:1f2d8a3xxxxx7a1e2e4xxx60\u0026quot;\r# server 节点的地址，端口默认为 6443\r# 必须使用 HTTPS 协议：Only https:// URLs are supported for K3S_URL ip address\rexport K3S_URL=\u0026quot;https://10.0.12.0:6443\u0026quot;\r # 使环境变量生效\rsource /etc/profile\r 使用和 server 一样的脚本进行安装，但是设置了 K3S_URL 这个环境变量，因此默认选择为安装 agent 程序：\n# agent 节点安装\rcurl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.20.8+k3s1 sh -\r  境内服务器使用 cnrancher.com 的源\ncurl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_VERSION=v1.20.8+k3s1 sh -\r  安装完成后理论上会自己启动，这时回 server 节点再检查下总节点个数就能看到新的 agent 节点了：\n[root@VM-9-9-centos CA]# kubectl get nodes\rNAME STATUS ROLES AGE VERSION\rvm-9-8-centos Ready \u0026lt;none\u0026gt; 3m18s v1.21.4+k3s1\rvm-9-9-centos Ready control-plane,master 10h v1.21.4+k3s1\r 4、节点卸载\nserver 节点\n/usr/local/bin/k3s-uninstall.sh\r agent 节点\n/usr/local/bin/k3s-agent-uninstall.sh\r 注意：卸载完之后清理残留以防止重装后出现“Unable to connect to the server: x509: certificate signed by unknown authority”的错误，如果出现的话请卸载、清理并重装以尝试解决！\nrm -rf $HOME/.kube\r 5、一些可能用的到指令\n节点状态查看：\nkubectl describe node $hostname\r 本章结束，下章安装 Rancher Labs 作为管理界面。\n","id":52,"section":"posts","summary":"之前是在一台 2H4G 服务器上用 Screen 跑多个项目，明明睡前看都是运行的好好的，早上起来检查却总有 1、2 个被 Kill 掉了，属实心累，正巧腾讯云送了老用户一年 2H4G 的","tags":["Linux","K3s"],"title":"K3s 学习（一）高可用模式在 CentOS7 服务器上构建第一组 server + agent 节点","uri":"https://senjianlu.com/2021/09/k3s-note-01/","year":"2021"},{"content":"我不想写 SQL。\n 1、首先安装 plpython3u 包\nPostgreSQL 版本请自行更改，安装之前先前往 pkgs.org 搜索以确定有对应的包。\nyum install postgresql12-plpython3\r 2、为数据库添加扩展\n切换到你需要安装 Python3 语言扩展的数据库并执行：\nCREATE EXTENSION plpython3u;\r 3、测试是否安装成功\n创建函数：\nCREATE OR REPLACE FUNCTION \u0026quot;public\u0026quot;.\u0026quot;python3_test\u0026quot; (a integer, b integer)\rRETURNS INT\rLANGUAGE plpython3u\rAS $$\rif a \u0026gt; b:\rreturn a\rreturn b\r$$;\r 测试一下：\nSELECT python3_test(1, 2)\r\u0026gt; OK\r\u0026gt; 时间: 0.058s\r    python3_test     2    没有问题。\n4、导入 Python3 包和在本数据库执行查询语句\n注意：Python3 语句严格使用 4 空格进行缩进！\nCREATE OR REPLACE FUNCTION \u0026quot;public\u0026quot;.\u0026quot;python3_test\u0026quot;(str text)\rRETURNS INT\rLANGUAGE plpython3u\rAS $$\rimport random\r# 获取字符串长度\r# 使用 plpy.execute() 直接在本数据库执行 SQL 语句\rselect_result = plpy.execute(\u0026quot;SELECT CHAR_LENGTH('{}');\u0026quot;.format(str))\rstr_length = int(select_result[0][\u0026quot;char_length\u0026quot;])\r# 随机数\rrandom_int = random.randint(0, str_length)\rreturn random_int\r$$;\r 运行：\nSELECT python3_test('1234567890')\r\u0026gt; OK\r\u0026gt; 时间: 0.033s\r    python3_test     7    5、第三方 Python 模块的安装和导入\n注：这里不修改配置文件，直接用最简单的方法在函数中添加包路径。\n第三方模块的安装直接使用 pip3 install 即可，和平时使用 Python3 无异；导入则需要先找到模块安装路径，这里以 requests 为例：\n[root@VM-8-12-centos ~]# pip3 show requests\rName: requests\rVersion: 2.26.0\rSummary: Python HTTP for Humans.\rHome-page: https://requests.readthedocs.io\rAuthor: Kenneth Reitz\rAuthor-email: me@kennethreitz.org\rLicense: Apache 2.0\rLocation: /usr/local/lib/python3.6/site-packages\rRequires: urllib3, charset-normalizer, certifi, idna\r 那么 pip3 默认的安装路径则为：/usr/local/lib/python3.6/site-packages，在函数中进行导入：\nCREATE OR REPLACE FUNCTION \u0026quot;public\u0026quot;.\u0026quot;python3_test\u0026quot;(url text)\rRETURNS INT\rLANGUAGE plpython3u\rAS $$\rimport sys\rsys.path.append(\u0026quot;/usr/local/lib/python3.6/site-packages/\u0026quot;)\rimport requests\r# 访问\rresponse = requests.get(url)\rreturn response.status_code\r$$;\r 运行：\nSELECT python3_test('https://baidu.com')\r\u0026gt; OK\r\u0026gt; 时间: 0.526s\r    python3_test     200    6、打印日志和返回表结构的数据\nCREATE OR REPLACE FUNCTION \u0026quot;public\u0026quot;.\u0026quot;python3_test\u0026quot;(str text)\rRETURNS TABLE(_varchar VARCHAR, _numeric NUMERIC, _boolean BOOLEAN)\rLANGUAGE plpython3u\rAS $$\rimport sys\rsys.path.append(\u0026quot;/usr/local/lib/python3.6/site-packages/\u0026quot;)\r# 类\rclass return_class():\rdef __init__(self, _varchar, _numeric, _boolean):\rself._varchar = _varchar\rself._numeric = _numeric\rself._boolean = _boolean\r# 打印日志\rplpy.debug(\u0026quot;debug\u0026quot;)\rplpy.log(\u0026quot;log\u0026quot;)\rplpy.info(\u0026quot;info\u0026quot;)\rplpy.notice(\u0026quot;notice\u0026quot;)\rplpy.warning(\u0026quot;warning\u0026quot;)\r# 返回表结构（在声明了返回表的列名后只要以列为单位生成对象并放入数组返回即可）\rreturn_classes = []\ra_class = return_class(str, 1.00, True)\ra_class._numeric = 0.01\rreturn_classes.append(a_class)\rreturn_classes.append(return_class(\u0026quot;bb\u0026quot;, 1.23, True))\rreturn_classes.append(return_class(\u0026quot;cc\u0026quot;, 3.21, False))\rreturn return_classes\r$$;\r 运行：\nSELECT * FROM python3_test('test_log_table')\r\u0026gt; INFO: info\r\u0026gt; NOTICE: notice\r\u0026gt; WARNING: warning\r\u0026gt; OK\r\u0026gt; 时间: 0.115s\r    _varchar _numeric _boolean     test_log_table 0.01 t   bb 1.23 t   cc 3.21 f    结束。\n","id":53,"section":"posts","summary":"我不想写 SQL。 1、首先安装 plpython3u 包 PostgreSQL 版本请自行更改，安装之前先前往 pkgs.org 搜索以确定有对应的包。 yum install postgresql12-plpython3 2、为数据库添加扩展 切换到你需要安装 Python3 语言扩展","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记（四）安装 plpythonu 以使用 Python3 语言编写函数","uri":"https://senjianlu.com/2021/09/postgresql-note-04/","year":"2021"},{"content":"因为 Linux 系统下用 code-server 作为编译器预览 Matplotlib 图表实在过于麻烦，于是决定多装一个 Jupyter 作为数据分析图表预览用工具。\n 安装较为简单，但是开机启动碰到了一些问题，但还是做个整体的记录吧。\n1、安装 Python3，已经安装则跳过 使用我的一键脚本即可：\ncurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20%E4%B8%8B%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%20Python3%20%E7%8E%AF%E5%A2%83/install.sh | bash\r 2、pip3 安装 Jupyter\npip3 install notebook\r 3、生成和修改配置文件以使其能被外部访问，同时支持密码验证\njupyter notebook --generate-config\r 配置文件会生成在用户目录的 .jupyter/jupyter_notebook_config.py 下，不用记录位置，先去生成密码验证用的密钥：\npython3\r from notebook.auth import passwd\rpasswd()\r# 输入密码\r# 获取形如 argon2:$argon2id$v=19$m=10240,t=10,p=8$dhDVXQegS13Rxxxxxxxxxxxxxxxxxxx 的密钥\rexit()\r 保存好密钥后去修改配置文件：\nvi /root/.jupyter/jupyter_notebook_config.py\r 找到以下各行，按下述修改：\nc.NotebookApp.ip='*' # 设置所有 IP 皆可访问\rc.NotebookApp.password=u'argon2:$a....' # 复制刚才生成的那个密文\rc.NotebookApp.open_browser=False # 禁止自动打开浏览器\rc.NotebookApp.port=8888 # 默认为 8888 端口\r 4、开启对应端口的防火墙和安全组，基础操作，做个提醒\n5、尝试启动\njupyter notebook --allow-root\r 输入密码登录，出现目录页面则说明安装没问题。 6、新建笔记文件\nJupyter 实际上并不是专业的 IDE，而是笔记工具，因此创建的文件实际上也是笔记文件类型，以下虽然显示的是 Python3 实际创建的是 .ipynb 文件。 最简单的代码试下功能： 7、设置开机自启动 如果没有 Screen 先安装：\nyum -y install screen\r# 配置 Screen 能读取环境变量\recho 'shell -$SHELL' \u0026gt;\u0026gt; /etc/screenrc\r crontab 中新增启动任务：\n# 使用 python3 -m 而非 jupyter 命令是因为 crond 的环境变量和全局变量不一致\r@reboot screen -dmS jupyter \u0026amp;\u0026amp; screen -S jupyter -X stuff 'python3 -m notebook --allow-root\\n'\r 结束。\n","id":54,"section":"posts","summary":"因为 Linux 系统下用 code-server 作为编译器预览 Matplotlib 图表实在过于麻烦，于是决定多装一个 Jupyter 作为数据分析图表预览用工具。 安装较为简单，但是开机启动碰到了一些问题，但","tags":["Linux"],"title":"CentOS7 下安装 Jupyter","uri":"https://senjianlu.com/2021/09/centos7-jupyter/","year":"2021"},{"content":"LinuxGSM (Linux Game Server Managers) 是开源的 Linux 服务器游戏服务器开设工具，简单好用，可以节省大量时间因此选用。\n注：一般情况下我都是更倾向用熟悉的 CentOS7 系统，但是在尝试搭建一遍过后，卡在了Yum 无法安装 Python3.6 的问题上，因此本教程选择 Ubuntu18 系统。\n  注意：最低的服务器配置需求为 2H4G，低于 4G 内存请不用尝试了。且如果你使用的是境内服务器，我推荐你设置好代理，以保证安装脚本能顺利的从 GitHub 下载所需文件：\n# 仅供参考格式用\rexport http_proxy=socks5://99999:22222@63.225.10.10:20800\rgit config --global http.proxy socks5://99999:22222@63.225.10.10:20800\rgit config --global https.proxy socks5://99999:22222@63.225.10.10:20800\r 如果你没有代理，也可以试试修改 hosts，但这并不能保证 100% 解决你的问题：\nvi /etc/hosts\r ...\r···\r199.232.4.133 raw.githubusercontent.com\r  1、安装所需依赖和下载 LinuxGSM\n先更新软件源：\nsudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade\r 接着安装LinuxGSM 所需依赖：\nsudo dpkg --add-architecture i386; sudo apt update; sudo apt install curl wget file tar bzip2 gzip unzip bsdmainutils python util-linux ca-certificates binutils bc jq tmux netcat lib32gcc1 lib32stdc++6 libsdl2-2.0-0:i386 steamcmd lib32z1\r  官方文档推荐为每个游戏服务器都新建一个系统用户，我这里新建了 rustserver 用户：\n# 切换到 root 管理员用户下\rsudo su\r# 新建用户\radduser rustserver\r# 修改密码\rpasswd rustserver\r# 切换到这个用户\rsu - rustserver\r 之后的操作都是在这个用户和 /home/rustserver 目录下执行的。\n 下载 LinuxGSM：\n# 下载 LinuxGSM\rwget -O linuxgsm.sh https://linuxgsm.sh\r# 赋予其执行权限\rchmod +x linuxgsm.sh\r 2、安装 Rust 服务器\n准备服务器安装所需内容：\nbash linuxgsm.sh rustserver\r# 赋予其执行权限\rchmod +x rustserver\r 开始安装 Rust 服务器：\n./rustserver install\r 中途需要确认的地方输入 Y 回车即可（这里用的是 CentOS7 服务器的截图，可能和 Ubuntu18 有些不同，但是流程是一样的一路确定下去即可）：\n看到以下信息则说明安装完成：\n3、配置 Rust 服务器\n配置文件的路径在安装日志中存在，因此直接拷贝即可。\n修改下服务器的描述信息：\nvi /home/rustserver/serverfiles/server/rustserver/cfg/server.cfg\r ...\r...\r# A text description of your server. For a new line add: \\n\rserver.description \u0026quot;Belong to senjianlu.com\u0026quot;\r...\r...\r 修改游戏配置：\ncd /home/rustserver/lgsm/config-lgsm/rustserver\r# 拷贝一份默认配置并覆盖当前的空配置文件\rcp _default.cfg rustserver.cfg\rvi rustserver.cfg\r ...\r...\r## Predefined Parameters | https://docs.linuxgsm.com/configuration/start-parameters\r# 允许所有 IP 地址连接此服务器\rip=\u0026quot;0.0.0.0\u0026quot;\r# 服务器端口\rport=\u0026quot;28015\u0026quot;\r# 管理端口\rrconport=\u0026quot;28016\u0026quot;\rappport=28082\r# 管理员密码\rrconpassword=\u0026quot;xxxxxxxxx\u0026quot;\rrconweb=\u0026quot;1\u0026quot; # Value is: 1 for the Facepunch web panel, Rustadmin desktop and Rustadmin Online; 0 for RCON tools like Rusty.\r# 服务器名称\rservername=\u0026quot;senjianlu\u0026quot;\rgamemode=\u0026quot;vanilla\u0026quot; # Values: vanilla, softcore ( Doc: https://wiki.facepunch.com/rust/server-gamemodes )\rserverlevel=\u0026quot;Procedural Map\u0026quot; # Values: Procedural Map, Barren, HapisIsland, SavasIsland\rcustomlevelurl=\u0026quot;\u0026quot; # Custom level url. +server.levelurl \\\u0026quot;${customlevelurl}\\\u0026quot;\rseed=\u0026quot;\u0026quot; # range: 1-2147483647, used to reproduce a procedural map.\rsalt=\u0026quot;\u0026quot; # range: unknown, used to recover a known setting from an existing map.\r# 最大玩家数\rmaxplayers=\u0026quot;10\u0026quot;\rworldsize=\u0026quot;3000\u0026quot; # default: 3000, range: 1000-6000, map size in meters.\rsaveinterval=\u0026quot;300\u0026quot; # Auto-save in seconds.\rtickrate=\u0026quot;30\u0026quot; # default: 30, range: 15-100.\r...\r...\r 保存后此步结束。\n4、启动服务器\n# 回到用户目录下\rcd /home/rustserver\r# 启动服务器\r./rustserver start\r 看到如下信息说明服务器启动完成：\n 几个需要注意的点：\n① 记得开发防火墙和安全组的对应端口，我这里贪省事直接关闭了防火墙：\nsudo ufw disable\r ② 服务器的启动需要时间，大概在 5 到 10 分钟左右。如何判断服务器是否启动成功可以通过监控，在 2H4G 的云服务器，RustDedicated 大概会吃 50% 的 CPU 资源和 90% 的内存资源，长时间稳定这个占用的话基本就算是启动成功了。\n③ 如果发现 kswapd0 长时间占用几乎 100% 的 CPU 资源，那说明你服务器的内存不足以启动 Rust 服务器，系统开始使用硬盘做虚拟内存了，你可以选择多花钱升级服务器的内存或者提前设置好虚拟内存供开服使用，教程在这里：CentOS7 下建立 SWaP 分区以增加虚拟内存（命令可以完全照搬，CentOS7 和 Ubuntu18.04 通用）\n 最后到游戏中，按下 F1 并输入：\n# IP 和端口自行替换\rconnect 127.0.0.30:28015\r 连接到服务器即可！\n结束。\n","id":55,"section":"posts","summary":"LinuxGSM (Linux Game Server Managers) 是开源的 Linux 服务器游戏服务器开设工具，简单好用，可以节省大量时间因此选用。 注：一般情况下我都是更倾向用熟悉的 CentOS7 系统，但是在尝试搭建一","tags":["Linux","游戏"],"title":"Rust 开服（一）Ubuntu18 下通过 LinuxGSM 搭建 Rust Server 游戏服务器端","uri":"https://senjianlu.com/2021/09/ubuntu18-rust-server-01/","year":"2021"},{"content":"作为长期手搓 JS 的后端，对前端的安全规则几乎是一点都不熟悉，Java Spring 都是 Security 一把梭，这次给 PHP 语言编写的 Nextcloud 添加几行代码真的是要了我的老命了，赶紧记录一下别后面忘了再来一遍\u0026hellip;\u0026hellip;\n注：我是在虚拟主机上直接运行官方的 setup-nextcloud.php 安装，如果是服务器上下载安装应该目录类似，请自行查找文件。\n 首先需要明确的是 Nextcloud 使用了严格的 CSP (Content Security Policy) 配置，如果你想从外部引用任何 CSS 或者 JS 都应该第一时间去做对该来源信任的配置，本文就以添加 Google Analytics 的 Script 元素为例。\n1、从 Google Analytics 官网获取站点的统计代码\n样例如下：\n\u0026lt;!-- Global site tag (gtag.js) - Google Analytics --\u0026gt;\r\u0026lt;script async src=\u0026quot;https://www.googletagmanager.com/gtag/js?id=G-xxxxxxxxxx\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rwindow.dataLayer = window.dataLayer || [];\rfunction gtag(){dataLayer.push(arguments);}\rgtag('js', new Date());\rgtag('config', 'G-xxxxxxxxxx');\r\u0026lt;/script\u0026gt;\r 2、修改 Nextcloud 的 CSP 配置\n配置文件路径：\n站点根目录/lib/public/AppFramework/Http/ContentSecurityPolicy.php\r 添加以下几行，功能包括：① 允许执行页面内嵌的标签和事件监听函数；② 信任 Google 脚本和连接源。\n3、添加 Google Analytics 代码到网站头\n头生成 PHP 文件路径：\n站点根目录/lib/private/legacy/template/functions.php\r 找到头生成方法，并添加方法：\n/**\r* Global site tag (gtag.js) - Google Analytics\r*/\rfunction emit_google_analytics_script() {\r$g_a_s_01 = '\u0026lt;script nonce=\u0026quot;' . \\OC::$server-\u0026gt;getContentSecurityPolicyNonceManager()-\u0026gt;getNonce() . '\u0026quot; defer src=\u0026quot;https://www.googletagmanager.com/gtag/js?id=G-xxxxxxxxxx\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;';\r$g_a_s_02 = '\u0026lt;script nonce=\u0026quot;' . \\OC::$server-\u0026gt;getContentSecurityPolicyNonceManager()-\u0026gt;getNonce() . '\u0026quot; defer\u0026gt;window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag(\u0026quot;js\u0026quot;, new Date());gtag(\u0026quot;config\u0026quot;, \u0026quot;G-xxxxxxxxxx\u0026quot;);\u0026lt;/script\u0026gt;';\rprint_unescaped($g_a_s_01.\u0026quot;\\n\u0026quot;);\rprint_unescaped($g_a_s_02.\u0026quot;\\n\u0026quot;);\r}\r 之后在 emit_script_loading_tags() 方法中调用添加 Google Analytics 的代码：\n/**\r* Print all \u0026lt;script\u0026gt; tags for loading JS\r* @param array $obj all the script information from template\r*/\rfunction emit_script_loading_tags($obj) {\r...\remit_google_analytics_script();\r...\r}\r 完成后刷新页面，就能去 Google Analytics 看到访问了，结束。\n","id":56,"section":"posts","summary":"作为长期手搓 JS 的后端，对前端的安全规则几乎是一点都不熟悉，Java Spring 都是 Security 一把梭，这次给 PHP 语言编写的 Nextcloud 添加几行代码真的是要了我的老命了，赶紧","tags":["网站建设"],"title":"Nextcloud 前端页面插入 JS 代码以使用 Google Analytics 分析","uri":"https://senjianlu.com/2021/09/nextcloud-google-analytics/","year":"2021"},{"content":"持续更新。\n Screen 环境变量的配置使其能读取类似 /usr/bin 下的脚本。\nvi /etc/screenrc\r 取消注释\n...\rshell -$SHELL\r...\r ","id":57,"section":"posts","summary":"持续更新。 Screen 环境变量的配置使其能读取类似 /usr/bin 下的脚本。 vi /etc/screenrc 取消注释 ... shell -$SHELL ...","tags":["Linux"],"title":"CentOS7 关于使用 GNU Screen 的笔记","uri":"https://senjianlu.com/2021/09/centos7-gun-screen/","year":"2021"},{"content":"不需要 Yum 安装任何其他软件，也不需要修改 Matplotlib 包的配置文件，实测是最简单的方法了。\n全程使用 HostVDS 新开的服务器并只安装了 Python3.8.2 以保证教程正确。\n 1、首先看下没有安装字体时生成含中文的图表时会出现上面错误。\nimport sys\rimport matplotlib as mpl\rimport matplotlib.pyplot as plt\rfrom matplotlib.font_manager import FontProperties\r\u0026quot;\u0026quot;\u0026quot;\r@description: 执行 SQL -------\r@param:\r-------\r@return:\r\u0026quot;\u0026quot;\u0026quot;\rdef main():\r# 一般教程都会用到的所谓指定字体路径，此篇教程用不到\r# font_prop = FontProperties(fname=\u0026quot;/usr/local/python3/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/SimHei.ttf\u0026quot;)\r# 待字体安装完后指定字体，SimHei 存在缺少部分特殊符号的问题，所以用 YaHei\r# mpl.rcParams['font.sans-serif'] = [\u0026quot;Microsoft YaHei\u0026quot;]\r# 防止 - 号出错，和上一行同时解注\r# mpl.rcParams[\u0026quot;axes.unicode_minus\u0026quot;] = False\rdata = [[\u0026quot;AAA\u0026quot;, \u0026quot;BBB\u0026quot;, \u0026quot;CCC\u0026quot;, \u0026quot;数据\u0026quot;, \u0026quot;数据\u0026quot;]]\rcolumn_labels = [\u0026quot;商品中文名\u0026quot;, \u0026quot;商品英文名\u0026quot;, \u0026quot;最低售价\u0026quot;, \u0026quot;在售数量\u0026quot;, \u0026quot;更新时间\u0026quot;]\rfig = plt.figure(figsize=(3, 3), dpi=600)\rax = fig.add_subplot(111, frame_on=False,)\rax.xaxis.set_visible(False)\rax.yaxis.set_visible(False)\rax.table(cellText=data, colLabels=column_labels)\rax.set_title(\u0026quot;测试\u0026quot;)\rplt.savefig('test.png')\r\u0026quot;\u0026quot;\u0026quot;\r@description: 单体测试\r-------\r@param:\r-------\r@return:\r\u0026quot;\u0026quot;\u0026quot;\rif __name__ == \u0026quot;__main__\u0026quot;:\rtry:\rmain()\rexcept Exception as e:\rprint(str(e))\r 直接运行后日志和图片如下所示：\n[root@test test]# python3 main.py\r/usr/local/python3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 27979 missing from current font.\rfont.set_text(s, 0.0, flags=flags)\r/usr/local/python3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 35797 missing from current font.\rfont.set_text(s, 0.0, flags=flags)\r/usr/local/python3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 25968 missing from current font.\rfont.set_text(s, 0.0, flags=flags)\r/usr/local/python3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 25454 missing from current font.\rfont.set_text(s, 0.0, flags=flags)\r 2、给系统安装中文字体。\n这里不考虑一般教程所采用的只给 Matplotlib 安装中文字体。\n# 新建中文文件夹并下载微软雅黑字体\rcd /usr/share/fonts/\rmkdir chinese\rchmod -R 755 chinese\rcd chinese\rwget https://www.wfonts.com/download/data/2014/06/01/microsoft-yahei/chinese.msyh.ttf\r# 查看当前系统里的中文字体以确认安装成功\rfc-list :lang=zh\r 出现以下命令则说明安装成功：\n[root@test chinese]# fc-list :lang=zh\r/usr/share/fonts/chinese/chinese.msyh.ttf: Microsoft YaHei:style=Regular,Normal\r 清除之前 Matplotlib 的缓存后此步骤结束。\n[root@test chinese]# rm ~/.cache/matplotlib -R\rrm: descend into directory ‘/root/.cache/matplotlib’? y\rrm: remove regular file ‘/root/.cache/matplotlib/fontlist-v330.json’? y\rrm: remove directory ‘/root/.cache/matplotlib’? y\r 3、再执行图片生成脚本以确认中文字体安装成功。 解注以下两行：\n...\r# 待字体安装完后指定字体，SimHei 存在缺少部分特殊符号的问题，所以用 YaHei\rmpl.rcParams['font.sans-serif'] = [\u0026quot;Microsoft YaHei\u0026quot;]\r# 防止 - 号出错，和上一行同时解注\rmpl.rcParams[\u0026quot;axes.unicode_minus\u0026quot;] = False\r...\r 成功，结束。\n","id":58,"section":"posts","summary":"不需要 Yum 安装任何其他软件，也不需要修改 Matplotlib 包的配置文件，实测是最简单的方法了。 全程使用 HostVDS 新开的服务器并只安装了 Python3.8.2 以保证教程正确。 1、首先看下没","tags":["Python"],"title":"CentOS7 下解决 Python3 使用 Matplotlib 生成图表时中文乱码的问题","uri":"https://senjianlu.com/2021/09/centos7-matplotlib-chinese/","year":"2021"},{"content":"本来是很简单的一件事情，追求新版本又把自己坑了一次\u0026hellip;\u0026hellip;\n留个记录稍微描述详细一点，希望能帮到你。\n 参考的文章：「VS Code」如何通过跳板机连接服务器进行远程开发：Remote-SSH 篇\n1、VS Code 中 Remote - SSH 的安装和使用都很简单，就一步带过了。\n在插件库中搜索安装：\n新建连接：\n选择 SSH 配置存放和读取路径：\n接下来就是输入密码登录服务器，自行操作即可，但是如果你需要密钥登录，请跟着步骤 2 进行配置。\n2、进行 SSH 密钥登录的配置和代理的配置。\n进入刚刚所选 SSH 配置存放的目录，一般是 C:\\Users\\你的用户名\\.ssh 这个路径。\n选择编辑 config 文件，密钥和代理的配置参照我设置即可：\n# Host 为服务器别名，可以和 HostName 一样\rHost $server_host\r# 你的服务器域名或 IP\rHostName $server_host\r# 用户\rUser $user\r# SSH 私钥地址，例如：C:\\Users\\你的用户名\\.ssh\\example\rIdentityFile $ssh_primary_key$path\r# 代理配置\rProxyCommand C:\\bin\\nmap\\ncat.exe --proxy-type socks5 --proxy $proxy_host:$proxy_port %h %p --proxy-auth $proxy_auth_username:$proxy_auth_passwod\r 代理的配置详细说一下，也是我踩坑的地方。\n下载压缩包后解压到任意目录，然后替换上面 C:\\bin\\nmap\\ncat.exe 的路径即可。\n虽然官方文档中明确记载了代理认证信息的配置方法，但是经过实测在当前最新版本：nmap-7.91-win32.zip 下是不支持的，VS Code 具体错误日志：\n[01:09:46.557] Running script with connection command: ssh -T -D 13100 \u0026quot;example.com\u0026quot; bash\r[01:09:46.559] Terminal shell path: C:\\Windows\\System32\\cmd.exe\r[01:09:46.742] \u0026gt; \u001b]0;C:\\Windows\\System32\\cmd.exe\u0007\r[01:09:46.742] Got some output, clearing connection timeout\r[01:09:47.447] \u0026gt; kex_exchange_identification: Connection closed by remote host\r[01:09:47.454] \u0026gt; 过程试图写入的管道不存在。\r[01:09:48.732] \u0026quot;install\u0026quot; terminal command done\r[01:09:48.732] Install terminal quit with output: 过程试图写入的管道不存在。\r[01:09:48.732] Received install output: 过程试图写入的管道不存在。\r[01:09:48.733] Failed to parse remote port from server output\r[01:09:48.733] Resolver error: Error: at Function.Create (c:\\Users\\my_user\\.vscode\\extensions\\ms-vscode-remote.remote-ssh-0.65.7\\out\\extension.js:1:64659)\rat Object.t.handleInstallOutput (c:\\Users\\my_user\\.vscode\\extensions\\ms-vscode-remote.remote-ssh-0.65.7\\out\\extension.js:1:63302)\rat Object.t.tryInstall (c:\\Users\\my_user\\.vscode\\extensions\\ms-vscode-remote.remote-ssh-0.65.7\\out\\extension.js:1:415135)\rat processTicksAndRejections (internal/process/task_queues.js:93:5)\rat async c:\\Users\\my_user\\.vscode\\extensions\\ms-vscode-remote.remote-ssh-0.65.7\\out\\extension.js:1:294918\rat async Object.t.withShowDetailsEvent (c:\\Users\\my_user\\.vscode\\extensions\\ms-vscode-remote.remote-ssh-0.65.7\\out\\extension.js:1:406463)\rat async Object.t.resolve (c:\\Users\\my_user\\.vscode\\extensions\\ms-vscode-remote.remote-ssh-0.65.7\\out\\extension.js:1:295994)\rat async c:\\Users\\my_user\\.vscode\\extensions\\ms-vscode-remote.remote-ssh-0.65.7\\out\\extension.js:127:110656\r[01:09:48.736] ------\r 这种情况似乎只会在 VS Code 中出现，我在命令行中尝试连接时没有问题：\nC:\\Users\\my_user\u0026gt;ssh root@example.com ProxyCommand=\u0026quot;C:\\bin\\nmap-7.91\\ncat.exe --proxy-type socks5 --proxy example.proxy:1080 %h %p --proxy-auth 111:222\u0026quot;\rroot@example.com: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).\r 而解决方法则只有一个，回退版本，和参考的教程中使用同样的版本：nmap-7.70-win32.zip\n这个问题的解决单纯就是试出来的，暂时也没有功夫去探究错误的原因，可能也只是个例，Stack Overflow 的个别讨论也都是纠结配置方法的问题，事实上格式官方已经给了，参考意义都不是很大。\n如果回退依然没有解决你的问题的话，在确保 SSH 不适用代理能访问的前提下，使用以下代码去排查下：\nlastb -n 100\r 在服务器运行，查看最近受阻的 100 次 SSH 登录，看客户端到服务器是否打开过连接，再做下一步的判断。\n结束。\n","id":59,"section":"posts","summary":"本来是很简单的一件事情，追求新版本又把自己坑了一次\u0026hellip;\u0026hellip; 留个记录稍微描述详细一点，希望能帮到你。 参考的文章：「VS","tags":["linux"],"title":"VS Code 使用需要认证的 SOCKS5 代理通过 Remote - SSH 连接远程服务器进行开发","uri":"https://senjianlu.com/2021/07/vscode-remote-ssh-use-proxy-with-auth/","year":"2021"},{"content":"国内服务器访问不到各种官方镜像应该是老生常谈的问题了，Docker 也不例外，拉取官方镜像时各种 EOF 错误大概率就是墙的问题了，这篇文档不会记录 Linux 整体环境代理的配置方法，只会配置 Docker 的。\n 1、首先确定你的代理可以被稳定访问：\n# 相关参数自行替换，如果不需要认证信息可以直接跳到第 2 步\r# HTTP 代理\rcurl -x http://$username:$password@$host:$port http://ip-api.com/json/?lang=zh-CN\r# SOCKS5 代理 curl -x socks5://$username:$password@$host:$port http://ip-api.com/json/?lang=zh-CN\r 如果你的代理需要认证信息，那么是不能直接被配置到 Docker 的配置文件中的，如果强行配置的话，运行时会出现以下信息：\n光从代理打码长度也能看到根本没有使用账号密码去访问代理。\n你需要做的是使用 GOST 做转发，在本地搭建一个无需账号密码的长久代理：\n# 从我的 Gitee 仓库下载 GOST 压缩包\rcurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20%E4%B8%8B%E4%B8%8B%E8%BD%BD%20Gitee%20%E8%B6%85%E8%BF%87%201%20MB%20%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%96%87%E4%BB%B6/download.sh | bash -s https://gitee.com/senjianlu/one-click-scripts/raw/main/mirror/GOST/gost-linux-amd64-2.11.1.gz\r# 解压\rgunzip gost-linux-amd64-2.11.1.gz\r# 转移到 /usr/bin 使其在任意目录都可执行\rmv gost-linux-amd64-2.11.1 /usr/bin/gost\rchmod 777 /usr/bin/gost\r# 开启开机自启动，本地端口和代理信息自行替换\recho \u0026quot;@reboot gost -L :$local_port -F=socks5://$username:$password@$host:$port\u0026quot; \u0026gt;\u0026gt; /var/spool/cron/root\rservice crond restart\r# nohup 启动在后台\rnohup gost -L :$local_port -F=socks5://$username:$password@$host:$port \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\r 接着测试本地代理是否正常，和最上面的测试方法一样，不过不需要账号密码了。\ncurl -x socks5://127.0.0.1:$local_port http://ip-api.com/json/?lang=zh-CN\r 2、配置 Docker 代理。\n参照文档：Control Docker with systemd\n此方法配置的代理对 Docker 长久有效，如果你的代理失效了及时修改 GOST 的转发配置即可。\n# 为 Docker 服务创建一个内嵌的 systemd 目录\rmkdir -p /etc/systemd/system/docker.service.d\r 创建 /etc/systemd/system/docker.service.d/http-proxy.conf 文件，\nvi /etc/systemd/system/docker.service.d/http-proxy.conf\r 文件内容如下，只需要这 3 行即可：\n[Service]\rEnvironment=\u0026quot;HTTP_PROXY=socks5://127.0.0.1:$local_port\u0026quot;\rEnvironment=\u0026quot;HTTPS_PROXY=socks5://127.0.0.1:$local_port\u0026quot;\r 然后重新加载配置，确定下代理配置没问题后重启即可。\n# 重新加载配置\rsystemctl daemon-reload\r# 查看配置是否生效\rsystemctl show --property=Environment docker\r# 无误后重启\rsystemctl restart docker\r 然后就去 Pull 你的镜像吧！\n","id":60,"section":"posts","summary":"国内服务器访问不到各种官方镜像应该是老生常谈的问题了，Docker 也不例外，拉取官方镜像时各种 EOF 错误大概率就是墙的问题了，这篇文档不会记录 Linux","tags":["Docker"],"title":"CentOS7 下 Docker 配置代理以解决国内服务器无法拉取官方镜像的问题（需要账号密码的代理也可使用）","uri":"https://senjianlu.com/2021/07/centos7-docker-command-proxy/","year":"2021"},{"content":"记录下 code-server 从官方源下载安装并配置 HTTPS 的过程。\n 官方 GitHub 项目地址：code-server\n1、下载安装\n选个中意的 Release 下载并解压：\n# 下载\rwget https://github.com/cdr/code-server/releases/download/v3.11.0/code-server-3.11.0-linux-amd64.tar.gz\r# 解压\rtar -xzvf code-server-3.11.0-linux-amd64.tar.gz\r# 转移到你想转移的目录\rmv code-server-3.11.0-linux-amd64 /usr/local/code-server\r 2、配置账号密码和启动端口\ncode-server 的配置文件目录：~/.config/code-server/config.yaml\n先启动一下生成目录：\n/usr/local/code-server/code-server\r 然后停止掉程序后修改配置文件：\n注：cert 可以选择为 false，后面再 Nginx 处配置证书即可。\nbind-addr: 0.0.0.0:8080\rauth: password\rpassword: $password\rcert: false\r 再启动即可。\n加入开机自启动：\necho \u0026quot;@reboot /usr/local/code-server/code-server\u0026quot; \u0026gt;\u0026gt; /var/spool/cron/root\rservice crond restart\r 3、配置 Nginx 反代和开启 SSL 证书\n注：自行替换 example.com 为你的域名和修改 SSL 证书所在位置。\n...\rserver {\rlisten 80;\rserver_name example.com;\rreturn 301 https://$host$request_uri;\r}\rserver {\rlisten 443 ssl;\rserver_name example.com;\r# SSL 配置\rssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\rssl_protocols TLSv1 TLSv1.1 TLSv1.2;\rssl_certificate cert/1_example.com_bundle.crt;\rssl_certificate_key cert/2_example.com.key;\r# 反代 8080 端口的 code-server\rlocation / {\rproxy_pass http://localhost:8080;\rproxy_http_version 1.1;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection \u0026quot;upgrade\u0026quot;;\rproxy_set_header Host $host;\r}\r}\r...\r 至此完成，以上。\n","id":61,"section":"posts","summary":"记录下 code-server 从官方源下载安装并配置 HTTPS 的过程。 官方 GitHub 项目地址：code-server 1、下载安装 选个中意的 Release 下载并解压： # 下载 wget https://github.com/cdr/code-server/releases/download/v3.11.0/code-server-3.11.0-linux-amd64.tar.gz # 解压 tar -xzvf code-server-3.11.0-linux-amd64.tar.gz # 转","tags":["Linux"],"title":"CentOS7 下安装 code-server","uri":"https://senjianlu.com/2021/07/centos7-code-server/","year":"2021"},{"content":"刚装完 MinIO 测试的时候其实就发现了部分页面会出错，但是看了下错误基本都是认证错误，响应代码为 500，觉得可能是 Nginx 配置有误，实则不然\u0026hellip;\u0026hellip;\n 具体见帖子：windows 启动之后minio之后。访问127.0.0.1:9000 跳转到了 127.0.0.1:9001 是什么原因\n1、最直观的表现就是最新版本的 MinIO 9000 端口会强制被转到 9001 的控制台端口，登录页面是这样的：\n2、操作过程中，会出现部分错误：\n① 查看存储桶具体信息时\n页面报错：\n This \u0026lsquo;admin\u0026rsquo; API is not supported by server in \u0026lsquo;mode-server-fs\u0026rsquo;\n 后端报错：\n...\roriginal error -\u0026gt; (user_buckets.go:123: error server side encryption configuration not found)\rfriendly error: The server side encryption configuration was not found\r ② 分享文件时\n页面报错：\n An error occurred, please try again\n 后端报错：\n...\roriginal error -\u0026gt; (user_objects.go:51: A header you provided implies functionality that is not implemented)\r 3、解决方法：\n和帖子里讲的一样，回退版本，我出错的版本是 2021/07/18 更新的版本，是通过：\nwget https://dl.minio.io/server/minio/release/linux-amd64/minio\r 直接下载的，看同目录下文件应该是 minio.RELEASE.2021-07-15T22-27-34Z 版本，GitHub 上也有发布，但是不知道为什么问题这么多\u0026hellip;\u0026hellip;\n帖子推荐版本是 RELEASE.2021-07-12T02-44-53Z，但是经过测试向前推 2 个版本强制跳转控制台的问题依旧存在，于是看文件大小选了个想必不包括控制台的版本：RELEASE.2021-06-14T01-29-23Z，下载后因为本地已经配置好了环境变量的关系，直接覆盖之前的 minio 文件然后重启服务即可。\n/usr/local/minio server /storage --address \u0026quot;:9000\u0026quot;\r  Unable to initialize OpenID: found invalid keys (client_secret= redirect_uri= ) for \u0026lsquo;identity_openid\u0026rsquo; sub-system, use \u0026lsquo;mc admin config reset myminio identity_openid\u0026rsquo; to fix invalid keys (*fmt.wrapError) 启动时你有可能会和我一样碰到上面的报错，你可以忽略它，在我的测试下即使有错误 MinIO 的所有功能也都正常。\n如果你是强迫症，那么请遵循下面的步骤来解决它：\n 先删除之前的 mc 再下载对应版本的：mc.RELEASE.2021-06-13T17-48-22Z 在后台启动你的 MinIO，因为 mc 需要访问你的 MinIO 服务。 然后执行：  # 新增 host，这里的 myminio 是你上面所缺少的 host 的名字，请自行替换\r# $minio_host 可以是 IP 也可以是你已经反代完成的域名，只要能正常访问即可\rmc config host add myminio http://$minio_host $root_user $root_password --api s3v4\r# 保存中提醒你做的刷新操作\r./mc admin config reset myminio identity_openid\r 再启动，理论上就已经不报错了，如果还有错误请花时间对照文档修复吧：MinIO Client 完全指南   小声逼逼，挺离谱的\u0026hellip;\u0026hellip;\n","id":62,"section":"posts","summary":"刚装完 MinIO 测试的时候其实就发现了部分页面会出错，但是看了下错误基本都是认证错误，响应代码为 500，觉得可能是 Nginx 配置有误，实则不然\u0026hellip","tags":["Linux"],"title":"MinIO 9000 端口强制跳转 9001 端口且报 This 'admin' API is not supported by server in 'mode-server-fs'、An error occurred, please try again 和 The server side encryption configuration was not found 错误","uri":"https://senjianlu.com/2021/07/centos7-minio-error/","year":"2021"},{"content":"Linux 命令笔记，方便查找。\n 系统硬件\n1、内存 SWaP 查看：\nfree -m\r 2、系统内核查看：\nuname -a\r 3、SELinux 关闭：\n# 临时关闭\rsetenforce 0\r 修改 /etc/selinux/config 文件：\n# 永久关闭\rvi /etc/selinux/config\r 将 SELINUX=enforcing 修改为 SELINUX=disabled：\n# SELINUX=enforcing\rSELINUX=disabled\r  SSH 连接、文件相关\n1、跨服务器文件传输：\nscp $file user@host:$file_to\r  防火墙端口开启关闭\n1、Firewalld 防火墙相关：\n# 查看当前开放的所有端口\rfirewall-cmd --list-all\r# $port 为你需要开放的端口\rfirewall-cmd --add-port=$port/tcp --permanent # $port 为你需要关闭的端口\rfirewall-cmd --zone=public --remove-port=$port/tcp --permanent\r# 加载防火墙配置\rfirewall-cmd --reload\r# 彻底关闭\rsystemctl stop firewalld.service\rsystemctl disable firewalld.service\r 2、Iptables 防火墙相关：\n# 查看当前防火墙规则\riptables -L -n\r# 开放端口\riptables -A INPUT -p tcp --dport $port -j ACCEPT\riptables -A OUTPUT -p tcp --dport $port -j ACCEPT\r# 存储防火墙配置\rservice iptables save\r# 彻底关闭\rsystemctl stop iptables.service\rsystemctl disable iptables.service\rchkconfig iptables off\r  代理相关\n1、设置临时代理（只在当前终端中生效，SSH 断开后失效）：\n# HTTP 代理\rexport http_proxy=http://$username:$password@$host:$port\r# SOCKS5 代理\rexport http_proxy=socks5://$username:$password@$host:$port\r 2、为 Git 设置代理（git clone 等操作会使用该代理）：\n# 设置 SOCKS5 代理\rgit config --global http.proxy socks5://$username:$password@$host:$port\rgit config --global https.proxy socks5://$username:$password@$host:$port\r# 查看代理\rgit config --global --get http.proxy\rgit config --global --get https.proxy\r# 取消代理\rgit config --global --unset http.proxy\rgit config --global --unset https.proxy\r ","id":63,"section":"posts","summary":"Linux 命令笔记，方便查找。 系统硬件 1、内存 SWaP 查看： free -m 2、系统内核查看： uname -a 3、SELinux 关闭： # 临时关闭 setenforce 0 修改 /etc/selinux/config 文件： # 永久关闭 vi /etc/selinux/config 将 SELINUX=enforcing","tags":["linux"],"title":"Linux 命令（1）系统硬件、网络相关 | SSH 连接、文件相关 | 防火墙端口开启关闭","uri":"https://senjianlu.com/2021/07/linux-command-01/","year":"2021"},{"content":"起因是 BuyVM 的存储块补货了，于是下单买了一年 256 GB 的再套个 CloudFalre 用来做对象存储，存存图片和 Docker 镜像文件应该是够了，反正不够还能继续挂载。\n 顺便把 BuyVM 挂载硬盘的流程一起记下：\n1、购买后去控制台把 Block Storage 附加到（Attached To）对应的 VPS 上。\n2、在 VPS 里查看数据块编号，类似 scsi-0BUYVM_SLAB_VOLUME-1331 的就是存储块。\nls /dev/disk/by-id/\r 3、格式化。\nmkfs.ext4 -F /dev/disk/by-id/scsi-0BUYVM_SLAB_VOLUME-1331\r 4、新建文件夹并挂载，这里以根目录下的 /storage 为例：\nmount -o discard,defaults /dev/disk/by-id/scsi-0BUYVM_SLAB_VOLUME-1331 /storage\r 5、设置开机自动挂载，完成。\necho '/dev/disk/by-id/scsi-0BUYVM_SLAB_VOLUME-1331 /storage ext4 defaults,nofail,discard 0 0' | sudo tee -a /etc/fstab\r   MinIO 的安装也没有任何难度，因为有现成编译好的版本，直接下载运行就行了。\n1、我是用的是 CentOS7 系统，所以选择 linux-amd64 版本：\nwget https://dl.minio.io/server/minio/release/linux-amd64/minio\r 2、下载下来的文件加上权限就能运行，但是为了方便管理还是放到 /usr/local 路径下：\nmv minio /usr/local/\rchmod +x /usr/local/minio\r 测试启动一下：\n/usr/local/minio server /stroage --address \u0026quot;:9000\u0026quot; --console-address \u0026quot;:9001\u0026quot;\r 启动成功，默认账号密码都是：minioadmin\n3、修改账号密码。\n最新版本的 MinIO 已经停用从配置文件中读取账号密码启动的功能，因此现在只能将用户信息配置在系统的环境变量中。\n以下命令仅可用来测试，在终端关闭后就会失效。\nexport MINIO_ROOT_USER=username\rexport MINIO_ROOT_PASSWORD=password\r 永久配置请参照这个命令，修改 /etc/profile 文件：\nvi /etc/profile\r 并在空白处添加：\nexport MINIO_ROOT_USER=username\rexport MINIO_ROOT_PASSWORD=password\r 使其生效：\nsource /etc/profile\r 4、开机启动。\n这里用最简单的方法实现开机启动：\ncrontab -e\r # MinIO 开机启动\r# . /etc/profile; 作用为先读取环境变量，不配置无法读取账号密码。\r@reboot . /etc/profile;/usr/local/minio server /storage --address \u0026quot;:9000\u0026quot; --console-address \u0026quot;:9001\u0026quot;\r service crond restart\r  如果重启后 MinIO 没有自启动的话，请自行查看 log，crontab 的配置头上可能需要加上 3 行：\nSHELL=/bin/bash\rPATH=/sbin:/bin:/usr/sbin:/usr/bin\rMAILTO=root\r 这些是用来选择语言、可执行文件目录和用户的，具体情况还是看日志处理。\n 5、Nginx 上传文件的配置。\n我至今遇到了两个错误：\n 413 Request Entity Too Large 修改上传文件最大大小解决。 文件下载报错 403 SignatureDoesNotMatch 就很巧全是大家碰到过的问题，修改 headers 传递解决。  最后的 Nginx 配置如下：\n...\rlocation / {\rproxy_pass http://127.0.0.1:9001;\r# MinIO 上传最大大小 1 GB\rclient_max_body_size 1024m;\rproxy_http_version 1.1;\r# headers 传递\rproxy_set_header Host $host;\rproxy_set_header Connection \u0026quot;upgrade\u0026quot;;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header X-Real-IP $remote_addr;\rproxy_set_header X-Forwarded-Proto $scheme;\r}\r...\r 至此结束。\n 2021/07/21 更新\n回滚以解决部分错误：MinIO 9000 端口强制跳转 9001 端口且报 This \u0026lsquo;admin\u0026rsquo; API is not supported by server in \u0026lsquo;mode-server-fs\u0026rsquo;、An error occurred, please try again 和 The server side encryption configuration was not found 错误\n ","id":64,"section":"posts","summary":"起因是 BuyVM 的存储块补货了，于是下单买了一年 256 GB 的再套个 CloudFalre 用来做对象存储，存存图片和 Docker 镜像文件应该是够了，反正不够还能继续挂载。 顺便把 BuyVM 挂载硬盘","tags":["Linux"],"title":"CentOS7 下 MinIO 的安装和配置","uri":"https://senjianlu.com/2021/07/centos7-minio/","year":"2021"},{"content":"又购置了一批 VPS 后，大大小小的 Linux 服务器数量来到了 40 多台，自己写的服务器探针开始感受到压力了，专业性先不提，服务器一多前端那么多 Echarts 图标就够 Chrome 受的了\u0026hellip;\u0026hellip;\n本来想着咬咬牙花时间研究下 Zabbix 的配置上企业级监控，结果发现官方的 Docker 镜像从 server 端到面板前端到 agent 端居然全都有，因为自用的数据库就是 PostgreSQL，还省了安装，Docker pull 完直接使用即可（数据库的安装可以参考我的这篇文章：PostgreSQL 学习笔记 (一) 数据库的安装与环境配置）。\n  我的安装顺序是：\nserver 端 \u0026ndash;\u0026gt; 前端面板 \u0026ndash;\u0026gt; agent 端\n请结合你自己的情况选择。\n 1、server 端。\n官方 Docker 镜像：zabbix-server-pgsql\n注意：使用 MySQL 和 PostgreSQL 时 Docker 镜像是不同的，且在启动 Docker 镜像之前就先创建好名为 zabbix 的数据库。\n# pull\rdocker pull zabbix/zabbix-server-pgsql:4.0-centos-latest\r# 启动，自行更改 host、port、username 和 password 数据库连接参数（ZBX_STARTPOLLERS 参数可以保证你在监听大量高延迟服务器下不产生 zabbix poller process more than 75% busy 的错误，如果出错之后再去修改 config.v2.json 会比较麻烦）\rdocker run --name some-zabbix-server-pgsql -p 10051:10051 --net=host -e DB_SERVER_HOST=\u0026quot;$pgsql_host\u0026quot; -e DB_SERVER_PORT=$pgsql_port -e POSTGRES_USER=\u0026quot;$pgsql_username\u0026quot; -e POSTGRES_PASSWORD=\u0026quot;$pgsql_password\u0026quot; -e ZBX_STARTPOLLERS=15 -d docker.io/zabbix/zabbix-server-pgsql:4.0-centos-latest\r# 查看 log\rdocker logs some-zabbix-server-pgsql\r# 没有报错的话将其设为开机启动\rdocker update --restart=always some-zabbix-server-pgsql\r 2、面板前端。 官方 Docker 镜像：zabbix-web-nginx-pgsql\n注意：一般情况下都和 server 端安装在同一个服务器上。\n# pull\rdocker pull zabbix/zabbix-web-nginx-pgsql:4.0-centos-latest\r# 启动，自行替换数据库连接参数，并将容器的 8080 端口映射到本机 10052 端口（注意该容易已经内置 Nginx，因此如果你准备在宿主机中安装 Nginx 并解析域名反代该容器，请使用 8080 端口，如果只准备用端口访问服务，则映射 80 端口也无妨）\rdocker run --name some-zabbix-web-nginx-pgsql -p 10052:8080 -e DB_SERVER_HOST=\u0026quot;$pgsql_host\u0026quot; -e DB_SERVER_PORT=$pgsql_port -e POSTGRES_USER=\u0026quot;$pgsql_username\u0026quot; -e POSTGRES_PASSWORD=\u0026quot;$pgsql_password\u0026quot; -e PHP_TZ=\u0026quot;Asia/Shanghai\u0026quot; -d docker.io/zabbix/zabbix-web-nginx-pgsql:4.0-centos-latest\r# 查看 log\rdocker logs some-zabbix-web-nginx-pgsql\r 在防火墙和安全组 10052 端口开放之后，通过外网访问 http://服务器 IP:10052 检查面板是否启动成功，默认登录用户名为：Admin，密码为：zabbix。\n# 没有报错的话将其设为开机启动\rdocker update --restart=always some-zabbix-web-nginx-pgsql\r  中文界面开启方式：  3、agent 端。\n官方 Docker 镜像：zabbix-agent\n注意：这里虽然还是安装 server 所在的“本机”作为案例，但是因为 Docker 之间走的是虚拟网络，IP 并非 127.0.0.1，因此配置和在外网被监控机的一样：IP 需填外网 IP 并开放 10050（agent 默认）端口。\n# pull\rdocker pull zabbix/zabbix-agent:4.0-centos-latest\r# 启动，server_ip 填写 server 端所在服务器的外网 IP，端口默认为 10051，而 hostname 则需要在前端面板上配置好，参考下方步骤。\rdocker run --name some-zabbix-agent -p 10050:10050 -e ZBX_HOSTNAME=\u0026quot;$hostname\u0026quot; -e ZBX_SERVER_HOST=\u0026quot;$server_ip\u0026quot; -e ZBX_SERVER_PORT=$server_port -d docker.io/zabbix/zabbix-agent:4.0-centos-latest\r  选择创建主机， 主机名称就是 hostname，需要注意的是不能有汉字。\n主机群组选 Zabbix servers 即可，后续自行更改。\n # 查看 log\rdocker logs some-zabbix-agent\r# 开机自启动\rdocker update --restart=always some-zabbix-agent\r 没有问题的话去前端检查一下 ZBX 是否可用，\n如果可用的话，再去看下监控图形， 如果都没问题的话，Zabbix 的安装就结束了，以上。\n","id":65,"section":"posts","summary":"又购置了一批 VPS 后，大大小小的 Linux 服务器数量来到了 40 多台，自己写的服务器探针开始感受到压力了，专业性先不提，服务器一多前端那么多 Echarts 图标就够 Chrome 受的","tags":["Docker"],"title":"CentOS7 下用 Docker 安装和启动 Zabbix 企业级服务器监控系统","uri":"https://senjianlu.com/2021/07/centos7-docker-zabbix/","year":"2021"},{"content":"新项目初始因为用的是 Cloudflare 的 DNS 解析，下意识的开启了 CDN，在这之后才开始配置 Nginx，明明配置的没问题但是 HTTP 强制跳转 HTTPS 就是会报 ERR_TOO_MANY_REDIRECTS 301 将您重定向的次数过多的错误，百思不得其解。\n后来在查询解决方案的时候试着加上了 Cloudflare 关键词，然后看到了这篇文章：一种可能导致 ERR_TOO_MANY_REDIRECTS 的原因，感觉就是这个原因，试了下果然解决了，优化下标题 SEO 希望能给更多人看到。\n虽然很简单还是放下具体的操作步骤。\n 关于 Cloudflare 四种 SSL/TLS 模式的区别：Cloudflare 四种 SSL/TLS 加密模式的功能解析及实践\n 1、确定你的 Nginx 配置是没有问题的。\n# HTTP 80 端口\rserver {\rlisten 80;\rserver_name example.com;\rroot /usr/share/nginx/html;\rindex index.html;\r# 强制跳转 HTTPS\rlocation / {\rreturn 301 https://$server_name$request_uri;\r}\r}\r# HTTPS 443 端口\rserver {\rlisten 443 ssl;\rserver_name example.com;\rroot /usr/share/nginx/html;\rindex index.html;\r# SSL 配置\rssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\rssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\rssl_protocols TLSv1 TLSv1.1 TLSv1.2;\rssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\rlocation / {\r# 服务所在端口\rproxy_pass http://127.0.0.1:8080;\rproxy_http_version 1.1;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection \u0026quot;upgrade\u0026quot;;\rproxy_set_header Host $host;\r}\r}\r 这样的配置至少 HTTP 强制跳转 HTTPS 就已经是没有问题的了，在防火墙和安全组打开 80 和 443 端口之后不会出现重定向不到的问题。\n修改完记得重启 Nginx 服务。\nnginx -s reload\rservice nginx restart\r 2、Cloudflare 配置修改 SSL/TLS 为端到端加密。\n原因在开头文章中已经讲的很明确了：\n 原因\n因为在 Cloudflare 的 SSL/TLS 设置选项中，如果你选择了 Flexible ，那么所有对你的服务器的请求都是通过 HTTP 发送的，而如果服务器上已经设置了将 HTTP 重定向到 HTTPS 的话，就会发生重定向循环。\n 如图更改即可。\n3、注意事项：\n上述操作结束后，如果服务器 Nginx 配置项中一个域名同时有 HTTP 和 HTTPS 两个 server 配置内容的话，所有 HTTP 访问会无视其对应配置而改为 HTTPS 协议并遵循 HTTPS 的 server 配置内容，这会引起最大的问题就是类似 Let\u0026rsquo;s Encrypt SSL 证书申请时所采取的：在服务器某一位置生成认证文件并用 HTTP 协议访问它以完成验证这一措施失效。\n也就是说，强制 HTTPS 跳转和 Let\u0026rsquo;s Encrypt SSL 证书自动续签你只能选其一。\n","id":66,"section":"posts","summary":"新项目初始因为用的是 Cloudflare 的 DNS 解析，下意识的开启了 CDN，在这之后才开始配置 Nginx，明明配置的没问题但是 HTTP 强制跳转 HTTPS 就是会报 ERR_TOO_MANY_REDIRECTS 301 将您重定向的","tags":["网站建设"],"title":"Nginx 强制跳转 HTTPS 配置无误且使用了 Cloudflare 后出现 ERR_TOO_MANY_REDIRECTS 301 将您重定向的次数过多的解决方法","uri":"https://senjianlu.com/2021/07/nginx-cloudflare-301-too-many-redirects/","year":"2021"},{"content":"腾讯云虽然免费提供诚信亚洲的 SSL 证书申请，但是一年一申请还是有些麻烦，再加上只是给边缘项目域名加上 HTTPS 防止前端引用资源的时候报不安全，稍微折腾一下一劳永逸感觉会更方便一点，这样在后续的其他项目也能直接用。\n 教程的顺序为我自己操作的顺序：\n申请证书 → 配置 Nginx HTTPS 访问和放行 HTTP 下的证书路由 → 自动续签证书配置\n1、首先申请证书，由于我使用的是 CentOS7 系统，因此可以 yum 直接安装 Certbot：\nyum -y install certbot\r 虽然一般教程接下来都是直接执行如下命令申请证书（example.com 替换为你自己的域名，也可是二级域名）\ncertbot certonly --webroot --agree-tos -v -t --email example@gmail.com -w /usr/share/nginx/ -d example.com\r 但是还是有几点需要在执行之前确认：\n 防火墙和安全组放行 80 端口（后续配置 HTTPS 访问再自行放行 443 端口） 确保 example.com 域名已经解析到了你在申请证书的服务器 IP 上 确保 Nginx 配置无误，指：http://example.com/.well-known/acme-challenge/ 下临时生成的认证文件可以被访问到。  2、Nginx 的配置可以像我下面这样（我选的验证文件临时目录为 /usr/share/nginx，server_name 等可以自行替换）：\nserver {\rlisten 80;\rlisten [::]:80;\rserver_name _;\rroot /usr/share/nginx/html;\r# Load configuration files for the default server block.\rinclude /etc/nginx/default.d/*.conf;\r# Let's Encrypt 证书认证（优先级最高放在最前面）\rlocation ~ /.well-known {\rroot /usr/share/nginx;\rallow all;\r}\r}\r 在配置好后重启 Nginx：\nnginx -s reload\rservice nginx restart\r 然后执行上面证书申请的命令应该就可以申请到了，任何错误请依次确认上述 3 点事项。\n注：如果使用的是 Cloudflare DNS 解析，请在 SSL/TLS 处选为灵活模式，以防止强制 HTTPS 转换导致的文件无法验证。\n3、证书自动续签。\nCertbot 提供了方便的一键续签命令：\ncertbot renew\r 在证书到期时间小于 30 天的情况下，执行以上指令后会在原位置更新证书，接下来只要手动 Nginx 重新加载配置并重启就能使用新的证书了。\nCertbot 很贴心的提供了钩子，以方便在 renew 操作前后执行其他命令，于是便可以直接使用下面的命令同时完成续签和重启 Nginx 操作：\ncertbot renew --pre-hook \u0026quot;service nginx stop\u0026quot; --post-hook \u0026quot;service nginx start\u0026quot;\r 接着以官方建议的每天 2 次频率将其加入到任务计划中：\ncrontab -e\r ...\r# 每 12 小时执行一次\r0 */12 * * * certbot renew --pre-hook \u0026quot;service nginx stop\u0026quot; --post-hook \u0026quot;service nginx start\u0026quot;\r...\r service crond restart\r 理论上是没问题的，大概 60 天以后回来记录下自动续签是否生效。\n2021/07/17\ntodo\u0026hellip;\n","id":67,"section":"posts","summary":"腾讯云虽然免费提供诚信亚洲的 SSL 证书申请，但是一年一申请还是有些麻烦，再加上只是给边缘项目域名加上 HTTPS 防止前端引用资源的时候报不安全，稍微折腾一","tags":["网站建设"],"title":"Let's Encrypt 证书的申请、自动更新和 Nginx 的配置","uri":"https://senjianlu.com/2021/07/nginx-letsencrypt-apply-and-auto-renew/","year":"2021"},{"content":"给网站套上 Cloudflare 防止被打和缓存部分静态文件应该是常规操作了，但是想起来之前好像见到过的帖子：第一次知道 HTTPS 会暴露服务器 IP，在新的服务器上试验了一下发现在访问 https:// 服务器 IP 的时候真的会返回 Nginx 配置中的第一封 SSL 证书而泄露域名，在这种全网扫 IP 成本极低的年代真的是很危险\u0026hellip;\u0026hellip;于是还是决定稍作配置以排除掉这个危险因素。\n 1、80 端口常规配置\n在用户用 IP 直接访问时返回 500 错误。\n# ========= 基础配置 =========\r# 禁止 IP 直接访问\rserver {\rlisten 80;\rlisten [::]:80;\rserver_name _;\rlocation / {\rreturn 500;\r}\r}\r 直接访问 http:// 服务器 IP:80 端口效果： 2、443 端口配置\n参考文章：【小教程】Nginx 默认拒绝发送证书设置教程\n# 防止发送 SSL 证书\rserver {\rlisten 443 ssl http2 default_server;\rserver_name _;\rssl_protocols TLSv1.2 TLSv1.3;\r# 启用拒绝 TLS 握手\rssl_reject_handshake on;\r# SSL Session 缓存，不设置的话无缓存配置不生效\rssl_session_cache shared:SSL:10m;\rssl_session_timeout 10m;\r# log 位置自行替换\raccess_log /rab/log/nginx/access.log;\r}\r 这样配置之后的访问效果：\nERR_SSL_UNRECOGNIZED_NAME_ALERT 就是我们想要的效果。\n至此配置结束。\n","id":68,"section":"posts","summary":"给网站套上 Cloudflare 防止被打和缓存部分静态文件应该是常规操作了，但是想起来之前好像见到过的帖子：第一次知道 HTTPS 会暴露服务器 IP，在新的服务器上试验了一","tags":["网站建设"],"title":"Nginx 学习（二）处理用户仅使用 IP 访问时服务器返回 SSL 证书泄露域名等问题","uri":"https://senjianlu.com/2021/07/nginx-note-02/","year":"2021"},{"content":"明明腾讯云才免费帮忙升过配置，1H2G 升到了 2H4G，结果稍微部署了一点 Docker 又不够了\u0026hellip;\u0026hellip;\n看了下现在的这些容器基本都是做端口流量转发的任务，内存交换量不需要很大，想试着加下虚拟内存看看能不能解决问题，毕竟 2H8G 的服务器就要到 70 多一个月了，能省则省。\n 1、因为 SWaP 分区相当于是将硬盘作为内存使用，硬盘 IO 速率如果不行会很影响程序运行，所以请先确定虚拟内存是否能满足你的需要。\n因我的需求是新增内存以运行更多的 Docker 容器，起一个样例并循环调用查看它的运行情况。\n粗略可以看到大概为 4 kB/s 的内存速率要求\u0026hellip;\u0026hellip;\n再野鸡的 VPS 钻石盘都能满足，但还是来看下腾讯云硬盘 IO：\ntime dd if=/dev/zero of=/test.disk bs=8k count=300\r 肯定能满足要求了。\n2、创建 SWaP 分区。\n首先查看是否是否已经有 SWaP 分区存在：\n# 一般情况下 SWaP 分区操作都在服务器根目录下执行\rcd /\rfree -m\r 如果有的话先删除，执行以下命令清理分区：\n# swapfile 为你的分区文件名\rswapoff /swapfile\r 如果没有既存分区或者分区清理完毕以后，便可以开始着手增加分区了。\n网上一般都建议增加 1 到 2 倍原内存的虚拟内存空间，实际上还是得看你是否真的需要这些内存和其性能是否能满足你的要求，部分情况下堆积过多缓存在 SWaP 会严重影响程序运行，在最边缘的扇区 IO 速率甚至会降到不到 1mB/s 以下，详细可以参照这篇讨论：How can swapoff be that slow?\n回归正题，因为我对内存速率一点要求都没有，因此直接扩容到当前内存的 2 倍大小，\n# 创建分区文件，我的分区文件名为 swapfile\rsudo dd if=/dev/zero of=/swapfile bs=1k count=7578000\r# 建立 SWaP\rmkswap /swapfile\r# 启动 SWaP\rswapon /swapfile\r# 查看虚拟内存是否创建成功\rfree -m\r 创建成功。\n3、开机自动启动 SWaP 分区。\n只需要修改 /etc/fstab 文件，在最后添加一行内容即可。\nsudo chmod 777 /etc/fstab\rsed -i '$a /swapfile swap swap defaults 0 0' /etc/fstab\r 至此，SWaP 分区创建成功，可以重启看下配置是否均生效。\n","id":69,"section":"posts","summary":"明明腾讯云才免费帮忙升过配置，1H2G 升到了 2H4G，结果稍微部署了一点 Docker 又不够了\u0026hellip;\u0026hellip; 看了下现在的这些容器基本都","tags":["Linux"],"title":"CentOS7 下建立 SWaP 分区以增加虚拟内存","uri":"https://senjianlu.com/2021/07/centos7-swap/","year":"2021"},{"content":" Notion 链接：https://www.notion.so/rabbir/1a25e9f6a26d4551902af651915117d7\n ","id":70,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/1a25e9f6a26d4551902af651915117d7","tags":["日语"],"title":"日语学习 「こそあど系統」","uri":"https://senjianlu.com/2021/06/japanese-ko-so-a-do-xi-tong/","year":"2021"},{"content":" Notion 链接：https://www.notion.so/rabbir/a24f7acbdba44e0ebe290fd0c3dd1907\n ","id":71,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/a24f7acbdba44e0ebe290fd0c3dd1907","tags":["日语"],"title":"日语学习 格助词「を」在自动词前的使用","uri":"https://senjianlu.com/2021/06/japanese-ge-zhu-ci-wo/","year":"2021"},{"content":" Notion 链接：https://www.notion.so/rabbir/e0d5da57af9c47c5a58df377cc4ac558\n ","id":72,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/e0d5da57af9c47c5a58df377cc4ac558","tags":["日语"],"title":"日语学习 日语词类划分整理","uri":"https://senjianlu.com/2021/06/japanese-ri-yu-ci-lei-hua-fen-zheng-li/","year":"2021"},{"content":" Notion 链接：https://www.notion.so/rabbir/eee6ce0ebd9249a9a281805aadb54582\n ","id":73,"section":"posts","summary":"Notion 链接：https://www.notion.so/rabbir/eee6ce0ebd9249a9a281805aadb54582","tags":["日语"],"title":"日语学习 使役、被动和使役被动","uri":"https://senjianlu.com/2021/06/japanese-shi-yi-bei-dong/","year":"2021"},{"content":"虽然 Telegram 的 APP 自带 SOCKS5 代理支持，直接配置即可使用，但是几乎配置完连上就是秒封，必须通过国内服务器做中转，即：国外服务器先安装 SOCKS5 代理，再安装 GOST 将国内机中转来的流量转发到本机 SOCKS5 对应端口；国内服务器则只需要安装 GOST 将中转流量转发至国外服务器即可。\n 我所配置的例子中流量所经历的转发过程：\n客户端 \u0026ndash;\u0026gt; 国内服务器:15555 \u0026ndash;\u0026gt;（加密）\u0026ndash;\u0026gt; 国外服务器:15554 \u0026ndash;\u0026gt;（本机转发）\u0026ndash;\u0026gt; 国外服务器:15555（SOCKS5 代理服务所在端口）\n  1、国外服务器安装 SOCKS5 代理\n不做介绍，CentOS7 直接使用我的一键脚本：CentOS7 下一键安装 SOCKS5 代理\ncurl -s https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20下一键安装%20SOCKS5%20代理/install.sh | bash -s $ss5_port $ss5_username $ss5_password\r 注意安装过程中会自动开放防火墙的指定端口，如果安装完无法连接请自行检查云服务器端口组。\n检查用指令：\ncurl -x socks5://$ss5_username:$ss5_password@$ip:$ss5_port http://ip-api.com/json/?lang=zh-CN  2、国内服务器安装 GOST\n使用我克隆的 GOST 管理一键脚本：\n注：原作者：KANIKIG；脚本原地址：Multi-EasyGost\nwget --no-check-certificate -O gost.sh https://gitee.com/senjianlu/one-click-scripts/raw/main/CentOS7%20下一键安装%20GOST%20并启动%20HTTP%20和%20SOCKS5%20代理服务/关联脚本/CentOS7%20下简单的%20GOST%20配置脚本/gost.sh \u0026amp;\u0026amp; chmod +x gost.sh \u0026amp;\u0026amp; ./gost.sh\r 出现一下界面则说明脚本下载并启动成功，\n首先输入“1”安装，\n1\ry\r 安装成功后再次启动脚本，以提前配置好转发规则，\n./gost.sh\r 选择“7”，\n7\r 由于是国内中转机，因此选择加密隧道流量转发“2”，\n2\r 接下来的配置参考以下即可，一般选用 tls 隧道即可，IP 则需要替换为境外服务器 IP，\n国内机配置至此结束。\n3、国外服务器安装 GOST 解密隧道流量并转发至 SOCKS5 端口\n配置与国内机大同小异，不过需要选解密隧道流量而非加密隧道流量，然后将流量转发至 SOCKS5 所在端口，我这里 SOCKS5 所在 15555 端口。\n至此 GOST 隧道转发配置就完成了。\n 出现问题请按以下步骤排查：\n 两边服务器防火墙和安全组是否都已经开放。 单访问国外服务器 SOCKS5 代理服务是否可行。 两边 GOST 配置是否匹配。   结束。\n","id":74,"section":"posts","summary":"虽然 Telegram 的 APP 自带 SOCKS5 代理支持，直接配置即可使用，但是几乎配置完连上就是秒封，必须通过国内服务器做中转，即：国外服务器先安装 SOCKS5 代理，再安装 GOST 将国内","tags":["Linux"],"title":"CentOS7 下安装 SOCKS5 代理并使用 GOST 搭建加密中转隧道","uri":"https://senjianlu.com/2021/06/centos7-socks5-gost/","year":"2021"},{"content":"为了在 CentOS7 服务器下部署 Java Web 项目和使用 RabbitMQ 所留的笔记。\n 1、首先检查服务器当前 OpenJDK 版本，如果不是需要的版本请先卸载。\njava -version\r 由于这次我们使用的是下载压缩包直接解压后将路径添加至环境变量的方法，并非使用 rmp 命令等直接安装，因此如果后续要更新版本只需要更改环境变量路径即可。\nrmp 命令等安装的卸载方法请自行参考：CentOS7 卸载 OpenJDK 安装 Oracle JDK\n2、下载 Java 开发者工具包 JDK。\n官方地址：Java SE Downloads \n注：官方下载目前需要注册账号，如果你和我一样使用的 JDK 11 的话可以直接通过我的 Google 云盘分享链接进行下载。\n由于个人目前用的是 JDK 11 因此以此为例：\n注意服务器架构和下载完成包\n下载完后通过 Xftp 等工具上传至服务器。\n3、解压并移动到所需目录下（以我常用的 /opt/java 为例）。\nmkdir /opt/java\rmv jdk-11.0.11_linux-x64_bin.tar.gz /opt/java/\rcd /opt/java\rtar -xzvf jdk-11.0.11_linux-x64_bin.tar.gz\r 此时 Java 所需要添加进环境变量的路径即为：/opt/java/jdk-11.0.11\n4、添加至环境变量并使其生效。\n编辑文件\nvi /etc/profile\r 在文件末尾追加，JDK 11 以后只需添加以下环境变量：\nexport JAVA_HOME=/opt/java/jdk-11.0.11\rexport PATH=$PATH:$JAVA_HOME/bin\r  注意！JDK 11 以前还需要涉及到 JRE_HOME 以及 CLASS_PATH（以 JDK 1.8 为例）：\nexport JAVA_HOME=/home/java/jdk1.8.0_171\rexport JRE_HOME=$JAVA_HOME/jre\rexport CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\rexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\r  执行 source 命令使环境变量立即生效：\nsource /etc/profile\r 5、检查是否安装成功。\njava -version\r ","id":75,"section":"posts","summary":"为了在 CentOS7 服务器下部署 Java Web 项目和使用 RabbitMQ 所留的笔记。 1、首先检查服务器当前 OpenJDK 版本，如果不是需要的版本请先卸载。 java -version 由于这次我们使用的是下载压缩包","tags":["Java"],"title":"CentOS7 下安装 Java 环境（JDK11）","uri":"https://senjianlu.com/2020/12/centos7-jdk/","year":"2020"},{"content":"最近的新项目考虑到有分布式的需要，感觉加入消息队列不仅能增强各系统直接的协调性，对服务器资源也能提高利用效率，决定试下 RabbitMQ，于是便有了这篇 CentOS7 下安装 RabbitMQ 的笔记。\n 1、首先安装所需的依赖包。\nyum -y install epel-release\ryum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz\r 2、安装 Erlang。\n需要注意的是，RabbitMQ 的版本和 Erlang 的版本是需要匹配的，具体可以参照这里：RabbitMQ Erlang Version Requirements\n 如果你不想折腾，您可以选择直接\nyum -y install erlang\r 安装 Erlang，而这样默认安装的版本是 03.18.el7，虽然看起来没有对应版本的 RabbitMQ 可以安装，但是实测至少 3.6.5 版本的 RabbitMQ 实际上是可以验证 Erlang 版本通过并安装，后续的使用也没有问题。\n 但是在这里我还是选择安装最新的版本，反正是个人项目，在新特性和版本稳定之间有选择的情况下，前项对我的吸引力开始更大，反正记了笔记大不了回退就是了。\n# 更新 yum 源至最新\rwget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm\rrpm -Uvh erlang-solutions-1.0-1.noarch.rpm\r# 安装 Erlang\ryum install erlang\r 完成后检查 Erlang 版本\nyum info erlang\r 3、安装 RabbitMQ。\nErlang 版本为最新的话，理论上 RabbitMQ 的版本可以随便挑，这里我就挑当前最新的吧。\nwget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.17/rabbitmq-server-3.8.17-1.el7.noarch.rpm\ryum -y install socat\rrpm -ivh rabbitmq-server-3.8.17-1.el7.noarch.rpm\r 注意，3.8.17-1.el7 的 el7 所代表的就是 CentOS7 系统所适用的包 结束后检查一下\nrabbitmq-server status\r 没有问题的话将可视化管理界面一并安装：\nrabbitmq-plugins enable rabbitmq_management\r 4、启动服务并配置用户。\n首先启动服务：\nsystemctl start rabbitmq-server\rrabbitmqctl status\r 然后开放防火墙和端口组，来确保可视化管理界面也运行成功，默认地址及端口：http://127.0.0.1:15672，IP 请自行替换，出现以下界面说明启动成功。\n接下来配置用户，指令如下：\n#添加新用户，用户名为\u0026quot;root\u0026quot;，密码为\u0026quot;root\u0026quot;\rrabbitmqctl add_user root root\r#设置用户为管理员角色\rrabbitmqctl set_user_tags root administrator #授权远程访问 rabbitmqctl set_permissions -p / root \u0026quot;.\u0026quot; \u0026quot;.\u0026quot; \u0026quot;.*\u0026quot;  5、设置为开机自启动。\nsystemctl enable rabbitmq-server\r 至此结束。\n","id":76,"section":"posts","summary":"最近的新项目考虑到有分布式的需要，感觉加入消息队列不仅能增强各系统直接的协调性，对服务器资源也能提高利用效率，决定试下 RabbitMQ，于是","tags":["RabbitMQ"],"title":"CentOS7 下安装 RabbitMQ","uri":"https://senjianlu.com/2020/12/centos7-install-rabbitmq/","year":"2020"},{"content":"因为一开始没整理归类文件的习惯，把手头的主力开发机弄得很乱，索性就备份了些重要文件重装了电脑，然后就把服务器的 Nginx 配置文件全丢了\u0026hellip;\u0026hellip;剩下服务器上一堆没注释的配置连自己都看晕了，就重新学下吧。\n Nginx 反代路由的替换在同一服务器部署多项目是还是很常用的，比方说我有一个将 https://ceshiku.cn/tiny-server-proxy/ 反代到本地的 57191 端口的需求，但是又不想影响到主路由和其他项目地址例如 https://ceshiku.cn/test/ 的解析。\n我肯定不能这么写：\nlocation ^~ /tiny-server-proxy {\rproxy_pass http://localhost:57191;\r}\r 为什么呢，如果我这么写的话，那当我访问 https://ceshiku.cn/tiny-server-proxy/status 的时候，虽然能被代理到指定端口上运行的项目，但是实际上项目收到的请求路由是这样的：\n很明显多出来的 /tiny-server-proxy/ 其实是我不需要的，那我改一下：\nlocation ^~ /tiny-server-proxy/ {\rproxy_pass http://localhost:57191;\r}\r 结果收到的路由呢，如下：\n依旧是多了 /tiny-server-proxy/ 这个路径，可见在路由匹配上下功夫是没有用的，只能在 proxy_pass 后反代的端口上做更改：\nlocation ^~ /tiny-server-proxy/ {\rproxy_pass http://localhost:57191/;\r}\r 再试一下，果然可以了：\n那么 Nginx 反代到端口项目时路由部分路径替换的问题就解决了。\n 那么碰到动静分离的项目，想要访问静态资源时替换路径有该怎么操作呢，这个时间就要搬出除了 root 之外 Nginx 另一个资源映射语法了：alias\nlocation ^~ /t/ {\rroot /www/root/html/;\r}\rlocation ^~ /t/ {\ralias /www/root/html/;\r}\r 当路由和文件夹配置完全一样的情况下，当请求链接是 /t/a.html 的情况下，两个配置分别会：\nroot 的配置会返回 /www/root/html/t/a.html 的文件，alias 的配置会返回 /www/root/html/a.html 的文件，alias 所起的作用就和刚刚往反代端口后加的斜杠类似，做到因为把 location 后面配置的路径完全舍弃。\n但是用的时候还需要注意：alias 只能位于 location 块中（root 可以不放在 location 中）。\n","id":77,"section":"posts","summary":"因为一开始没整理归类文件的习惯，把手头的主力开发机弄得很乱，索性就备份了些重要文件重装了电脑，然后就把服务器的 Nginx 配置文件全丢了\u0026hellip","tags":["网站建设"],"title":"Nginx 学习（一）proxy_pass 反代路由的替换和 root 与 alias 的区别","uri":"https://senjianlu.com/2020/12/nginx-note-01/","year":"2020"},{"content":"为了在东京奥运会期间应对临时封路，紧跟日本人赶了2个月的功能，终于能休息一阵了 :)\n虽然是因为奥运会推迟而不是因为开发完成\n总之又能学点新东西了，方便记录先准备个一键推送博客的工具吧。\n 环境：Windows 10 64 位\n需要时间：10 分钟左右\n原教程：CSDN Hugo 博客的脚本快速发布博客\n 说着好听的一键脚本其实也就是把发布所需要输入的几行命令写进一个批处理文件里罢了，首先回顾下一般情况下我们完成一篇博客并发布的所有命令：\nhugo new posts/myblog01.md # 新建一片博文，当然也能去路径下之间创建.md文件\rhugo server -t pure --buildDrafts # 在localhost起博客看效果 pure换为你的theme名\rhugo --theme=pure --baseUrl=\u0026quot;https://moyu.best\u0026quot; --buildDrafts # 确保效果符合预期后生成public目录 Url换为你的博客地址\rcd public\rgit add .\rgit commit -m \u0026quot;推送\u0026quot;\rgit push -u origin master\rgit push -f # 如果报错了但是你能确定本地的是最新状态的话\r 然后开始写脚本，一般在 Windows 下直接写 .bat 脚本就行了，但是这里我们为了后期通过 Git Bash 来执行，省去每次输入 Git 账户密码的步骤，所以采用 Shell 脚本。\n直接上代码和注释：\n#!/bin/bash\recho -e \u0026quot;\\033[0;32mStart to deploy!\\033[0m\u0026quot;\r# Build the hugo project\rhugo --theme=pure --baseUrl=\u0026quot;https://moyu.best\u0026quot; --buildDrafts\r# Go to Public\rcd public\r# Add all\rgit add .\r# Commit\rgit commit -m \u0026quot;Commit by deploy.sh\u0026quot;\r# Push\rgit push -u origin master\r# Back\rcd ...\r 然后是选择用 Git Bash 的方式执行这个批处理脚本。\n选定 Git Bash 即可，然后运行！\n可以看见效果和我们手动 push 是一样的，推送成功了。\n结束~后续是可以添加 msg 作为参数传入和 catch 冲突后强制 push 的，这里就不琢磨了，等个下周用上2天好好学习一下批处理脚本吧。\n脚本下载地址：下载（记得更改 theme 主题和博客 Url）\n","id":78,"section":"posts","summary":"为了在东京奥运会期间应对临时封路，紧跟日本人赶了2个月的功能，终于能休息一阵了 :) 虽然是因为奥运会推迟而不是因为开发完成 总之又能学点新东西了，","tags":["网站建设"],"title":"Windows 下 Hugo 静态博客一键推送发布","uri":"https://senjianlu.com/2020/05/hugo-auto-build/","year":"2020"},{"content":"在学习具体的权限管理之前，需要先了解一下 PostgreSQL 中权限的几个层次：\n 特殊权限，包含超级用户的权限、创建数据库的权限、创建用户以及 Login 的权限。 在数据库中创建模式 (SCHEMA) 的权限。 在模式中创建数据库对象的权限，如创建表、索引等。 查询单表，和插入、更新或删除表中数据的权限。 最低的则是只能操作表中部分字段的权限。  五种权限中，比较难理解的可能就是为什么要把创建数据库等设置为特殊权限。在这之前，我们需要先学习 PostgreSQL 中是如果对权限进行管理的。\n PostgreSQL 使用角色的概念管理数据库权限，为了方便管理，往往给一个角色赋予一系列的权限，而如果某个用户需要这些权限，则只需要直接把角色赋给用户即可。\n稍微有点绕的是在这里，PostgreSQL 中角色和用户又是没有区别的，一个用户就是一个角色，因此可以把一个用户的权限赋给另一个用户，稍稍有点难理解，但是实际操作中不会有什么阻碍。\n1、那就从创建用户开始吧。\n指令如下：\n创建角色：CREATE ROLE username [ [ WITH ] option [...] ] 创建用户：CREATE USER username [ [ WITH ] option [...] ]  在这里我一般情况下使用 CREATE USER，因为这样默认出来的用户是有 \u0026ldquo;Login\u0026rdquo; 权限的，不需要再去额外设置一下了。用户的其他属性用两种方法创建出来不会有任何不同。\n上面命令中的 \u0026ldquo;option\u0026rdquo; 就是用户创建时被赋予的权限了，可以是如下内容：\n举个实际的例子，比如我现在有一个新的项目要启动，需要创建对应的用户和数据库：\nCREATE USER new_project_user CREATEDB; ALTER USER new_project_user PASSWORD '12345'; # 修改登录密码  这样一个可创建项目数据库的用户就创建完成了！当然这种情况下，创建的用户其他是没有其他数据库及表的访问权限的。\n2、修改权限\n之前说过的5项权限中，存在包含超级用户、创建数据库权限和 Login 在内的特殊权限，在修改权限或者说管理权限时，使用的命令是与一般权限不同的：\nALTER ROLE username [ [WITH] option [ ... ] ]  而一般的针对数据库中建模式、数据库中建表等的则使用 \u0026ldquo;GRANT\u0026rdquo;、\u0026ldquo;REVOKE\u0026rdquo; 命令：\nGRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ] # 上面这种是书中记载的，可能难以理解，换种形式如下 GRANT some_privileges ON database_object_type object_name TO username   \u0026ldquo;some_privileges\u0026rdquo; 代表一种权限，例如 \u0026ldquo;SELECT\u0026rdquo;、\u0026ldquo;UPDATE\u0026rdquo; \u0026ldquo;database_object_type\u0026rdquo; 代表一种数据库对象类型，例如 \u0026ldquo;TABLE\u0026rdquo;、\u0026ldquo;SEQUENCE\u0026rdquo; \u0026ldquo;object_name\u0026rdquo; 代表表名 \u0026ldquo;username\u0026rdquo; 则就是用户名了  比如说我现在需要将 \u0026ldquo;testdb\u0026rdquo; 模式中的 \u0026ldquo;student\u0026rdquo; 表查看权限赋予刚刚我们创建的 \u0026ldquo;new_project_user\u0026rdquo; 用户：\nGRANT SELECT ON table student TO new_project_user;  这个时候再用 Navicat 连接后去查看 \u0026ldquo;student\u0026quot;表，可以正常访问了。\n具体的权限贴在下放以作记录，如果需要同时赋予多个权限，除了 \u0026ldquo;ALL PRIVILEGES\u0026rdquo; 以外，只需要在多个权限中用 \u0026ldquo;,\u0026rdquo; 隔开就行了。\n 这里是后面学习时候的修修补补：\n 只有创建数据库的权限是特殊权限，而如果要将某个数据库的权限全赋给某个用户，同样使用的是 \u0026ldquo;GRANT\u0026rdquo; 命令，例如：  GRANT ALL PRIVILEGES ON DATABASE testdb TO new_project_user;  \u0026ldquo;REVOKE\u0026rdquo; 是删除权限的命令，忘记举例：  REVOKE CREATE ON SCHEMA public from new_project_user;  ","id":79,"section":"posts","summary":"在学习具体的权限管理之前，需要先了解一下 PostgreSQL 中权限的几个层次： 特殊权限，包含超级用户的权限、创建数据库的权限、创建用户以及 Login 的权限。 在数据库中","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记（三）用户权限的管理控制","uri":"https://senjianlu.com/2020/02/postgresql-note-03/","year":"2020"},{"content":"psql 是 PostgreSQL 中的一个命令行工具，类似与 Oracle 中的 sqlplus，但是与之不同的是 psql 支持运行数据库命令或者直接运行 SQL 语句并把结果返回。\n既然是从头开始学习，当然也把这一部分再巩固下为佳。\n 进入 psql 命令行的方法\nsu - postgres psql  当显示 postgres=# 时就说明已经进入 psql 工具下了。\n 基础命令 1、查看所有数据库\n\\l  2、切换数据库\n\\c testdb  3、查看此数据库下的表\n\\d  4、查看表的属性\n\\d [表名]  \\d 的用法很多，不仅可以查看表，也可以查看表的索引或是带上通配符查询\n\\d student_pkey \\d s*  而扩展的 \\d 命令则包含了更多功能\n\\dn # 列出所有schema \\db # 显示所有表空间 \\du # 列出所有的数据库用户 \\dp [表名] # 显示表权限分配情况 ......  更多的指令在输入 \\d 后再补两个 Tab 键即可查询出来，同期 \\t 之类的也类似。\npsql 的学习到这目前就够用了，因为开发中主要还是用 Navicat 来的高效一点，既然刚刚涉及到权限查看了，正好手头上有个多表不同用户的项目，那就下一章先学下权限管理好了。\n","id":80,"section":"posts","summary":"psql 是 PostgreSQL 中的一个命令行工具，类似与 Oracle 中的 sqlplus，但是与之不同的是 psql 支持运行数据库命令或者直接运行 SQL 语句并把结果返回。 既然是从头开始学习","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记（二）psql 工具的使用","uri":"https://senjianlu.com/2020/02/postgresql-note-02/","year":"2020"},{"content":"由于在学校针对作业和毕设 MySQL 已经很够用了，因此也没有做更多对数据库的功课，只知道 Oracle 数据库适合企业，MySQL 适合小型项目，但是工作以后的第一个项目就接触的是陌生的 PostgreSQL 数据库，才发现原来还有这么好用的开源数据库，正好趁新冠肺炎这个被动假期时间把它好好学一遍。\n 主要书籍是 《PostgreSQL 修炼之道：从小工到专家》\nJD链接：PostgreSQL 修炼之道：从小工到专家\nPDF 下载 (Google Drive)：PostgreSQL 修炼之道从小工到专家.pdf\n无论如何工具书还是入正比较好，个人是因为快递延缓发货，一边等书一边 PDF 先学习起来。况且只在读完两章后就感叹唐成老师这本书写的真的很好，对 PostgreSQl 的特性和基础 SQL语句的解释都很详细，即使是从没这方面基础的也可以收获很多。\n 关于 PostgreSQL 的介绍，书中已经写的很详细了，就不再做过多的赘述。\n吸引我的地方无非几点：\n 免费开源（最重要的原因） 有稳定的更新和问题反馈渠道 占用低，即使是阿里的轻量都能跑 Django+PostgreSQL Navicat for PostgreSQL 价格低，150/3 月，1000 买断，真香  而再看使用上的优点则太多了：\n 支持数据库中创建对象，对多个项目用同数据库的太友好！ 支持列表 list 类型数据的存取 支持 JSON、xml 类型数据的存取 INSERT INTO table VALUES () ON CONFLICT() DO UPDATE/NOTHING 约束时处理（专属神器，太好用了，不知道省了多少时间）  列举几个我没有系统学习之前，用的时候发现的优点，我想在其中总有一个点会戳中后端开发人员的心。\n1、直接开始吧那就！首先当然是 PostgreSQL 的安装。\nPostgreSQL 支持 Linux、Mac OS 和 Windows 下安装，而且方法相当简单，由于我是为了部署项目数据库，因此这里以 CentOS7 为例。\n注：这里安装的是 9.2.24 版本的,如果需要 12+ 版本的可参考这个博文 PostgreSQL 学习笔记（一） 补足：12.8 版本数据库的安装\n运行\nyum install postgresql-server.x86_64  当然在安装前可以先运行\npsql --version  查看下云服务等是否自带了低版本 Postgresql 数据库。\n安装之后，记得先初使用化数据库再启动\nservice postgresql initdb service postgresql start service postgresql status  显示 running 就说明数据库已经安装完成了。\n2、登录到数据库。\nPostgreSQL 在安装时默认会添加用户 postgres，运行\nsu - postgres  先切换到 postgres 用户下，再输入\npsql  就进入到 PostgreSQL 数据库中了。\n这里推荐先把 postgres 用户的密码改掉：\nALTER USER postgres WITH PASSWORD \u0026lt;password\u0026gt;;  注意：这里的命令是在数据库中运行的，即 postgres=#: 下。\n3、远程连接，如果你要在 Navicat 等工具中使用这个数据库，还需要做些配置。\n首先是 postgresql.conf 文件的配置\nvi /var/lib/psql/data/postgresql.conf  修改\nlisten_addresses = '*' port = 5432 max_connections = 100  保存退出即可。\n然后再修改 pg_hba.conf 这个文件，路径和刚刚相同\nvi /var/lib/psql/data/pg_hba.conf  在最后添加这条\nhost all all 0.0.0.0/0 md5  当然开放访问的 IP 视自己情况而定，这里因为腾讯云服务器安全组全开而且机器连防火墙都没开我也就自暴自弃了，后面会再专做一个项目部署时端口等的初步设置以保障最基础的安全性。\n都保存以后重启 PostgreSQL 服务，再尝试远程连接吧！\nservice postgresql restart  至此，PostgreSQL 的学习环境就已经安装完成了，如果想升级为开发环境，就像之前强调的一是防火墙要开，端口要适当开放；二是版本最好升级到 10+，以使用最新的特性。\n附上书的目录：\n基础篇涉及到所有支持存储的数据类型，并且所有 PostgreSQL 的基础操作也都做了详解，是肯定要认真学习并做好笔记的。\n提高篇的 PostgreSQL 特有正则表达式很值得学习，索引、序列和锁由于自身之前用的不多，也再过一遍好了。\n而之后的数据库优化和第三方开源软件及架构在这次学习中只会做了解，在项目进行或是完成后再结合实际情况学习可能效果会更好。\n","id":81,"section":"posts","summary":"由于在学校针对作业和毕设 MySQL 已经很够用了，因此也没有做更多对数据库的功课，只知道 Oracle 数据库适合企业，MySQL 适合小型项目，但是工作以后的第一个","tags":["PostgreSQL"],"title":"PostgreSQL 学习笔记（一） 数据库的安装与环境配置","uri":"https://senjianlu.com/2020/02/postgresql-note-01/","year":"2020"},{"content":"突然发现 PVE 下安装的 LEDE 和爱快 不是占用的 CPU 物理核心，所设置的 1 核只是限制了最高占用，于是就决定再利用下多下来的 2G 内存，安装个黑群晖做台式和笔记本之间的文件共享。\n 环境：ProXmoX VE\n需要时间：0.5 小时左右\n原教程：【悟空5kong】PVE 下部署 LEDE+黑群晖 NAS 双系统（J1900 软路由）\n 配置方面\n在已经成型的软路由基础上，新增了两块西数 1T 的紫盘。\n注意：紫盘主要用作监控存盘，只有 5400 转，普通家用上 7200 转的蓝盘组 RAID1 即可。\n所需的软件及下载地址\n所有文件 (Google Drive)：PVE 下 黑群晖安装所需文件\n 黑群晖的安装和配置比较简单，不需要设置网卡之类的，所以直接开始就行了。\n1、首先在 PVE 下新建虚拟机作为黑群晖的容器。\n先将 .iso 光盘镜像文件 (XPEnoboot_DS3615xs_5.2-5967.1..iso) 上传，这个将作为虚拟机的启动引导。\n接着创建虚拟机，并将其编号按顺序设置为 102，注意这个编号要记住，之后挂载硬盘的时候会用到。\n操作系统界面选择刚刚上传的 .iso 文件作为引导。\n硬盘的配置默认即可，如果你的系统硬盘只有 32G 的话可以缩小，反正也不会用来做存储盘。\n如果黑群晖只用来做文件存储而不装大量套件的话，CPU 设置一核心即可。\n亲测即使是传输大量照片等小文件的情况下，200ge 的一核占用也只在 50% 左右。 内存同理，看需求情况，但是2G确实已经很够用了。\n这一步需要注意：桥接的端口千万不要设置在之前进网的 WAN 口上，而设置在其他任意端口都没有问题！\n网卡则选择 E1000 因为部分黑群晖系统不支持半虚拟化的识别。\n确认无误完成即可。\n2、接着开始机械磁盘的挂载。\n视频教程中并没有这一步，但是这一步是需要放在安装黑群晖系统之前的，不然安装完再挂载会出现进不去系统等玄学问题。\n用 Xshell6 连接PVE后台，当然用上一篇的 MobaX 是一样的。\n进去后直接输入\nls -l /dev/disk/by-id/  查看当前系统连接的硬盘情况。\n只需要 ata 开头的即可，我挂载的是西数的机械，因此就是下面那两块了。\n接着复制这两块硬盘的完整信息。\n ata-WDC_WD10EJRX-89N74Y0_WD-WCC4J3FCD95S\nata-WDC_WD10EJRX-89N74Y0_WD-WCC4J4LZF6VT\n 然后在其前面加上 \u0026ldquo;qm set 102 \u0026ndash;sata2 \u0026quot; 运行即可。\n注：102 代表的是你虚拟机的编号；sata2 则是之后会显示在黑群晖盘符，自己设置即可\n之后再回虚拟机的硬件页面，就可以看见新增的这两块硬盘了。\n3、然后开始安装黑群晖系统。\n首先更改启动顺序，将 CD 设置为第一启动项，即我们刚刚上传的 .iso 接着点击启动虚拟机，启动完成后注意下后台地址。\n浏览器地址栏输入，进入后台页面。\n这里选择手动安装，并上传 .pat 文件，文件我也提供了下载。\n弹出的会清空硬盘直接同意即可，这里注意二次确认清空盘的个数是否和你挂载的盘加上一个系统盘的总个数相同。\n等待其安装完成自动重启即可。\n之后的配置就比较简单了，用户名密码自己设置即可，由于是黑群晖，联网内容全部跳过。\n至此，黑群晖的安装配置就完成了。\n4、最后就是组 RAID，这个比较简单。\n点击左上角的菜单，再选择存储空间管理员。\n选择存储空间\n选择自定义\n选择组成群组 选择你需要组 RAID 的两块硬盘，我这里因为组完了也上传了文件，就用的论坛的图。\n跳出的删除数据提醒，直接确认即可。\n我们这里选你需要的 RAID 模式，推荐 RAID1\n直接应用即可\n然后你就可以看见新建的正常的存储空间了。\n5、为其配置局域网的共享文件夹。\n填入文件夹名族，确认即可。\n选择 此电脑 右键，选择 映射网络驱动器\n填入你的期望盘符和网络文件夹路径即可。\n注：路径的格式由 IP+文件夹名组成\n黑群晖的安装真的比软路由简单太多了，只需要拿钱堆硬盘就可以了。\n顺便说一句，在组 RAID 方面，群晖提供了很方便的操作，勤整理，RAID0 和 RAID1 分开是一个很好的习惯。\n附上对 RAID5 等安全性怀疑的讨论：RAID5 磁盘阵列真的不安全么？\n没有什么存储方案是一劳永逸的。\n","id":82,"section":"posts","summary":"突然发现 PVE 下安装的 LEDE 和爱快 不是占用的 CPU 物理核心，所设置的 1 核只是限制了最高占用，于是就决定再利用下多下来的 2G 内存，安装个黑群晖做台式和笔记本","tags":["硬件"],"title":"PVE 下黑群晖的安装和硬盘直通组 RAID1","uri":"https://senjianlu.com/2020/01/pve-synology/","year":"2020"},{"content":"此教程由于初版结构混乱，已废弃，请参考新版（更新于 2021-10-24）：PVE 下 OpenWrt 纯净系统 + 爱快双软路由部署配置文件的整理\n 起因仅仅是不满足现在的科学上网速度，于是就花了点时间研究了下软路由，当然性能够的路由器是可以直接安装 LEDE 的，但是手头正好闲下来一块亮机的 200ge，索性就再组台小机器来当软路由吧。\n不过我不推荐 200ge 作为软路由的cpu，不仅功耗大，而且只有2个核心，LEDE 和爱快各占用一个以后就不能再安装群晖或是其他虚拟机，容易造成性能浪费的情况。\n 环境：ProXmoX VE\n需要时间：3小时左右\n原教程：【悟空5kong】PVE下部署 LEDE+黑群晖 NAS 双系统（J1900 软路由）\n上集- PVE (Proxmox VE) 安装双软路由 爱快+LEDE 保姆级教程\n下集- PVE (Proxmox VE) 安装双软路由 爱快+LEDE 保姆级教程\n 配置单和价格\n 所需的软件及下载地址\n所有文件 (Google Drive)：PVE 下 LEDE+爱快 双软路由部署 所需文件\n 从这里正式开始操作系统的安装和配置过程。\n注意：除了软路由本机，你还需要一台自己的电脑包括显示器鼠标和键盘。同时如果你是拨号上网，你还需要知道自己的运营商账号密码！\n注：操作系统及软路由的安装都较为简单，繁琐的主要是配置的过程，涉及到网卡上网口的切换以及同步 DNS 和网关的修改，推荐在看博文之前首先过一遍视频教程，PVE 和 LEDE 的安装参照悟空，而爱快和 LEDE 的网口映射参照 Video Talk。\n1、首先安装 PVE 系统，安装过程类似于 Windows 操作系统：下载 .iso 文件拷贝进 U 盘，然后开机过程中按 Del 键进入 BIOS，选择 U 盘启动来进行安装。\n Management Interface（网卡）：选默认的第一个，之后也做PVE的管理网口 Hostname（域名）：可以瞎填 IP Address：10.10.10.254 以后通过这个IP访问PVE系统，需要和网关同一网段 Netmask（子网掩码）：255.255.255.0 即可，基本默认都是这个 Getway（网关）：10.10.10.253 爱快的后台地址 DNS Server：10.10.10.253 和网关设置一样的即可\n如果不想麻烦推荐和图片一样设置，后续配置可以照抄。  重启过程中拔下u盘，重启后出现以下界面即说明PVE操作系统已经安装完成。\n2、在 PVE 系统安装完成后，需要将电脑连接到软路由进行接下来的操作，网线的连接比较简单：一头连接正在使用的电脑，另一头连接刚刚配置的 PVE 连接网口，一般情况下是主板的网口，如果配置的是网卡上的网口，那么离 PCIe 连接口最远的一般就是一号网口。\n物理连接完成后，还需要配置本机的 IP 和网关等才能进入 PVE 后台。\n IP 地址：保证和 PVE 虚拟机的 IP 在同一网段 子网掩码：默认的 255.255.255.0 默认网关：和 PVE 的相同 DNS：不配置自动获取即可  打开浏览器，输入 PVE 安装完成后显示的地址，注意是 https://10.10.10.254:8006/ 前缀和端口号不要忘记。\n注：可能有安全提示，直接跳过即可。\n 用户名：root 密码：PVE 安装时设置的密码 语言：默认英文，选择为中文  进入系统的网口选项下，可以看见有一个桥接网口已经建立，端口从属显示与 enp1so 对应，就是第一个网口，意味着第一个网口就被占用了。\n接下来打开所有物理网口的自动启动。\n为其他所有的空余网口建立虚拟网口为桥接做准备。\n建立的过程很简单，记住上面物理网口的名称，创建一个虚拟网口，只需要再桥接端口填入物理网卡名称即可。\n所有的网口都同样操作即可。一一对应检查完后网口就配置完成了。\n3、接下来开始创建虚拟机，原理和 Windows 上使用 VMware Workstation Player 等创建虚拟机一样。\n首先来创建 LEDE 对应的虚拟机，这一部分参考悟空的视频教程更加简单。\n点击创建虚拟机按钮。\n第一步没有需要特殊配置的。\n选择不使用任何介质，这里的安装方法是 SSH 连接至 PVE 后直接命令行安装，然后将这个虚拟机挂载在安装完成的文件夹上，更加快捷。\n硬盘不需要任何操作，反正等下不用这个盘。\nCPU 核心一核就够了。\n内存推荐 2G。\n桥接网口选择管理口即可，模型推荐 E1000，Video Talk 之后爱快等都会用E100进行配置。\n检查无误点击完成即可。\n接着进行添加网卡的操作，为所有虚拟网口在这台虚拟机中配置桥接。\n接着在本机上下载安装 MobaXterm，准备连接 PVE 系统。\n打开新建一个连接，截图是编辑但也啥差别。\n输入密码，点击 Yes 连接成功。\n拖拽虚拟机安装文件和转换工具进软路由系统中。\n接下来\nls  确保文件转移成功，接着为 img2kvm 添加可执行权限，并开始执行 .img 文件的转换\nchmod +x img2kvm ./img2kvm lede.img 101 vm-101-disk-1  101 是虚拟机的序号\n接下来回到浏览器的PVE后台界面，可以看到多出来一个未使用的磁盘，这就是刚刚转换完的，无视后缀是 disk-1 还是 disk-2 ，双击，选择添加即可。\n接着选择 \u0026ldquo;选项\u0026rdquo;，\u0026ldquo;引导顺序\u0026rdquo; 更改为刚刚挂载上的新硬盘即可。\n注意：接下来直接重启软路由，断电重启也可以！\n然后回来点击虚拟机，可能 LEDE 显示会没有反应，点击随意按一个键就可以了。\n至此，最有可能出错的 LEDE 安装完成，配置的事等到爱快配置完后进行。\n如果你是光纤，不需要拨号，那可以跳过接下来的爱快的安装与配置。\n4、接下来开始安装爱快软路由。\n一样新建虚拟机，此界面的名称可以自由更改，其他保持默认即可。\n存储不用改，.iso 介质选刚刚上传的 iKuai 就可以了，类型 Linux 版本也不用变。\n硬盘 2G 就够了，配置如图。\nCPU 配置也是一核就够了。\n内存的设置要注意，新版本爱快最低 4G 内存，如果你的内存不够，需要选择较低版本。 网络的配置和 LEDE 一样，管理口对应的虚拟网口和 E1000。\n核对后直接完成即可。\n创建完成后，去虚拟机的硬件管理界面，当前只有一个默认网口，也是当时配置的PVE的管理网口，同时它也是只是一个 LAN 口，LAN 口通俗来讲就是出网的口，而 WAN 口是进网的口，爱快的作用是拨号，因此我们需要新建一个 WAN 口：选择添加网络设备。\n选择最后一个端口，物理上就是离 PCIe 连接口最近的网口。\n接着启动虚拟机即可。\n爱快的安装还没有结束，进入虚拟机页面，还需要选择安装，如图输入，等待安装完成后的自动重启。如果重启后没有画面或是端口显示断开，按下回车刷新就行了。\n进入系统后，设置 LAN 口 IP：10.10.10.253\n接着在浏览器地址栏输入 10.10.10.253 便可进去 iKuai 的后台了，账号密码均为 admin\n登录后会提示修改管理员密码，改不改都无所谓\n登录进去以后可以看到我们预先配置的两个网口，LAN 口是绿色的说明正在被正常使用，这个口就是我们设置的 PVE 管理口兼 LAN 口，而 WAN 口还是灰色的，需要我们点进去绑定以下刚刚新建的网卡。\n注意：此时将家庭数据中心拉出来的网线接到设置的 WAN 口对应的物理网口上！准备进行拨号上网！\n填入运营商账号密码，然后拨号。\n这边显示已连接说明爱快已经拨号上网成功了。\n接下来配置 DHCP 服务端，选择 DHCP 设置 DHCP 服务端，进行填写。\n注：DHCP 协议的功能为集中的管理、分配 IP 地址。\n 客户端地址：覆盖网段内的所有 IP 即可。 子网掩码：默认的 255.255.255.0 网关：10.10.10.252 就是 LEDE 的后台地址 DNS：如果以科学上网为主选 8.8.8.8 不然就用网络所属运营商的  保存后刷新页面，确认服务正常，爱快软路由的配置就全部完成了。 总之，爱快主要负责拨号上网和提供 DHCP 服务，在配置完成之后，可以先验证下本机是否有网络在进行下一步操作。\n5、配置 LEDE 软路由。首先回到 LEDE 的系统界面，输入以下命令去更改 LEDE 的 IP 地址。\nvi /etc/config/network  方向键控制光标找到这一行，按以下 \u0026ldquo;i\u0026rdquo; 键进入编辑模式，更改成 10.10.10.252 就是你想要的 LEDE 的后台 IP 地址。\n编辑完成后，按下 \u0026ldquo;Esc\u0026rdquo; 键，左下角有冒号出来后，输入 \u0026ldquo;wq\u0026rdquo; 保存并退出。 之后输入\nreboot  重启 LEDE 软路由。 接着就可以在本机的浏览器上输入 10.10.10.252 进入 LEDE 软路由的后台了，默认密码是 koolshare\n进入后台后首先来配置网口。\n选择 LAN 口这一行，点击 编辑。\n首先在物理设置部分将所有的网口都勾选上，因为有爱快的情况下 LEDE 不需要 WAN 口。\n然后回到基本设置，如图设置。\n IP：LEDE 后台地址 10.10.10.252 网关：爱快的后台地址 10.10.10.253 DNS 服务器：和刚刚一样填写即可  接着下滑，到 DHCP 服务器部分，因为 LEDE 是作为爱快下的二级路由存在的，我希望所有的 DHCP 服务都由 LEDE 来提供而不是不具有科学上网功能的爱快来提供，因此要去掉 忽略此接口 的勾选。然后还要去高级设置中，再把 强制 的勾勾上。\n接着保存即可。\n由于 LEDE 用不到 WAN 口，所以将 WAN 口和 WAN6 的接口绑定到空的接口上就可以了。\n至此 LEDE 的安装和配置就全部完成了，修改以下本机的网络设置，将 IP 和 DNS 都勾选至自动获取，看看能不能上网吧！\n6、确保可以上网后，我们回到 LEDE 的后台，准备进行科学上网等的配置操作。\n点击左侧菜单中的 酷软中心，进入的时候如果提示更新，千万不要去更新，新版本会有大量的软件无法使用。 一般情况下，即使你不更新进入酷软中心，也无法再在商城找到科学上网的工具，在 19 年 6 月份的更新中，酷软就将这几个插件删去了。你可以选择去下载网友提供的包离线安装，但很大几率上是不兼容新版本系统的，这里推荐使用酷软的系统备份还原，直接将系统回复至有插件的版本。\n选择 系统 备份/升级\n选择我上面提供的老版本，再点击上传备份。上传之后系统会自动重启。\n等待重启完成后，再进入酷软中心就可以看到消失的科学上网插件了！\n节点的配置就不再阐述了，SSR 和 SS 订阅的稳定性在我实际用下来后觉得并不好，不如只在电脑端开启相应代理，而 V2Ray 则比较稳定，基本全天 24 小时节点都不会出现断连情况。\n 推荐2家供应商：\n忍者云 有线路提供 V2Ray 代理，稳定\n奇幻之旅 便宜实在\n 至此，PVE 下 LEDE+爱快 双软路由的部署就全部完成了，好好享受世界吧！\n","id":83,"section":"posts","summary":"此教程由于初版结构混乱，已废弃，请参考新版（更新于 2021-10-24）：PVE 下 OpenWrt 纯净系统 + 爱快双软路由部署配置文件的整理 起因仅仅是不满足","tags":["硬件"],"title":"PVE 下 LEDE+爱快 双软路由部署（旧）","uri":"https://senjianlu.com/2020/01/pve-lede-ikuai-bak/","year":"2020"},{"content":"虽然也有免费的可以用，但是既然软路由已经配置了方便的上网环境，GitHub 访问起来比以前便利了许多，那就把图床直接部署在 GitHub 上好了，虽然隐私性是一缺点，但是主要也是给博客使用，也就无所谓了。\n 环境：Windows 10 64 位\n需要时间：0.5 小时左右\n原教程：CSDN PicGo+GitHub 搭建个人图床工具\n 1、在 GitHub 上新建仓库，并在 settings 中设置为 Public\n2、创建 token，为了给 PicGo 客户端配置，使其能上传给对应 GitHub 仓库。\n描述可以随便填写，但是 repo 权限中至少要勾选 public_repo（图上我是全勾的因为我还有个私人图床需要开启对私有仓库的访问权限）。\n注意：token 只出现一次！所以一定要保存！\n3、下载\u0026amp;安装 PicGo。\n PicGo （目前 2.2.1）是一个开源的图床工具，非常优秀。\n Git 地址：https://github.com/Molunerfinn/PicGo\nWindows 版下载地址：https://github.com/Molunerfinn/PicGo/releases\n4、配置 PicGo\n 仓库名：账号名+仓库名 分支名：master Token：刚刚保存的 token 存储路径：img/ 自定义域名：https://raw.githubusercontent.com/账号名/仓库名/master  配置点击设为默认图床，然后确定即可。\n至此，Windows 下 PicGo+GitHub 的个人图床工具搭建完成，通过微信或者 QQ 截图完成，默认剪贴板中是图片的情况下，直接 Ctrl+Shift+P 即可将图片上床图床，而 .md 格式的图片链接也会替换至剪贴板，直接粘贴在所需地方即可。\n","id":84,"section":"posts","summary":"虽然也有免费的可以用，但是既然软路由已经配置了方便的上网环境，GitHub 访问起来比以前便利了许多，那就把图床直接部署在 GitHub 上好了，虽然隐私性","tags":[],"title":"Windows 下 PicGo+GitHub 搭建个人图床工具","uri":"https://senjianlu.com/2020/01/picgo-github/","year":"2020"},{"content":"确确实实感觉记性越来越差，有记录包括“问题解决方法”、“配置文件修改”等信息的需求了，但同时也希望一切从简，听从V友建议选用 Hugo+GitHub Pages 免费搭建个静态博客来做树洞吧。\n 环境：Windows 10 64 位\n需要时间：1 小时左右\n原教程：CSDN Windows 下搭建 Hugo 博客\n 1、在 https://github.com/gohugoio/hugo/releases 地址下找到Windows压缩文件下载，如下图 64 位的。\n2、新建 Hugo 和 Hugo/bin 文件夹，将下载下来的 .exe 文件放入 bin 文件夹，并添加至环境变量中。\n3、在 Cmd 中输入\nhugo version  检测是否安装成功，安装成功后进入 Hugo 文件夹中，输入\nhugo new site myblog  myblog 替换成想要的博客文件夹名字。\n4、进入新建的博客文件夹下，可以看见项目结构：content 文件夹存放内容，themes 文件夹用来存放主题，config.toml 用来配置文件，这也是这次初步建立需要博客需要改的内容。\n5、建完文件夹后先去挑选主题，在 https://themes.gohugo.io/ 选择自己喜欢的主题进行下载，这次我使用 hugo-theme-m10c 这款主题，因为选择它避免配置 config.toml 文件而花费大量时间。\n6、Cmd 进入博客文件夹下，执行以下命令把 GitHub 上的主题文件 Clone 到对应文件夹下 themes/m10c\ngit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  7、此时就已经在本地运行博客做确认了，执行\nhugo server -t m10c --buildDrafts  启动项目，然后前往 http://localhost:1313/ 就可以看到了。\n8、接下来开始新建一篇博客，使用 Hugo 很大程度上就是看中了它将 .md 文件渲染成静态博客页面的能力，即使是发布完成后，原稿也可以保存方便脱机查看。\n首选 Ctrl+C 结束本地的预览，然后新建博文对应的 .md 文件。\nhugo new post/blog.md  新建的 .md 文件会存储在 content/post 中，直接前往进行编辑即可。\n9、推荐使用 VS Code 进行编辑，左上角的预览按钮，点击后可以将窗口分为左右两部分用于查看实施效果。 注意：draft: true 需要改为 draft: false 图中并未做修改，如果不修改就是草稿，不会在博文页面上显示内容！\n写完后直接 Ctrl+S 保存即可。\n10、再次本地启动项目，可以看见已经有对应的博文了。至此，本地博客环境就算配置完成了。\nhugo server -t m10c --buildDrafts  11、GitHub 为每个账号提供了一个免费的空间来存储静态的 HTML、JS 和 CSS，而我们就可以借此来发布博客。 首先去新建仓库，注意命名，这是 GitHub 辨别是否为网络空间的依据。\n仓库名需满足 账户名.github.io 的命名规范，然后点击绿色的 create 按钮进行创建。\n我因为已经部署完成，因此这里显示重复创建。\n12、创建完成后，回到 myblog 博客目录，执行以下命令来生成 public 目录，也就是 GitHub 仓库所需的静态博客的文件。（后续都用的原博客的图，路径可能有偏差，都是基础的 Git 操作）\nhugo --theme=m10c --baseUrl=\u0026quot;地址\u0026quot; --buildDrafts  13、进入 public 文件夹，将所有文件添加、提交到本地。\ngit init git add. git commit -m \u0026quot;附言\u0026quot;  14、将本地 public 与 GitHub 进行关联后，进行推送，第一次推送会需要输入 GitHub 的账号密码。\ngit add origin http://github.com/m1801823/m1801823.github.io.git git push -u origin master  15、等待推送完成后，刷新 GitHub 页面，对应的文件就上传上来了，这时候输入 http://账户名.github.io 就可以访问了\n16、如果自己有域名的话，也可以配置 DNS 直接让域名解析到你的静态博客上，方便告诉好友你的博客网址。\n这里以在 Namecheap 上购买的域名为例，不推荐阿里云和腾讯云，只因为管局备案太麻烦。\n首先选择已有域名进入管理面板。\n然后新增或者修改 DNS 解析记录，对应以下修改即可，只需要把 CNAME Record 的 Value 修改成你的地址即可。\n最后回到 GitHub 的仓库部分，选择 Settings，拉到 Custom domain 部分修改成你的域名保存。\n大概 5 分钟左右，域名就会解析到你的博客，在开始的几天是不支持 HTTPS 的，只能先用 http://你的域名 进行访问。\n之后如果 HTTPS 加密可用，则需要更改一下模板，在 head 部分加上\n\u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;upgrade-insecure-requests\u0026quot;\u0026gt;  来自动将 HTTP 的不安全请求升级为 HTTPS，否则可能出现 CSS 等加载不出来的情况。\n至此基于 Hugo 和 Github Pages 的静态博客搭建完成，开始养成记录的好习惯吧！\n","id":85,"section":"posts","summary":"确确实实感觉记性越来越差，有记录包括“问题解决方法”、“配置文件修改”等信息的需求了，但同时也希望一切从简，听从V友建议选用 Hugo+GitHub Pages 免费搭建个静","tags":["网站建设"],"title":"Windows 下 Hugo + GitHub Pages 搭建静态博客","uri":"https://senjianlu.com/2020/01/hugo-github-pages/","year":"2020"},{"content":"服务器的部署笔记。\n 各部分功能介绍：\n Nginx 是一个高性能的 HTTP 和反向代理 Web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。 uWSGI 负责多线程，即支持多人同时访问网站。 Django 是由 Python 编写的开源 Web 应用框架，适合个人小项目搭建。   服务器系统为 CentOS7，当然记录的所有命令再更高版本上也都可以使用。\n1、既然搭建的是 Python 项目，首先升级以下服务器端的 Python 版本，默认 Linux 自带 Python2，我们把它先升级为 Python3。\n安装依赖软件\nyum -y install sqlite-devel yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel  下载安装 Python3.6\nwget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz tar zxvf Python-3.6.1.tgz cd Python-3.6.1 ./configure --prefix=/usr/local/python3 make \u0026amp;\u0026amp; make install  创建 Python 及 pip 命令软链接\nln -s /usr/local/python3/bin/python3 /usr/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3  这样 Python3 就已经安装完成了，键入 Python3 再回车就可以进入 Python 编译了。\n注：Ctrl+Z 退出 Python 编译\n2、接下来安装 Django 并配置项目，这里选择的版本是 2.1.8，单纯的因为够用且稳定，新版本的环境配置没有前人指导。\npip3 install django==2.1.8  等待安装完成后，上传 Django 项目到服务器上任意目录，使用 Xftp 或者 git clone 都可以\ncd 项目文件夹 python3 manage.py runserver 0.0.0.0:80  注意，运行项目时可能报错：\n You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run \u0026lsquo;python manage.py migrate\u0026rsquo; to apply them.\n 这时只需要按照提示，输入以下内容即可\npython3 manage.py migrate  出现以下信息则说明启动成功。\n注意： 如果访问页面出现了以下错误，那么进入你的项目，修改 settings.py 将 ALLOWED——HOSTS = [] 修改为 ['*'] 即可解决。\n DisallowedHost at / Invalid HTTP_HOST header: \u0026lsquo;47.56.227.27\u0026rsquo;. You may need to add \u0026lsquo;47.56.227.27\u0026rsquo; to ALLOWED_HOSTS.\n 至此，Python 环境与 Django 环境就安装完成。\n3、接下来安装 uWSGI Web 网关。\n首先下载安装 uWSGI\nwget http://projects.unbit.it/downloads/uwsgi-2.0.1.tar.gz tar zxvf uwsgi-2.0.1.tar.gz cd uwsgi-2.0.1 python3 uwsgiconfig.py --build cp -R /home/uwsgi-2.0.1 /usr/local/uwsgi ln -s /usr/local/uwsgi/uwsgi /usr/bin/uwsgi  然后测试 uWSGI 是否安装成功，创建测试文件\nvi test.py  文件内容为：\ndef application(env, start_response): start_response('200 OK', [('Content-Type','text/html')]) return [b\u0026quot;Hello World\u0026quot;]  输入完成后 :wq 保存，然后执行以下命令进行测试。\n/usr/local/uwsgi/uwsgi --http :9090 --wsgi-file /home/test.py   防火墙开放端口指令：\n# 查看当前开放的所有端口 firewall-cmd --list-all # 替换为你需要开放的端口 firewall-cmd --add-port=80/tcp --permanent firewall-cmd --reload   然后去对应服务商的安全组处开放安全组。这里就以阿里云国际为例。 前往你的 IP:9090 出现 Hello World 就说明 uWSGI 的安装已经完成了！\n4、开始 uWSGI 和 Django 结合，执行\nuwsgi --http :9090 --chdir /home/Django 项目文件夹 --wsgi-file Django 项目(与 manage.py 同级)/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9192  同样访问 IP:9090 ，如果可以访问 Django 页面则说明成功。\n注：如果在访问 Django 项目时静态文件加载失败可以先忽略，在 Nginx 配置中会指定静态文件路径，配置后可以正常访问。\n5、安装 Nginx\n首先下载安装依赖第三方软件 PCRE\nwget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.34/pcre-8.34.tar.bz2 tar jxvf pcre-8.34.tar.bz2   如果报错：bzip2: Cannot exec: No such file or directory\n执行：yum -y install bzip2\n cd pcre-8.34 ./configure --enable-utf8 make \u0026amp;\u0026amp; make install  下载安装依赖第三方软件 OpenSSL\nwget http://distfiles.macports.org/openssl/openssl-1.0.2h.tar.gz tar zxvf openssl-1.0.2h.tar.gz  下载安装 Nginx\nwget http://nginx.org/download/nginx-1.9.9.tar.gz tar zxvf nginx-1.9.9.tar.gz ./configure --prefix=/usr/local/nginx --with-pcre --with-http_stub_status_module --with-http_ssl_module --with-openssl=/home/openssl-1.0.2h --with-http_gzip_static_module --with-http_sub_module --with-cc=/usr/bin/gcc make install  新建 www 用户\nuseradd -s /sbin/nologin -M www  备份、修改 Nginx 配置文件\ncd /usr/local/nginx/conf cp -f nginx.conf nginx.conf_bak vi nginx.conf (修改文件) user www; # 修改启动用户为 www worker_processes 4; # 启动4个进程，根据实际需求配置  启动 Nginx\ncd /usr/local/nginx/sbin ./nginx   如果报错：nginx: [emerg] still could not bind()\n说明80端口目前被占用\n执行：\nnetstat -apn | grep 80  然后：\nkill -9 26105  26105 为搜索出来的 0.0.0.0/80 对应的 PID\n注意：需要删除 5-6 次，因为执行的适合有进程保护\n 再访问 IP:80 显示 Nginx 页面说明 Nginx 安装成功。\n6、Nginx+uWSGI+Django 三者连携。\n首先在 Django 项目文件夹中创建 uwsgi.ini\nvi uwsgi.ini (文件内容) [uwsgi] # uwsgi启动端口 socket = 127.0.0.1:9090 # django项目目录 chdir=/home/SteamCash module=SteamCash.wsgi master = true processes=2 threads=2 max-requests=2000 chmod-socket=664 vacuum=true # 日志路径 daemonize = /home/SteamCash/logs/uwsgi.log  配置 Nginx\nvi /usr/local/nginx/conf/nginx.conf (文件内容) ...... server { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; # 选择为你项目的static文件夹 location /static { alias /home/SteamCash/static; } location / { include uwsgi_params; uwsgi_pass 127.0.0.1:9090; root html; index index.html index.htm; } ......  启动 uWSGI\nuwsgi --ini /home/SteamCash/uwsgi.ini  启动 Nginx\n./usr/local/nginx/sbin/nginx  接着访问页面即可。\n","id":86,"section":"posts","summary":"服务器的部署笔记。 各部分功能介绍： Nginx 是一个高性能的 HTTP 和反向代理 Web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。 uWSGI 负责多线程，即支持多人同时访问网站。 Django 是由 Python 编","tags":["Python"],"title":"CentOS7 下 Nginx+uWSGI 配置 Django 项目","uri":"https://senjianlu.com/2020/01/centos7-nginx-uwsgi-django/","year":"2020"},{"content":"如果你急于解决爬虫 HTTP 代理池访问 HTPPS 出错，并且自己有境外服务器的话，我直接给出解决方案：服务器搭建 SOCKS5 代理并在代码中以 socks5h://账号:密码@IP:端口 的格式使用\n以 Python3 为例：\nproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5h://username123:passwd456@128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5h://username123:passwd456@128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r 注意： 代理的协议选择要使用 SOCKS5H，下面我会放使用 HTTP 和 SOCKS5 产生的错误供参考。\n1、使用 HTTP 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  requests.exceptions.ProxyError: HTTPSConnectionPool(host=\u0026lsquo;steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by ProxyError(\u0026lsquo;Cannot connect to proxy.\u0026rsquo;, ConnectionResetError(10054, \u0026lsquo;远程主机强迫关闭了一个现有的连接。\u0026rsquo;, None, 10054, None)))\n 2、使用 HTTPS 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;http://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;https://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  requests.exceptions.ProxyError: HTTPSConnectionPool(host=\u0026lsquo;steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by ProxyError(\u0026lsquo;Cannot connect to proxy.\u0026rsquo;, ConnectionResetError(10054, \u0026lsquo;远程主机强迫关闭了一个现有的连接。\u0026rsquo;, None, 10054, None)))\n 3、使用 SOCKS5 代理时：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  socks.GeneralProxyError: Socket error: 0x05: Connection refused\nrequests.exceptions.ConnectionError: SOCKSHTTPSConnectionPool(host=\u0026lsquo;steamcommunity.com\u0026rsquo;, port=443): Max retries exceeded with url: /market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Case (Caused by NewConnectionError('\u0026lt;urllib3.contrib.socks.SOCKSHTTPSConnection object at 0x03C29450\u0026gt;: Failed to establish a new connection: 0x05: Connection refused'))\n 4、最后使用 SOCKS5 代理，但是协议处变为 SOCKS5H：\nurl = \u0026quot;https://steamcommunity.com/market/priceoverview/?appid=730\u0026amp;currency=1\u0026amp;market_hash_name=Clutch%20Cahhse\u0026quot;\rproxy = {\r\u0026quot;http\u0026quot;: \u0026quot;socks5h://128.129.139.201:13233\u0026quot;,\r\u0026quot;https\u0026quot;: \u0026quot;socks5h://128.129.139.201:13233\u0026quot;\r}\rresponse = requests.get(url,proxies=proxy,verify=False)\rprint(response.content)\r  proxy 200 b'{\u0026ldquo;success\u0026rdquo;:true,\u0026ldquo;lowest_price\u0026rdquo;:\u0026quot;$0.18\u0026quot;,\u0026ldquo;volume\u0026rdquo;:\u0026ldquo;210,212\u0026rdquo;,\u0026ldquo;median_price\u0026rdquo;:\u0026quot;$0.18\u0026quot;}'\n 返回了我需要的数据，成功。\n 在处理这个问题的时候，感觉把学的网络全还给了老师。\nHTTP 属于应用层，而 SOCKS5 属于会话层，这就意味着 SOCKS5 所能代理的范围会比 HTTP 协议更广。\n而 SOCKS5H 与 SOCKS5 的区别则是：SOCKS5 在本地解析 Hostname，而 SOCKS5H 则有 SOCKS5 代理所部署的服务器解析 Hostname。\n换句话说，SOCKS5 适合本地能够解析目标主机域名（比如 GitHub）但是访问速度慢的域名来提高下载速度，而 SOCKS5H 则可以用来代理本地不能解析的网站（比如 Google），由服务器解析目标主机域名。\n 顺便附上服务端代理的搭建脚本：\nHTTP 代理：CentOS7 下一键安装 Tinyproxy 代理\nSOCKS5 代理：CentOS7 下一键安装 SOCKS5 代理\n同时安装 HTTP 和 SOCKS5 代理：CentOS7 下一键安装 GOST 并启动 HTTP 和 SOCKS5 代理服务\n 结束。\n","id":87,"section":"posts","summary":"如果你急于解决爬虫 HTTP 代理池访问 HTPPS 出错，并且自己有境外服务器的话，我直接给出解决方案：服务器搭建 SOCKS5 代理并在代码中以 socks5h://账号:密","tags":["Python"],"title":"Python3 通过使用 SOCKS5H 来解决爬虫 SSL 错误和境内 DNS 污染的问题","uri":"https://senjianlu.com/2020/01/centos7-ssl-error/","year":"2020"}],"tags":[{"title":"Apollo","uri":"https://senjianlu.com/tags/apollo/"},{"title":"Clash","uri":"https://senjianlu.com/tags/clash/"},{"title":"DataX","uri":"https://senjianlu.com/tags/datax/"},{"title":"Docker","uri":"https://senjianlu.com/tags/docker/"},{"title":"Fiddler","uri":"https://senjianlu.com/tags/fiddler/"},{"title":"Java","uri":"https://senjianlu.com/tags/java/"},{"title":"K3s","uri":"https://senjianlu.com/tags/k3s/"},{"title":"Linux","uri":"https://senjianlu.com/tags/linux/"},{"title":"MongoDB","uri":"https://senjianlu.com/tags/mongodb/"},{"title":"postgresql","uri":"https://senjianlu.com/tags/postgresql/"},{"title":"Python","uri":"https://senjianlu.com/tags/python/"},{"title":"RabbitMQ","uri":"https://senjianlu.com/tags/rabbitmq/"},{"title":"其他","uri":"https://senjianlu.com/tags/%E5%85%B6%E4%BB%96/"},{"title":"区块链","uri":"https://senjianlu.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"title":"日语","uri":"https://senjianlu.com/tags/%E6%97%A5%E8%AF%AD/"},{"title":"游戏","uri":"https://senjianlu.com/tags/%E6%B8%B8%E6%88%8F/"},{"title":"硬件","uri":"https://senjianlu.com/tags/%E7%A1%AC%E4%BB%B6/"},{"title":"网站建设","uri":"https://senjianlu.com/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}]}